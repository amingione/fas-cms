{
  "version": 3,
  "sources": ["../../stackbit.config.ts"],
  "sourcesContent": ["// stackbit.config.ts\nimport { defineStackbitConfig } from '@stackbit/types';\nimport type { SiteMapEntry } from '@stackbit/types';\nimport fs from 'fs';\nimport path from 'path';\nimport { GitContentSource } from '@stackbit/cms-git';\n\n\nexport default defineStackbitConfig({\n  stackbitVersion: '~0.6.0',\n  ssgName: 'custom',\n  nodeVersion: '18',\n\n  // Let NVE boot your Astro dev server and choose the port\n  // Bind to 0.0.0.0 so the editor container can reach it\n  devCommand: 'yarn astro dev --host 0.0.0.0',\n\n  // Astro integration (NVE watches for these)\n  experimental: {\n    ssg: {\n      name: 'Astro',\n      logPatterns: { up: ['is ready', 'astro'] },\n      directRoutes: { 'socket.io': 'socket.io' },\n      passthrough: ['/vite-hmr/**']\n    }\n  },\n\n  // ...\n  contentSources: [\n    new GitContentSource({\n      rootPath: __dirname,\n      contentDirs: ['content'],\n      models: [\n        // ========= Reusable Blocks =========\n        {\n          name: 'HeroBlock',\n          type: 'data',\n          filePath: 'content/blocks/hero/{slug}.json',\n          fields: [\n            { name: 'eyebrow', type: 'string' },\n            { name: 'headline', type: 'string', required: true },\n            { name: 'subtext', type: 'string' },\n            { name: 'imageSrc', type: 'image' },\n            {\n              name: 'cta',\n              type: 'object',\n              fields: [\n                { name: 'text', type: 'string' },\n                { name: 'href', type: 'string' },\n                { name: 'variant', type: 'string' }\n              ]\n            }\n          ]\n        },\n        {\n          name: 'RichTextBlock',\n          type: 'data',\n          filePath: 'content/blocks/rich/{slug}.json',\n          fields: [\n            { name: 'title', type: 'string' },\n            { name: 'body', type: 'markdown' }\n          ]\n        },\n\n        // ========= Pages =========\n        {\n          name: 'Page',\n          type: 'page',\n          labelField: 'title',\n          fieldGroups: [{ name: 'design', label: 'Design' }],\n          urlPath: '/{slug}',\n          filePath: 'content/pages/{slug}.json',\n          fields: [\n            {\n              name: 'slug',\n              type: 'string',\n              required: true,\n              description: 'URL slug (\"index\" becomes \"/\")'\n            },\n            { name: 'title', type: 'string', required: true },\n            {\n              name: 'sections',\n              type: 'list',\n              items: {\n                fieldGroups: [{ name: 'design', label: 'Design' }],\n                type: 'object',\n                fields: [\n                  // For inline content\n                  { name: 'blockType', type: 'string', required: true },\n                  { name: 'headline', type: 'string' },\n                  { name: 'subtext', type: 'string' },\n                  { name: 'imageSrc', type: 'image' },\n                  {\n                    name: 'cta',\n                    type: 'object',\n                    fields: [\n                      { name: 'text', type: 'string' },\n                      { name: 'href', type: 'string' },\n                      { name: 'variant', type: 'string' }\n                    ]\n                  },\n                  // Or reference a reusable block by path\n                  {\n                    name: 'ref',\n                    type: 'string',\n                    description: 'Optional path to a block JSON file under content/blocks'\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      ]\n    })\n  ],\n  siteMap: ({ documents, models }) => {\n    const pageModelNames = new Set(models.filter((m) => m.type === 'page').map((m) => m.name));\n\n    const entries: SiteMapEntry[] = documents\n      .filter((d) => pageModelNames.has(d.modelName))\n      .map((d) => {\n        const doc: any = d as any; // allow access to optional fields without TS errors\n        const slug: string | undefined = doc.fields?.slug ?? doc.slug;\n        const computedUrl: string =\n          doc.urlPath ?? (slug ? (slug === 'index' ? '/' : `/${slug}`) : '/');\n\n        const entry: SiteMapEntry = {\n          stableId: d.id,\n          urlPath: computedUrl,\n          document: d,\n          isHomePage: computedUrl === '/'\n        };\n        return entry;\n      });\n\n    // Also include Astro pages from src/pages (non-dynamic, non-API)\n    try {\n      const root = path.join(__dirname, 'src', 'pages');\n      const urls: string[] = [];\n      const walk = (dir: string) => {\n        const list = fs.readdirSync(dir, { withFileTypes: true });\n        for (const ent of list) {\n          const full = path.join(dir, ent.name);\n          const rel = path.relative(root, full);\n          if (ent.isDirectory()) {\n            if (rel.startsWith('api')) continue; // skip API endpoints\n            walk(full);\n          } else if (\n            ent.isFile() &&\n            (ent.name.endsWith('.astro') || ent.name.endsWith('.md') || ent.name.endsWith('.mdx'))\n          ) {\n            if (rel.includes('[')) continue; // skip dynamic routes like [slug]\n            // Build URL path: strip extension and map index.astro appropriately\n            const noExt = rel.replace(/\\\\.(astro|md|mdx)$/, '');\n            let url = '/' + noExt.replace(/\\\\\\\\/g, '/');\n            url = url.replace(/\\\\/g, '/');\n            url = url.replace(/index$/i, '');\n            if (url.endsWith('/')) url = url.slice(0, -1);\n            if (url === '') url = '/';\n            urls.push(url);\n          }\n        }\n      };\n      if (fs.existsSync(root)) walk(root);\n      const astroEntries: SiteMapEntry[] = Array.from(new Set(urls)).map((url) => ({\n        stableId: `astro:${url}`,\n        urlPath: url,\n        isHomePage: url === '/',\n        document: {\n          srcType: 'astro',\n          srcProjectId: '',\n          modelName: 'astroPage',\n          id: `astro:${url}`\n        }\n      }));\n      // Merge and de-duplicate by urlPath (content docs take precedence)\n      const seen = new Set(entries.map((e) => e.urlPath));\n      for (const ae of astroEntries) {\n        if (!seen.has(ae.urlPath)) entries.push(ae);\n      }\n    } catch (e) {\n      // Ignore FS errors; Stackbit Cloud may limit FS access\n      console.warn('siteMap: failed to scan Astro pages:', e);\n    }\n\n    return entries;\n  },\n  \n});\n"],
  "mappings": "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",
  "names": ["path", "fs"]
}
