{
  "version": 3,
  "sources": ["../../stackbit.config.ts"],
  "sourcesContent": ["// stackbit.config.ts\nimport { defineStackbitConfig } from '@stackbit/types';\nimport type { SiteMapEntry } from '@stackbit/types';\nimport { SanityContentSource } from '@stackbit/cms-sanity';\nimport { GitContentSource } from '@stackbit/cms-git';\n\nconst enableSanity = process.env.ENABLE_SANITY === 'true';\n\nexport default defineStackbitConfig({\n  stackbitVersion: '~0.6.0',\n  ssgName: 'custom',\n  nodeVersion: '18',\n\n  // Let NVE boot your Astro dev server on the port it chooses\n  devCommand: 'yarn astro dev --port 3000 --host 127.0.0.1',\n\n  // Astro integration (NVE watches for these)\n  experimental: {\n    ssg: {\n      name: 'Astro',\n      logPatterns: { up: ['is ready', 'astro'] },\n      directRoutes: { 'socket.io': 'socket.io' },\n      passthrough: ['/vite-hmr/**']\n    }\n  },\n\n  // ...\n  contentSources: [\n    new GitContentSource({\n      rootPath: __dirname,\n      contentDirs: ['content'],\n      models: [\n        // ========= Reusable Blocks =========\n        {\n          name: 'HeroBlock',\n          type: 'data',\n          filePath: 'content/blocks/hero/{slug}.json',\n          fields: [\n            { name: 'eyebrow', type: 'string' },\n            { name: 'headline', type: 'string', required: true },\n            { name: 'subtext', type: 'string' },\n            { name: 'imageSrc', type: 'image' },\n            {\n              name: 'cta',\n              type: 'object',\n              fields: [\n                { name: 'text', type: 'string' },\n                { name: 'href', type: 'string' },\n                { name: 'variant', type: 'string' }\n              ]\n            }\n          ]\n        },\n        {\n          name: 'RichTextBlock',\n          type: 'data',\n          filePath: 'content/blocks/rich/{slug}.json',\n          fields: [\n            { name: 'title', type: 'string' },\n            { name: 'body', type: 'markdown' }\n          ]\n        },\n\n        // ========= Pages =========\n        {\n          name: 'Page',\n          type: 'page',\n          labelField: 'title',\n          fieldGroups: [{ name: 'design', label: 'Design' }],\n          urlPath: '/{slug}',\n          filePath: 'content/pages/{slug}.json',\n          fields: [\n            {\n              name: 'slug',\n              type: 'string',\n              required: true,\n              description: 'URL slug (\"index\" becomes \"/\")'\n            },\n            { name: 'title', type: 'string', required: true },\n            {\n              name: 'sections',\n              type: 'list',\n              items: {\n                fieldGroups: [{ name: 'design', label: 'Design' }],\n                type: 'object',\n                fields: [\n                  // For inline content\n                  { name: 'blockType', type: 'string', required: true },\n                  { name: 'headline', type: 'string' },\n                  { name: 'subtext', type: 'string' },\n                  { name: 'imageSrc', type: 'image' },\n                  {\n                    name: 'cta',\n                    type: 'object',\n                    fields: [\n                      { name: 'text', type: 'string' },\n                      { name: 'href', type: 'string' },\n                      { name: 'variant', type: 'string' }\n                    ]\n                  },\n                  // Or reference a reusable block by path\n                  {\n                    name: 'ref',\n                    type: 'string',\n                    description: 'Optional path to a block JSON file under content/blocks'\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      ]\n    }),\n    // Optionally enable Sanity (toggle via ENABLE_SANITY=true)\n    ...(enableSanity\n      ? [\n          new SanityContentSource({\n            // Minimal local manifest root so the resolver doesn't crawl your external Studio\n            rootPath: __dirname,\n            // Not used during schema fetch, but required by the type\n            studioUrl: process.env.SANITY_STUDIO_URL || 'http://localhost:3333',\n\n            // Fetch schema via API (avoids loading your Studio deps)\n            projectId: process.env.SANITY_PROJECT_ID as string,\n            dataset: (process.env.SANITY_DATASET || 'production') as string,\n            token: process.env.SANITY_ACCESS_TOKEN as string\n          })\n        ]\n      : [])\n  ],\n  siteMap: ({ documents, models }) => {\n    // 1. Filter all page models\n    const pageModels = models.filter((m) => m.type === 'page');\n\n    return (\n      documents\n        // 2. Filter all documents which are of a page model\n        .filter((d) => pageModels.some((m) => m.name === d.modelName))\n        // 3. Map each document to a SiteMapEntry\n        .map((document) => {\n          // Map the model name to its corresponding URL\n          const urlModel = (() => {\n            switch (document.modelName) {\n              case 'Page':\n                return 'otherPage';\n              case 'Blog':\n                return 'otherBlog';\n              default:\n                return null;\n            }\n          })();\n\n          return {\n            stableId: document.id,\n            urlPath: `/${urlModel}/${document.id}`,\n            document,\n            isHomePage: false\n          };\n        })\n        .filter(Boolean) as SiteMapEntry[]\n    );\n  },\n  ...(enableSanity\n    ? {\n        modelExtensions: [\n          { name: 'product', type: 'page', urlPath: '/shop/{slug}' },\n          { name: 'category', type: 'page', urlPath: '/shop?category={slug}' }\n        ]\n      }\n    : {})\n});\n"],
  "mappings": "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",
  "names": []
}
