---
export const prerender = false; // Enable SSR for this page

import BaseLayout from '../../layouts/BaseLayout.astro';
import ProductCard from '../../components/ProductCard.astro';

const requestUrl = new URL(Astro.url); // Use Astro.url for runtime evaluation
const pageParam = requestUrl.searchParams.get('page');
const page = pageParam && !isNaN(Number(pageParam)) && Number(pageParam) > 0 ? Number(pageParam) : 1;

const PAGE_SIZE = 9;
const start = (page - 1) * PAGE_SIZE;
const end = start + PAGE_SIZE;

const loadProducts = async () => {
  const query = `*[_type == "wooProduct"] | order(_createdAt desc)[${start}...${end}] {
    _id, title, price, horsepower, tune_required, slug { current }, images[]{ asset->{ url } }
  }`;

  const response = await fetch(`https://${import.meta.env.SANITY_PROJECT_ID}.api.sanity.io/v1/data/query/production?query=${encodeURIComponent(query)}`, {
    headers: {
      Authorization: `Bearer ${import.meta.env.SANITY_API_TOKEN}`
    }
  });

  const result = await response.json();
  return result.result || [];
};

const countQuery = `count(*[_type == "wooProduct"])`;
const countRes = await fetch(`https://${import.meta.env.SANITY_PROJECT_ID}.api.sanity.io/v1/data/query/production?query=${encodeURIComponent(countQuery)}`, {
  headers: { Authorization: `Bearer ${import.meta.env.SANITY_API_TOKEN}` },
});
const totalCount = (await countRes.json()).result;
const totalPages = Math.ceil(totalCount / 9);
const pagesToShow = Array.from({ length: totalPages }, (_, i) => i + 1);

const products = await loadProducts();
--- 

<BaseLayout>
  <section class="p-10 space-y-10 bg-transparent text-white max-w-7xl mx-auto">
    <h1 class="font-ethno text-3xl font-bold text-accent">Shop</h1>

    <!-- Filters -->
    <div class="bg-transparent p-6 rounded-[10px] shadow-md flex flex-col sm:flex-row gap-6">
      <div class="flex-1 min-w-[200px]">
        <label for="categoryFilter" class="font-borg block mb-2 font-semibold text-primary">Filter by Vehicle</label>
        <select id="categoryFilter" class="w-full bg-black text-white border border-gray-600 rounded px-4 py-2">
          <option value="">All Models</option>
          <option value="Charger">Charger</option>
          <option value="Challenger">Challenger</option>
          <option value="TRX">TRX</option>
          <option value="Trackhawk">Trackhawk</option>
          <option value="Demon">Demon</option>
          <option value="Redeye">Redeye</option>
          <option value="Durango">Durango</option>
          <option value="Mustang">Mustang</option>
          <option value="Raptor">Raptor</option>
          <option value="Shelby Truck">Shelby Truck</option>
          <option value="F150">F150</option>
          <option value="F250">F250</option>
          <option value="F350">F350</option>
          <option value="F450">F450</option>
        </select>
      </div>

      <div class="flex-1 min-w-[200px]">
        <label for="tuneFilter" class="font-borg block mb-2 font-semibold text-primary">Tune Required?</label>
        <select id="tuneFilter" class="w-full bg-black text-white border border-gray-600 rounded px-4 py-2">
          <option value="">All Builds</option>
          <option value="yes">Tune Required</option>
          <option value="no">No Tune Needed</option>
        </select>
      </div>
    </div>

    <!-- HP Range Filter -->
    <div class="bg-transparent p-6 rounded-[10px] shadow-md flex flex-col sm:flex-row">
      <label for="hpRange" class="font-borg mb-2 font-semibold text-primary">Filter by Horsepower (600â€“1500+hp)</label>
      <input
        id="hpRange"
        type="range"
        min="600"
        max="1500"
        step="50"
        value="1500"
        class="w-full sm:w-1/2 align-left h-2 rounded-lg appearance-none cursor-pointer accent-primary transition-all duration-300"
        style="background: linear-gradient(to right, #dc2626 100%, #4b5563 0%)"
      />
      <p class="mt-2 text-sm font-cyber-italic text-gray-300">Showing up to: <span id="hpValue" class="font-bold text-white text-2xl">1500hp+</span></p>
    </div>

    <!-- Product Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8">
      {products.map(product => (
        <div
          data-product
          data-model={product.name}
          data-tune={product.tune_required}
          data-hp={product.horsepower || 0}
        >
          <a href={`/shop/${product.slug?.current || ''}`}>
            <ProductCard product={product} />
          </a>
        </div>
      ))}
    </div>

    <!-- Fancy Pagination -->
    <div class="flex justify-center mt-12">
      <div class="backdrop-blur-md bg-white/10 text-white px-6 py-3 rounded-full flex items-center space-x-2 shadow-lg border border-white/10">
        {page > 1 && (
          <a href={`?page=${page - 1}`} class="px-3 py-1 hover:text-accent">Prev</a>
        )}

        {
          (() => {
            const maxVisible = 5;
            const half = Math.floor(maxVisible / 2);
            let start = Math.max(1, page - half);
            let end = Math.min(totalPages, start + maxVisible - 1);

            if (end - start < maxVisible - 1) {
              start = Math.max(1, end - maxVisible + 1);
            }

            const visiblePages: number[] = [];
            for (let i = start; i <= end; i++) {
              visiblePages.push(i)
            }

            return (
              <>
                {start > 1 && (
                  <>
                    <a href={`?page=1`} class="px-3 py-1 rounded-md hover:text-accent">1</a>
                    <span class="px-2 text-gray-400">...</span>
                  </>
                )}

                {visiblePages.map(i => (
                  <a
                    href={`?page=${i}`}
                    class={`px-3 py-1 rounded-md ${
                          i === Number(page) ? 'bg-accent text-black font-bold' : 'hover:text-accent'
                    }`}
                  >
                    {i}
                  </a>
                ))}

                {end < totalPages && (
                  <>
                    <span class="px-2 text-gray-400">...</span>
                    <a href={`?page=${totalPages}`} class="px-3 py-1 rounded-md hover:text-accent">{totalPages}</a>
                  </>
                )}
              </>
            );
          })()
        }

        {page < totalPages && (
          <a href={`?page=${page + 1}`} class="px-3 py-1 hover:text-accent">Next</a>
        )}
      </div>
    </div>
  </section>

  <style>
    input[type="range"]::-webkit-slider-thumb {
      -webkit-appearance: none;
      height: 24px;
      width: 24px;
      background: white;
      clip-path: polygon(0% 0%, 100% 50%, 0% 100%);
      border: none;
      margin-top: -2px;
      cursor: pointer;
    }

    input[type="range"]::-moz-range-thumb {
      height: 24px;
      width: 24px;
      background: white;
      clip-path: polygon(0% 0%, 100% 50%, 0% 100%);
      border: none;
      cursor: pointer;
      margin-top: -6px;
    }

    input[type="range"]::-ms-thumb {
      height: 24px;
      width: 24px;
      background: white;
      clip-path: polygon(0% 0%, 100% 50%, 0% 100%);
      border: none;
      cursor: pointer;
      margin-top: -6px;
    }

    /* Accent override */
    .bg-accent {
      background-color: #dc2626;
    }
  </style>

  <script is:inline>
    if (typeof window !== 'undefined') {
      const slider = document.getElementById('hpRange');
      const output = document.getElementById('hpValue');
      const categorySelect = document.getElementById('categoryFilter');
      const tuneSelect = document.getElementById('tuneFilter');

      function updateSliderBackground(sliderEl) {
        const val = ((sliderEl.value - sliderEl.min) / (sliderEl.max - sliderEl.min)) * 100;
        sliderEl.style.background = `linear-gradient(to right, #dc2626 ${val}%, #4b5563 ${val}%)`;
        output.textContent = sliderEl.value + 'hp+';
      }

      function filterProducts() {
        const selectedCategory = categorySelect.value.toLowerCase();
        const selectedTune = tuneSelect.value;
        const maxHp = parseInt(slider.value);

        document.querySelectorAll('[data-product]')?.forEach(card => {
          const model = card.dataset.model?.toLowerCase() || '';
          const tune = card.dataset.tune || '';
          const hp = parseInt(card.dataset.hp || '0');

          const show =
            (!selectedCategory || model.includes(selectedCategory)) &&
            (!selectedTune || tune === selectedTune) &&
            hp <= maxHp;

          card.style.display = show ? 'block' : 'none';
        });
      }

      document.addEventListener('DOMContentLoaded', () => {
        updateSliderBackground(slider);
        filterProducts();

        slider.addEventListener('input', () => {
          updateSliderBackground(slider);
          filterProducts();
        });

        categorySelect.addEventListener('change', filterProducts);
        tuneSelect.addEventListener('change', filterProducts);
      });
    }
  </script>
</BaseLayout>