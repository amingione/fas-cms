---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout>
 
  <style>
    @media (max-width: 639px) {
      [data-desktop-dash] { display: none !important; }
      [data-mobile-dash] { display: block !important; }
    }
    @media (min-width: 640px) {
      [data-mobile-dash] { display: none !important; }
    }

    /* --- Clickability guard: ensure dashboard UI is above any global overlays and accepts clicks --- */
    [data-mobile-dash],
    [data-desktop-dash] {
      position: relative;
      z-index: 50; /* higher than typical site headers/overlays */
    }
    /* Make sure interactive elements always receive pointer events even if an ancestor disables them */
    [data-dash-content],
    .js-view,
    #mobile-account-select,
    .logout-link,
    a,
    button,
    select {
      pointer-events: auto !important;
    }
  </style>
  <!-- MOBILE DASHBOARD (auto on <640px) -->
  <main data-mobile-dash class="block sm:hidden min-h-screen pt-20 pb-24 px-4 text-white">
    <header class="mb-6">
      <h1 class="text-lg font-ethno">My Account</h1>
      <p class="opacity-80 text-sm">Welcome, <span id="customer-name-mobile" class="text-primary"></span></p>
    </header>

    <!-- Simple dropdown menu -->
    <div class="mb-4">
      <label for="mobile-account-select" class="sr-only">Choose a section</label>
      <select id="mobile-account-select" class="w-full bg-white/5 border border-white/15 rounded-lg px-3 py-2 text-sm">
        <option value="dashboard" selected>Dashboard</option>
        <option value="orders">Orders</option>
        <option value="quotes">Quotes</option>
        <option value="invoices">Invoices</option>
        <option value="appointments">Appointments</option>
        <option value="details">Account details</option>
      </select>
    </div>

    <!-- Intro copy -->
    <section class="mb-6 space-y-1">
      <h1 class="text-3xl mr-20 pr-10 font-borg text-primary text-left mb-2">F.a.S.</h1>
      <h1 class="text-2xl font-ethno text-white pr-10 mr-20 text-left mb-6">Motorsports</h1>
      <h3 class="font-cyber-italic text-sm tracking-wide opacity-90">ACCOUNT DASHBOARD</h3>
      <p class="text-xs opacity-80">Welcome to your account dashboard. Use the menu to view your profile, orders, and more.</p>
    </section>

    <!-- Content area -->
    <section id="dash-content-mobile" data-dash-content class="mt-6 text-sm"></section>
  </main>

  <!-- DESKTOP DASHBOARD (auto on >=640px) -->
  <main data-desktop-dash class="hidden sm:flex min-h-screen pt-10 overflow-hidden text-white font-captain">
    <!-- Sidebar -->
    <aside class="bg-black/70 border-white/10 p-0 border-r mt-12 pt-10 mb-3 mx-3 w-64 space-y-6">
     <p class="uppercase">Welcome, <span id="customer-name" class="text-primary"></span></p>
      <nav class="mt-6 pt-5 space-y-3 text-base font-ethno">
        <a href="#" data-view="profile" class="js-view block hover:text-red-500">My Profile</a>
        <a href="#" data-view="orders" class="js-view block hover:text-red-500">Orders <span id="orders-count" class="ml-2 px-2 py-0.5 text-xs bg-red-600/80 rounded">0</span></a>
        <a href="#" data-view="quotes" class="js-view block hover:text-red-500">Quotes <span id="quotes-count" class="ml-2 px-2 py-0.5 text-xs bg-red-600/80 rounded">0</span></a>
        <a href="#" data-view="invoices" class="js-view block hover:text-red-500">Invoices <span id="invoices-count" class="ml-2 px-2 py-0.5 text-xs bg-red-600/80 rounded">0</span></a>
        <a href="#" data-view="appointments" class="js-view block hover:text-red-500">Appointments <span id="appts-count" class="ml-2 px-2 py-0.5 text-xs bg-red-600/80 rounded">0</span></a>
        <a href="/api/auth/logout" class="logout-link block pt-10 text-red-600 hover:underline mt-4">Logout</a>
      </nav>
    </aside>

    <!-- Main panel -->
    <section class="relative flex-auto content-start mt-10 p-20">
      <h1 class="text-3xl mr-20 pr-10 font-borg text-primary text-left mb-2">F.a.S.</h1>
      <h1 class="text-2xl font-ethno text-white pr-10 mr-20 text-left mb-6">Motorsports</h1>
      <h2 class="text-base pr-12 mr-10 font-cyber-italic text-left mb-6">ACCOUNT DASHBOARD</h2>
      <div id="dash-content-desktop" data-dash-content class="text-left text-base"></div>
    </section>
  </main>

  <script type="module">
    import { getAuth0Client } from '../../lib/auth';      // âœ… from pages/*

    // Track the current view so we can re-render on breakpoint changes
    let currentView = 'dashboard';

    function selectDashContainer() {
      const desktop = document.querySelector('[data-desktop-dash] [data-dash-content]');
      const mobile  = document.querySelector('[data-mobile-dash] [data-dash-content]');
      // Prefer container based on breakpoint, fall back to whichever exists
      if (window.matchMedia('(min-width: 640px)').matches) {
        return desktop || mobile;
      }
      return mobile || desktop;
    }

    // Choose the visible dash content container (desktop or mobile by breakpoint)
    function getVisibleDashContent() {
      const el = selectDashContainer();
      if (!el) throw new Error('Dashboard content container not found');
      return el;
    }

    // Elements that display the customer name (mobile + desktop). Re-query each time in case islands re-render.
    function getNameEls() {
      return [
        document.getElementById('customer-name'),
        document.getElementById('customer-name-mobile')
      ].filter(Boolean);
    }

    function setName(name) {
      const els = getNameEls();
      els.forEach(el => (el.textContent = name || 'Guest'));
    }

    function withTimeout(p, ms = 4000) {
      return Promise.race([
        p,
        new Promise((_, rej) => setTimeout(() => rej(new Error('timeout')), ms))
      ]);
    }

    (async () => {
      try {
        console.log("ðŸš€ dashboard script loaded");

        // Desktop-first: show login CTA immediately; overwrite if authenticated
        try {
          if (window.matchMedia('(min-width: 640px)').matches) {
            const c = getVisibleDashContent();
            if (c) {
              c.innerHTML = `
                <div class="space-y-3">
                  <p class="opacity-90">You're not signed in.</p>
                  <a id="dash-login" href="/api/auth/login" class="inline-block px-4 py-2 bg-primary text-black font-ethno rounded">Log in</a>
                  <a id="dash-signup" href="/api/auth/login" class="inline-block px-4 py-2 border border-white/30 font-ethno rounded">Sign up</a>
                </div>`;
              const go = (e) => { e?.preventDefault?.(); window.location.href = '/api/auth/login'; };
              document.getElementById('dash-login')?.addEventListener('click', go);
              document.getElementById('dash-signup')?.addEventListener('click', go);
            }
          }
        } catch {}

        const auth0 = await getAuth0Client();
        window._auth0 = auth0;                 // ðŸ”¥ expose for devtools
        window._getVisibleDashContent = getVisibleDashContent;
        window._setName = setName;
        console.log("âœ… auth0 client initialized and exposed to window");

        // Require login (with timeout & desktop-friendly fallback)
        let authed = false;
        try {
          authed = await withTimeout(auth0.isAuthenticated(), 4000);
        } catch { authed = false; }

        if (!authed) {
          const c = getVisibleDashContent();
          c.innerHTML = `
            <div class="space-y-3">
              <p class="opacity-90">You're not signed in.</p>
              <a id="dash-login" href="/api/auth/login" class="inline-block px-4 py-2 bg-primary text-black font-ethno rounded">Log in</a>
              <a id="dash-signup" href="/api/auth/login" class="inline-block px-4 py-2 border border-white/30 font-ethno rounded">Sign up</a>
            </div>`;
          const go = (e) => { e?.preventDefault?.(); window.location.href = '/api/auth/login'; };
          document.getElementById('dash-login')?.addEventListener('click', go);
          document.getElementById('dash-signup')?.addEventListener('click', go);
          return;
        }

        // ðŸ”½ rest of your code unchanged...

        const user = await auth0.getUser();
        const email = user?.email || '';
        if (email) { try { localStorage.setItem('customerEmail', email); } catch {} }

        const defaultName = user?.given_name || user?.name || email || 'Guest';
        try { localStorage.setItem('customerName', defaultName); } catch {}
        setName(defaultName);
        // Defensive: retry setting the name a few times in case an island re-mounts and replaces nodes
        let retry = 0;
        const retryId = setInterval(() => {
          setName(defaultName);
          if (++retry > 10) clearInterval(retryId); // ~10 tries over ~1s
        }, 100);

        // Load enriched profile
        try {
          const res = await fetch('/api/customer/get', {
            method: 'POST', headers: { 'content-type': 'application/json' },
            body: JSON.stringify({ email })
          });
          if (res.ok) {
            const data = await res.json();
            const fullName = [data?.firstName, data?.lastName].filter(Boolean).join(' ').trim();
            const preferred = fullName || data?.name || defaultName;
            setName(preferred);
            try { localStorage.setItem('customerName', preferred); } catch {}
            let r2 = 0;
            const r2id = setInterval(() => {
              setName(preferred);
              if (++r2 > 10) clearInterval(r2id);
            }, 100);
          }
        } catch {}

        // Badge updater
        function setCount(idDesktop, idMobile, n) {
          const d = document.getElementById(idDesktop);
          const m = document.getElementById(idMobile);
          if (d) d.textContent = String(n);
          if (m) m.textContent = String(n);
        }
        async function fetchCount(url) {
          try {
            const res = await fetch(url);
            if (!res.ok) return 0;
            const data = await res.json();
            if (Array.isArray(data)) return data.length;
            if (data && Array.isArray(data.items)) return data.items.length;
            return 0;
          } catch { return 0; }
        }

        if (email) {
          fetchCount(`/api/get-user-order?email=${encodeURIComponent(email)}`).then(n => setCount('orders-count','orders-count-mobile', n));
          fetchCount(`/api/get-user-quotes?email=${encodeURIComponent(email)}`).then(n => setCount('quotes-count','quotes-count-mobile', n));
          fetchCount(`/api/get-user-invoices?email=${encodeURIComponent(email)}`).then(n => setCount('invoices-count','invoices-count-mobile', n));
          fetchCount(`/api/get-user-appointments?email=${encodeURIComponent(email)}`).then(n => setCount('appts-count','appts-count-mobile', n));
        }

        // ---------- View rendering (shared) ----------
        const content = () => getVisibleDashContent();
        const sel = document.getElementById('mobile-account-select');
        if (sel) sel.addEventListener('change', () => load(sel.value));
        const isMobile = () => window.matchMedia('(max-width: 639px)').matches;
        const setLoading = (msg = 'Loading...') => {
          const c = content();
          if (!c) return;
          const marker = `__loading_${Date.now()}__`;
          c.dataset.state = marker;
          c.innerHTML = `<p class="opacity-80">${msg}</p>`;
          // If nothing overwrote this within 6s, show login CTA so desktop never gets stuck
          setTimeout(() => {
            if (!c || c.dataset.state !== marker) return;
            c.innerHTML = `
              <div class="space-y-3">
                <p class="opacity-90">You're not signed in or the request timed out.</p>
                <a id="dash-login" href="/api/auth/login" class="inline-block px-4 py-2 bg-primary text-black font-ethno rounded">Log in</a>
                <a id="dash-signup" href="/api/auth/login" class="inline-block px-4 py-2 border border-white/30 font-ethno rounded">Sign up</a>
              </div>`;
            const go = (e) => { e?.preventDefault?.(); window.location.href = '/api/auth/login'; };
            document.getElementById('dash-login')?.addEventListener('click', go);
            document.getElementById('dash-signup')?.addEventListener('click', go);
          }, 6000);
        };
        const renderEmpty = (label) => { content().innerHTML = `<p class="opacity-80">No ${label} found.</p>`; };

        // --- fetch helper with timeout ---
        async function fetchJSON(url, options = {}, ms = 5000) {
          return await Promise.race([
            fetch(url, options),
            new Promise((_, rej) => setTimeout(() => rej(new Error('timeout')), ms))
          ]).then(async (res) => {
            if (res && 'ok' in res && !res.ok) throw new Error('bad status');
            if (!res || !(res instanceof Response)) return {};
            try { return await res.json(); } catch { return {}; }
          });
        }

        async function renderDashboard() {
          setLoading();
          try {
            const c = await fetchJSON('/api/customer/get', {
              method: 'POST', headers: { 'content-type': 'application/json' },
              body: JSON.stringify({ email })
            }, 5000).catch(() => ({}));
            const name = [c.firstName, c.lastName].filter(Boolean).join(' ') || defaultName;
            content().innerHTML = `
              <h3 class="font-ethno text-base mb-3">Dashboard</h3>
              <div class="font-sans space-y-2 opacity-90 text-base">
                <p>Hello, <strong>${name}</strong>.</p>
                <p class="text-base">From your account dashboard you can view your <a href="#" data-view="orders" class="underline js-view">recent orders</a>, manage your <a href="/customerdashboard/customerProfile" class="underline">account details</a>, and more.</p>
              </div>`;
          } catch { renderEmpty('dashboard'); }
        }

        async function renderProfile() {
          setLoading();
          try {
            const c = await fetchJSON('/api/customer/get', {
              method: 'POST', headers: { 'content-type': 'application/json' },
              body: JSON.stringify({ email })
            }, 5000).catch(() => null);
            if (!c) return renderEmpty('profile');
            const addr = [c.address1, c.address2, c.city, c.state, c.postalCode].filter(Boolean).join(', ');
            content().innerHTML = `
              <h3 class="font-ethno text-lg mb-3">My Profile</h3>
              <div class="grid sm:grid-cols-2 gap-3 text-sm">
                <div><div class="opacity-70">First Name</div><div class="font-semibold">${c.firstName || ''}</div></div>
                <div><div class="opacity-70">Last Name</div><div class="font-semibold">${c.lastName || ''}</div></div>
                <div><div class="opacity-70">Email</div><div class="font-semibold">${c.email || email}</div></div>
                <div><div class="opacity-70">Phone</div><div class="font-semibold">${c.phone || ''}</div></div>
                <div class="sm:col-span-2"><div class="opacity-70">Address</div><div class="font-semibold">${addr}</div></div>
              </div>
              <p class="mt-5 text-xs opacity-70">Need changes? <a class="underline" href="/customerdashboard/customerProfile">Edit profile</a>.</p>
            `;
          } catch { renderEmpty('profile'); }
        }

        async function renderOrders() {
          setLoading();
          try {
            const claims = await auth0.getIdTokenClaims().catch(() => null);
            const token = claims?.__raw;
            const items = await fetchJSON(`/api/get-user-order?email=${encodeURIComponent(email)}`, {
              headers: token ? { authorization: `Bearer ${token}` } : {}
            }, 5000).catch(() => []);
            if (!Array.isArray(items) || !items.length) return renderEmpty('orders');
            content().innerHTML = `
              <h3 class="font-ethno text-lg mb-3">Orders</h3>
              <div class="space-y-3">${items.map(o => `
                <div class=\"border border-white/10 rounded p-4 bg-black/40\">
                  <div class=\"flex justify-between\"><div class=\"font-semibold\">#${o.orderNumber ?? o._id}</div><div class=\"opacity-70\">${o.status ?? ''}</div></div>
                  <div class=\"text-xs opacity-70 mt-1\">${o._createdAt ? new Date(o._createdAt).toLocaleDateString() : ''}</div>
                  ${o.total ? `<div class=\\\"mt-1 text-sm\\\">Total: $${o.total}</div>` : ''}
                  ${o.trackingNumber ? `<div class=\\\"mt-1 text-xs opacity-70\\\">Tracking: ${o.trackingNumber}</div>` : ''}
                </div>
              `).join('')}</div>`;
          } catch { renderEmpty('orders'); }
        }

        async function renderQuotes() {
          setLoading();
          try {
            const items = await fetchJSON(`/api/get-user-quotes?email=${encodeURIComponent(email)}`, {}, 5000).catch(() => []);
            if (!Array.isArray(items) || !items.length) return renderEmpty('quotes');
            content().innerHTML = `
              <h3 class="font-ethno text-lg mb-3">Quotes</h3>
              <div class="space-y-3">${items.map(q => `
                <div class=\"border border-white/10 rounded p-4 bg-black/40\">
                  <div class=\"flex justify-between\"><div class=\"font-semibold\">${q._id}</div><div class=\"opacity-70\">${q.status ?? ''}</div></div>
                  <div class=\"text-xs opacity-70 mt-1\">${q._createdAt ? new Date(q._createdAt).toLocaleDateString() : ''}</div>
                  ${q.total ? `<div class=\\\"mt-1 text-sm\\\">Total: $${q.total}</div>` : ''}
                </div>
              `).join('')}</div>`;
          } catch { renderEmpty('quotes'); }
        }

        async function renderInvoices() {
          setLoading();
          try {
            const items = await fetchJSON(`/api/get-user-invoices?email=${encodeURIComponent(email)}`, {}, 5000).catch(() => []);
            if (!Array.isArray(items) || !items.length) return renderEmpty('invoices');
            content().innerHTML = `
              <h3 class="font-ethno text-lg mb-3">Invoices</h3>
              <div class="space-y-3">${items.map(i => `
                <div class=\"border border-white/10 rounded p-4 bg-black/40\">
                  <div class=\"flex justify-between\"><div class=\"font-semibold\">${i._id}</div><div class=\"opacity-70\">${i.status ?? ''}</div></div>
                  <div class=\"text-xs opacity-70 mt-1\">${i._createdAt ? new Date(i._createdAt).toLocaleDateString() : ''}</div>
                  ${i.total ? `<div class=\\\"mt-1 text-sm\\\">Total: $${i.total}</div>` : ''}
                </div>
              `).join('')}</div>`;
          } catch { renderEmpty('invoices'); }
        }

        async function renderAppointments() {
          setLoading();
          try {
            const items = await fetchJSON(`/api/get-user-appointments?email=${encodeURIComponent(email)}`, {}, 5000).catch(() => []);
            if (!Array.isArray(items) || !items.length) return renderEmpty('appointments');
            content().innerHTML = `
              <h3 class="font-ethno text-lg mb-3">Appointments</h3>
              <div class="space-y-3">${items.map(a => `
                <div class=\"border border-white/10 rounded p-4 bg-black/40\">
                  <div class=\"flex justify-between\"><div class=\"font-semibold\">${a._id}</div><div class=\"opacity-70\">${a.status ?? ''}</div></div>
                  <div class=\"text-xs opacity-70 mt-1\">${a.scheduledAt ? new Date(a.scheduledAt).toLocaleString() : ''}</div>
                  ${a.location ? `<div class=\\\"mt-1 text-xs opacity-70\\\">${a.location}</div>` : ''}
                </div>
              `).join('')}</div>`;
          } catch { renderEmpty('appointments'); }
        }

        function load(view) {
          currentView = view || 'dashboard';
          switch (view) {
            case 'orders': return renderOrders();
            case 'quotes': return renderQuotes();
            case 'invoices': return renderInvoices();
            case 'appointments': return renderAppointments();
            case 'profile':
            case 'details': return renderProfile();
            case 'dashboard':
            default: return renderDashboard();
          }
        }

        // Attach menu handlers
        document.querySelectorAll('.js-view').forEach(a => {
          a.addEventListener('click', (e) => {
            e.preventDefault();
            const view = a.getAttribute('data-view');
            load(view);
          });
        });

        // Delegation fallback: catch clicks on any future .js-view links
        document.addEventListener('click', (e) => {
          const target = e.target instanceof Element ? e.target.closest('.js-view') : null;
          if (target) {
            e.preventDefault();
            const v = target.getAttribute('data-view');
            load(v);
          }
        });

        // Delegation for the mobile selector in case it re-renders
        document.addEventListener('change', (e) => {
          const sel = e.target instanceof HTMLSelectElement ? e.target : null;
          if (sel && sel.id === 'mobile-account-select') {
            load(sel.value);
          }
        });

        // Default view
        load('dashboard');
        // Hard watchdog: if still on "Loading..." after 8s, force login CTA
        setTimeout(() => {
          try {
            const c = getVisibleDashContent();
            const txt = (c?.textContent || '').trim().toLowerCase();
            if (txt === 'loading...' || txt === 'loading') {
              c.innerHTML = `
                <div class="space-y-3">
                  <p class="opacity-90">You're not signed in or the request timed out.</p>
                  <a id="dash-login" href="/api/auth/login" class="inline-block px-4 py-2 bg-primary text-black font-ethno rounded">Log in</a>
                  <a id="dash-signup" href="/api/auth/login" class="inline-block px-4 py-2 border border-white/30 font-ethno rounded">Sign up</a>
                </div>`;
              const go = (e) => { e?.preventDefault?.(); window.location.href = '/api/auth/login'; };
              document.getElementById('dash-login')?.addEventListener('click', go);
              document.getElementById('dash-signup')?.addEventListener('click', go);
            }
          } catch {}
        }, 8000);
        try {
          const mq = window.matchMedia('(min-width: 640px)');
          const reRender = () => {
            // re-run the current view into the now-active container
            load(currentView);
          };
          if (mq.addEventListener) mq.addEventListener('change', reRender);
          else if (mq.addListener) mq.addListener(reRender); // Safari fallback
        } catch {}
      } catch (err) {
        console.error('Dashboard auth init failed', err);
        // Graceful fallback: render login/signup CTA instead of hanging
        try {
          const c = (typeof getVisibleDashContent === 'function')
            ? getVisibleDashContent()
            : (document.getElementById('dash-content-desktop') || document.getElementById('dash-content-mobile'));
          if (c) {
            c.innerHTML = `
              <div class="space-y-3">
                <p class="opacity-90">You're not signed in.</p>
                <a id="dash-login" href="/api/auth/login" class="inline-block px-4 py-2 bg-primary text-black font-ethno rounded">Log in</a>
                <a id="dash-signup" href="/api/auth/login" class="inline-block px-4 py-2 border border-white/30 font-ethno rounded">Sign up</a>
              </div>`;
            const go = (e) => { e?.preventDefault?.(); window.location.href = '/api/auth/login'; };
            document.getElementById('dash-login')?.addEventListener('click', go);
            document.getElementById('dash-signup')?.addEventListener('click', go);
          }
        } catch {}
      }
    })();

    function logout() {
      try { localStorage.clear(); } catch {}
      window.location.href = '/api/auth/logout';
    }
    document.querySelectorAll('.logout-link').forEach(el => {
      el.addEventListener('click', e => {
        e.preventDefault();
        logout();
      });
    });
  </script>
</BaseLayout>