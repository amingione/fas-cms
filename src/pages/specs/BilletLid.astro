---
import BaseLayout from '@layouts/BaseLayout.astro';
import { loadPageDoc, inlineFieldAttrs, inlineObjectId } from '@lib/content';
import SectionRenderer from '@/components/SectionRenderer.astro';
import ProductSpecSheet from '@components/specs/ProductSpecSheet.astro';
import { serializeJsonLd } from '@lib/utils';

// Backed by content/pages/BilletLidSpecsSheet.json
const pageDoc: any = await loadPageDoc('BilletLidSpecsSheet');

const pageTitle: string = pageDoc?.title ?? 'Billet Supercharger Lid â€” Spec Sheet';
const pageDescription =
  'Detailed billet supercharger lid specifications covering machining, airflow improvements, and fitment for Gen III HEMI platforms.';

const specSheet = {
  title: pageTitle,
  description:
    'CNC-machined billet lid engineered for strength, improved airflow, and thermal stability under sustained boost.',
  imageSrc: '/images/billetParts/HC-Billet-SC-Lid.png',
  imageAlt: 'FAS Motorsports Billet Supercharger Lid',
  specs: [
    { label: 'Material', value: '6061-T6 billet aluminum, heat treated' },
    { label: 'Machining', value: '5-axis CNC, one-setup critical faces for alignment' },
    { label: 'Inlet Geometry', value: 'High-flow, blended transitions to reduce turbulence' },
    { label: 'Sealing', value: 'OE-spec sealing surfaces; gasket compatibility maintained' },
    { label: 'Finish', value: 'Anodized for corrosion resistance and heat management' },
    { label: 'Compatibility', value: 'Gen III HEMI supercharged platforms; verify fitment per application' }
  ],
  about: [
    'The billet lid increases rigidity to help maintain rotor pack alignment during high belt loads, reducing distortion and improving long-term reliability.',
    'Flow-optimized internal geometry supports consistent inlet conditions for more repeatable boost and response.',
    'Direct-fit design targets OE interfaces for a clean install while supporting high-performance builds.'
  ],
  ctaHref: '/shop?filters=billet%20lid',
  ctaLabel: 'View Billet Supercharger Lid'
};

const requestUrl = new URL(Astro.request.url);
const canonical = `${requestUrl.origin}${requestUrl.pathname}`;
const ensureAbsolute = (path?: string | null) => {
  if (!path) return undefined;
  if (/^https?:/i.test(path)) return path;
  try {
    return new URL(path, requestUrl.origin).toString();
  } catch {
    return undefined;
  }
};

const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'Product',
  name: specSheet.title,
  description: specSheet.description,
  url: canonical,
  image: ensureAbsolute(specSheet.imageSrc),
  brand: { '@type': 'Brand', name: 'F.A.S. Motorsports' },
  category: 'Supercharger Components',
  additionalProperty: specSheet.specs.map((spec) => ({
    '@type': 'PropertyValue',
    name: spec.label,
    value: spec.value
  }))
};
---
<BaseLayout title={pageTitle} description={pageDescription} canonical={canonical} ogImage={ensureAbsolute(specSheet.imageSrc)}>
  <Fragment slot="head">
    <meta property="og:type" content="product" />
    <script
      type="application/ld+json"
      set:html={serializeJsonLd(structuredData)}
    />
  </Fragment>
  <div {...inlineObjectId('content/pages/BilletLidSpecsSheet.json')}>
    <div aria-hidden="true" class="hidden" {...inlineFieldAttrs('title')}>
      {pageTitle}
    </div>

    {Array.isArray(pageDoc?.sections) && pageDoc.sections.length > 0 && (
      <SectionRenderer sections={pageDoc.sections} baseFieldPath="sections" />
    )}

    <section class="mt-5 pt-5">
      <ProductSpecSheet
        title={specSheet.title}
        description={specSheet.description}
        imageSrc={specSheet.imageSrc}
        imageAlt={specSheet.imageAlt}
        specs={specSheet.specs}
        about={specSheet.about}
        ctaHref={specSheet.ctaHref}
        ctaLabel={specSheet.ctaLabel}
      />
    </section>
  </div>
</BaseLayout>
