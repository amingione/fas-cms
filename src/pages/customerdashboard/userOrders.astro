---
import cfetch from '../../utils/cfetch';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { AuthProvider } from '../../components/AuthProvider.jsx';
import RequireLogin from '../../components/RequireLogin.jsx';
---
<AuthProvider client:load>
  <RequireLogin client:load>
    <BaseLayout hideBrandTag>
      <section class="orders-section mx-auto mt-20 pt-20 text-white p-6">
        <h1 class="text-3xl font-borg mb-4">Your Orders</h1>
        <div id="orders-root" class="space-y-4">
          <p>Loading...</p>
        </div>
      </section>

      <script type="module">
        import { getAuth0Client } from '@/lib/auth';

        const root = document.getElementById('orders-root');
        // Ensure plain ASCII while loading to avoid encoding glitches
        root.textContent = 'Loading...';
        
        const renderError = (msg) => {
          root.innerHTML = `<p>${msg}</p>`;
        };
        const renderEmpty = () => {
          root.innerHTML = `<p>No orders found.</p>`;
        };
        const renderList = (orders) => {
          root.innerHTML = '<ul class="space-y-4"></ul>';
          const ul = root.querySelector('ul');
          for (const order of orders) {
            const li = document.createElement('li');
            li.className = 'border border-gray-600 p-4 rounded-lg bg-black/40';
            const created = order.orderDate || order._createdAt;
            li.innerHTML = `
              <div><strong>Order #:</strong> ${order.orderNumber ?? order._id}</div>
              <div><strong>Date:</strong> ${created ? new Date(created).toLocaleDateString() : ''}</div>
              <div><strong>Status:</strong> ${order.status ?? ''}</div>
              <div><strong>Tracking:</strong> ${order.trackingNumber ?? ''}</div>
              <div><strong>Total:</strong> $${order.total ?? ''}</div>
            `;
            ul.appendChild(li);
          }
        };

        (async () => {
          try {
            const auth0 = await getAuth0Client();
            // If we just came back from Auth0, finalize the login and clean the URL
            if (window.location.search.includes('code=')) {
              try {
                await auth0.handleRedirectCallback();
                window.history.replaceState({}, document.title, window.location.pathname);
              } catch (e) {
                console.error('Auth0 redirect handling failed', e);
              }
            }
            const isAuthed = await auth0.isAuthenticated();
            if (!isAuthed) {
              // Let RequireLogin gate the page; just show a hint
              renderError('Please log in to view your orders.');
              return;
            }

            const user = await auth0.getUser();
            const email = user?.email || '';
            if (!email) return renderError('No email found for user.');

            // Try secured call first using ID token as Bearer
            let orders = [];
            let usedFallback = false;
            try {
              const claims = await auth0.getIdTokenClaims();
              const token = claims?.__raw;
              const res = await fetch('/api/get-user-order', {
                headers: token ? { authorization: `Bearer ${token}` } : {},
              });
              if (res.ok) {
                const data = await res.json();
                orders = Array.isArray(data) ? data : (Array.isArray(data?.items) ? data.items : []);
              } else if (res.status === 401 || res.status === 400) {
                usedFallback = true;
              } else {
                throw new Error(await res.text());
              }
            } catch (e) {
              usedFallback = true;
            }

            if (usedFallback) {
              const res2 = await fetch(`/api/get-user-order?email=${encodeURIComponent(email)}`);
              if (!res2.ok) throw new Error(await res2.text());
              const data2 = await res2.json();
              orders = Array.isArray(data2) ? data2 : (Array.isArray(data2?.items) ? data2.items : []);
            }

            if (!orders || orders.length === 0) return renderEmpty();
            renderList(orders);
          } catch (err) {
            console.error('Failed to load orders:', err);
            renderError('Unable to load your orders.');
          }
        })();
      </script>
    </BaseLayout>
  </RequireLogin>
</AuthProvider>
