---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { AuthProvider } from '../../components/AuthProvider.jsx';
import RequireLogin from '../../components/RequireLogin.jsx';
---
<AuthProvider client:load>
  <RequireLogin client:load>
    <BaseLayout hideBrandTag>
      <section class="orders-section mx-auto mt-20 pt-20 text-white p-6">
        <h1 class="text-3xl font-borg mb-4">Your Orders</h1>
        <div id="orders-root" class="space-y-4">
          <p>Loading...</p>
        </div>
        <!-- Order Support Form (Netlify Forms) -->
        <div class="mt-10">
          <h2 class="text-2xl font-ethno mb-3">Order Support</h2>
          <form
            id="order-support-form"
            name="order-support"
            method="POST"
            action="/orders/support/success"
            data-success="/orders/support/success"
            class="space-y-4 rounded-lg border border-white/20 bg-black/50 p-6 shadow-md"
          >
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm mb-1" for="orderId">Order ID</label>
                <input id="orderId" name="orderId" type="text" class="w-full rounded bg-white/5 border border-white/15 p-2" />
              </div>
              <div>
                <label class="block text-sm mb-1" for="email_order">Email</label>
                <input id="email_order" name="email" type="email" required class="w-full rounded bg-white/5 border border-white/15 p-2" />
              </div>
              <div class="md:col-span-2">
                <label class="block text-sm mb-1" for="subject">Subject</label>
                <select id="subject" name="subject" class="w-full rounded bg-white/5 border border-white/15 p-2">
                  <option value="question">Question about my order</option>
                  <option value="update">Update shipping/address</option>
                  <option value="cancel">Cancel order</option>
                  <option value="return">Return or exchange</option>
                </select>
              </div>
              <div class="md:col-span-2">
                <label class="block text-sm mb-1" for="message">Message</label>
                <textarea id="message" name="message" rows="4" class="w-full rounded bg-white/5 border border-white/15 p-2"></textarea>
              </div>
            </div>
            <button type="submit" class="rounded bg-primary px-4 py-2 text-white hover:bg-primary/90 hover:text-white">Send</button>
            <p id="order-support-status" class="hidden text-sm mt-3"></p>
          </form>
        </div>
      </section>

      <script type="module">import '../../scripts/user-orders-page.ts';</script>
      <script is:inline>
        const orderForm = document.getElementById('order-support-form');
        const orderStatus = document.getElementById('order-support-status');
        const setOrderStatus = (message, type = 'info') => {
          if (!orderStatus) return;
          orderStatus.textContent = message;
          orderStatus.classList.remove('hidden', 'text-red-300', 'text-green-300', 'text-white/80');
          const cls = type === 'error' ? 'text-red-300' : type === 'success' ? 'text-green-300' : 'text-white/80';
          orderStatus.classList.add(cls);
        };
        orderForm?.addEventListener('submit', async (event) => {
          event.preventDefault();
          if (!orderForm) return;
          setOrderStatus('Sending...', 'info');
          const submitBtn = orderForm.querySelector('button[type="submit"]');
          if (submitBtn) submitBtn.setAttribute('disabled', 'true');
          try {
            const formData = new FormData(orderForm);
            const fields: Record<string, string> = {};
            formData.forEach((value, key) => {
              if (typeof value === 'string') fields[key] = value;
            });
            const response = await fetch('/api/form-submission', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ formName: 'Order Support Request', fields })
            });
            if (!response.ok) throw new Error('Request failed');
            const data = await response.json().catch(() => ({}));
            if (data?.ok === false) throw new Error(data?.message || 'Error');
            const redirect = orderForm.getAttribute('data-success') || '/orders/support/success';
            window.location.href = redirect;
          } catch (err) {
            console.error(err);
            setOrderStatus('We could not submit your request. Please try again later.', 'error');
            if (submitBtn) submitBtn.removeAttribute('disabled');
          }
        });
      </script>
    </BaseLayout>
  </RequireLogin>
</AuthProvider>
