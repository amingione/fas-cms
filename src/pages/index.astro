---
import BaseLayout from '../layouts/BaseLayout.astro';
import { loadPageDoc, inlineFieldAttrs, inlineObjectId } from '@lib/content';
import * as sanity from '../lib/sanity-utils';
import { LuxuryFeatures } from '@components/LuxuryFeatures.tsx';
import AnimatedHomeHero from '@components/animated/AnimatedHomeHero';
import AnimatedHeadingBanner1 from '@components/animated/AnimatedHeadingBanner1';
import Highlights from '@/components/Highlights.astro';
import AnimatedHeadingBanner from '@components/animated/AnimatedHeadingBanner';
import AnimatedProductFeatureBanner from '@components/animated/AnimatedProductFeatureBanner';
import AnimatedTaskCard from '@components/animated/AnimatedTaskCard';
import AnimatedTruckPackagesHero from '@components/animated/AnimatedTruckPackagesHero';
import SectionRenderer from '@/components/SectionRenderer.astro';


const url = new URL(Astro.request.url);
const pageDoc: any = await loadPageDoc('index');
const v2Param = url.searchParams.get('v2');
// Default to the new V2 homepage; allow opt-out via ?v2=0
const showV2 = v2Param === '0' ? false : true;

const resolveSanityConfig = () => {
  try {
    return (
      (sanity as any).config ||
      (sanity as any).clientConfig ||
      (sanity as any).defaultClientConfig ||
      {}
    );
  } catch {
    return {};
  }
};

let featuredProducts: any[] = [];
try {
  const _client: any =
    (sanity as any).sanityClient ??
    (sanity as any).client ??
    ((sanity as any).getClient ? (sanity as any).getClient() : null);

  const fetchFeaturedProducts = async () => {
    if (!_client || typeof _client.fetch !== 'function') {
      return [];
    }

    const configSnapshot = resolveSanityConfig();

    const baseProjection = `{
      _id,
      name,
      title,
      "slug": slug.current,
      price,
      "imageUrl": coalesce(
        image.asset->url,
        mainImage.asset->url,
        images[0].asset->url,
        thumbnail.asset->url,
        thumb.asset->url
      )
    }`;

    let booleanTry: any[] = [];
    try {
      booleanTry = await _client.fetch(
        `*[_type == "product" && !(_id in path("drafts.**")) && coalesce(featured, false) == true && defined(slug.current)][0..7]${baseProjection}`
      );
    } catch {}
    if (Array.isArray(booleanTry) && booleanTry.length) {
      return booleanTry;
    }

    let stringTry: any[] = [];
    try {
      stringTry = await _client.fetch(
        `*[_type == "product" && !(_id in path("drafts.**")) && featured == "true" && defined(slug.current)][0..7]${baseProjection}`
      );
    } catch {}

    return Array.isArray(stringTry) ? stringTry : [];
  };

  const configSnapshot = resolveSanityConfig();
  featuredProducts = await sanity.cachedSanityFetch(
    [
      'homepage-featured-products',
      configSnapshot.projectId ?? null,
      configSnapshot.dataset ?? null,
      configSnapshot.perspective ?? null
    ],
    fetchFeaturedProducts,
    { ttlSeconds: 180 }
  );
} catch (err) {
  console.error('Featured products fetch failed', err);
}

const featuredProductsNormalized = Array.isArray(featuredProducts)
  ? featuredProducts.map((product) => {
      if (!product || typeof product !== 'object') return product;
      const rawImageUrl = (product as any).imageUrl;
      const normalizedImageUrl =
        typeof rawImageUrl === 'string'
          ? sanity.normalizeSanityImageUrl(rawImageUrl) ?? rawImageUrl
          : rawImageUrl;
      return { ...product, imageUrl: normalizedImageUrl };
    })
  : [];

const homepageTitle = 'Performance Parts, Wheels & Packages';
const homepageDescription =
  'F.A.S. Motorsports â€” premium performance upgrades, billet parts, custom fabrication, and wheel packages for Hellcat, Trackhawk, TRX and more.';

const ensureAbsoluteUrl = (value?: string | null) => {
  if (!value) return undefined;
  if (/^https?:/i.test(value)) return value;
  try {
    return new URL(value, `${url.origin}/`).toString();
  } catch {
    return undefined;
  }
};

const canonicalHomeUrl = `${url.origin}/`;
const featuredItemListElements = Array.isArray(featuredProductsNormalized)
  ? featuredProductsNormalized
      .map((product, index) => {
        if (!product || typeof product !== 'object') return null;
        const slugValue =
          typeof (product as any).slug === 'string'
            ? (product as any).slug
            : typeof (product as any).slug?.current === 'string'
              ? (product as any).slug.current
              : '';
        if (!slugValue) return null;
        const productUrl = `${url.origin}/shop/${slugValue}`;
        const imageUrl = ensureAbsoluteUrl((product as any).imageUrl ?? undefined);
        const priceNumber = Number((product as any).price);
        const offers = !Number.isNaN(priceNumber) && priceNumber > 0
          ? {
              '@type': 'Offer',
              priceCurrency: 'USD',
              price: priceNumber.toFixed(2),
              availability: 'https://schema.org/InStock',
              url: productUrl,
              itemCondition: 'https://schema.org/NewCondition'
            }
          : undefined;
        return {
          '@type': 'ListItem',
          position: index + 1,
          url: productUrl,
          item: {
            '@type': 'Product',
            name: (product as any).title ?? (product as any).name ?? undefined,
            image: imageUrl ? [imageUrl] : undefined,
            offers
          }
        };
      })
      .filter((item): item is Record<string, any> => Boolean(item))
  : [];

const featuredProductsStructuredData = featuredItemListElements.length
  ? {
      '@type': 'ItemList',
      '@id': `${canonicalHomeUrl}#featured-products`,
      name: 'Featured products',
      itemListElement: featuredItemListElements
    }
  : null;

const homeStructuredDataGraph: Record<string, any>[] = [
  {
    '@type': 'Organization',
    '@id': `${canonicalHomeUrl}#organization`,
    name: 'F.A.S. Motorsports',
    url: canonicalHomeUrl,
    logo: ensureAbsoluteUrl('/logo/faslogochroma.webp'),
    sameAs: [
      'https://www.facebook.com/fasmotorsports/',
      'https://www.instagram.com/fasmotorsports/'
    ]
  },
  {
    '@type': 'WebSite',
    '@id': `${canonicalHomeUrl}#website`,
    name: 'F.A.S. Motorsports',
    url: canonicalHomeUrl,
    publisher: { '@id': `${canonicalHomeUrl}#organization` },
    potentialAction: {
      '@type': 'SearchAction',
      target: `${canonicalHomeUrl}search?query={search_term_string}`,
      'query-input': 'required name=search_term_string'
    }
  },
  {
    '@type': 'WebPage',
    '@id': `${canonicalHomeUrl}#webpage`,
    url: canonicalHomeUrl,
    name: homepageTitle,
    description: homepageDescription,
    isPartOf: { '@id': `${canonicalHomeUrl}#website` },
    about: { '@id': `${canonicalHomeUrl}#organization` }
  }
];

if (featuredProductsStructuredData) {
  homeStructuredDataGraph.push(featuredProductsStructuredData);
}

const homeStructuredData = {
  '@context': 'https://schema.org',
  '@graph': homeStructuredDataGraph
};
---


<BaseLayout
  title={homepageTitle}
  description={homepageDescription}
  canonical={`${new URL(Astro.request.url).origin}/`}
  ogImage="https://fasmotorsports.com/images/social/social-share.webp"
>
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify(homeStructuredData)} />
  </Fragment>

    <div aria-hidden="true" class="hidden" {...inlineFieldAttrs('title')}>
      {pageDoc?.title ?? 'Home'}
    </div>

    <main class="relative flex flex-col">

    <div {...inlineObjectId('content/pages/index.json')}>
        <SectionRenderer sections={pageDoc.sections} baseFieldPath="sections" />


      <section id="homeHero">
        <AnimatedHomeHero client:only="react" />
      </section>

      <section id="HeadingBanner1">
        <AnimatedHeadingBanner1 client:visible />
      </section>

      <section class="hidden" id="HeadingBanner">
        <AnimatedHeadingBanner client:visible />
      </section>

      <section id="TruckPackagesHero">
        <AnimatedTruckPackagesHero client:visible />
      </section>

      <section id="Highlights">
        <Highlights items={featuredProductsNormalized} />
      </section>

      <section class="mt-20" id="TaskCard">
        <AnimatedTaskCard client:visible />
      </section>

      <section class="mt-20 mb-10">
        <AnimatedProductFeatureBanner
          client:visible
          backgroundUrl="/images/backgrounds/bg-path-overlay.webp"
          features={[
            {
              side: 'left',
              image: {
                src: '/images/billetParts/predator-pulley-fas.webp',
                alt: 'Predator pulley product photo',
                width: 1719,
                height: 1719,
                loading: 'lazy',
                decoding: 'async',
                sizes: '(min-width: 1024px) 320px, 80vw'
              },
              lines: ['NO TUNE', 'PREDATOR', 'PULLEY'],
              pricePrefix: 'FROM',
              price: '$899.99',
              cta: { label: 'SHOP NOW', href: '/shop/predator-pulley' }
            },
            {
              side: 'right',
              image: {
                src: '/images/snouts/FAS-Billet-Snout.webp',
                alt: 'Hellcat snout porting product photo',
                width: 1000,
                height: 1000,
                loading: 'lazy',
                decoding: 'async',
                sizes: '(min-width: 1024px) 320px, 80vw',
                srcSet:
                  '/images/snouts/FAS-Billet-Snout-480.webp 480w, ' +
                  '/images/snouts/FAS-Billet-Snout-700.webp 700w, ' +
                  '/images/snouts/FAS-Billet-Snout.webp 1000w'
              },
              lines: ['HELLCAT', 'SNOUT', 'PORTING'],
              pricePrefix: 'FROM',
              price: '$699.00',
              cta: { label: 'SHOP NOW', href: '/shop/hellcat-snout-porting' }
            },
          ]}
        />
      </section>



      <section id="LuxuryFeatures" class="mt-20">
        <LuxuryFeatures client:visible />
      </section>
    </main>
  </div>
</BaseLayout>
