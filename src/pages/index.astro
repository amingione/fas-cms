---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getGitPageDoc, sbFieldPath, sbObjectId } from '@lib/stackbit';
import * as sanity from '../lib/sanity-utils';
import { Hero } from '@components/Hero.tsx';
import { Services } from '@components/Services.tsx';
import { Products } from '@components/Products.tsx';
import { About } from '@components/About.tsx';
import { TruckPackagesHero } from '@components/TruckPackagesHero.tsx';
import { LuxuryFeatures } from '@components/LuxuryFeatures.tsx';
import { CustomFabrication } from '@components/CustomFabrication.tsx';
import { LuxuryTestimonials } from '@components/LuxuryTestimonials.tsx';
import { WheelsHero } from '@/components/WheelsHero.tsx';
import HeroBanner from '@/components/HeroBanner.astro';
import SectionRenderer from '@/components/SectionRenderer.astro';
import Highlights from '@/components/Highlights.astro';
import CTASection from '@/components/framer/cta-section.jsx';

const url = new URL(Astro.request.url);
const pageDoc: any = await getGitPageDoc('index');
const v2Param = url.searchParams.get('v2');
// Default to the new V2 homepage; allow opt-out via ?v2=0
const showV2 = v2Param === '0' ? false : true;

let featuredProducts: any[] = [];
try {
  // Try to resolve a configured Sanity client from your utils module
  const _client: any = (sanity as any).sanityClient
    ?? (sanity as any).client
    ?? ((sanity as any).getClient ? (sanity as any).getClient() : null);

  if (_client && typeof _client.fetch === 'function') {
    // 1) Prefer PUBLISHED docs where featured is a boolean true
    let booleanTry: any[] = [];
    try {
      booleanTry = await _client.fetch(
        `*[_type == "product" && !(_id in path("drafts.**")) && coalesce(featured, false) == true && defined(slug.current)][0..7]{
          _id,
          name,
          title,
          "slug": slug.current,
          price,
          "imageUrl": coalesce(
            image.asset->url,
            mainImage.asset->url,
            images[0].asset->url,
            thumbnail.asset->url,
            thumb.asset->url
          )
        }`
      );
    } catch {}
    console.log('[Featured] boolean=true count:', Array.isArray(booleanTry) ? booleanTry.length : 0);
    try {
      const cfg = (sanity as any).config || (sanity as any).clientConfig || (sanity as any).defaultClientConfig || {};
      console.log('[Sanity] projectId:', cfg.projectId, 'dataset:', cfg.dataset);
    } catch {}

    featuredProducts = Array.isArray(booleanTry) ? booleanTry : [];

    // 2) Fallback: some datasets store featured as a string "true"
    if (!featuredProducts.length) {
      let stringTry: any[] = [];
      try {
        stringTry = await _client.fetch(
          `*[_type == "product" && !(_id in path("drafts.**")) && featured == "true" && defined(slug.current)][0..7]{
            _id,
            name,
            title,
            "slug": slug.current,
            price,
            "imageUrl": coalesce(
              image.asset->url,
              mainImage.asset->url,
              images[0].asset->url,
              thumbnail.asset->url,
              thumb.asset->url
            )
          }`
        );
      } catch {}
      console.log('[Featured] string "true" count:', Array.isArray(stringTry) ? stringTry.length : 0);
      try {
        const cfg = (sanity as any).config || (sanity as any).clientConfig || (sanity as any).defaultClientConfig || {};
        console.log('[Sanity] projectId:', cfg.projectId, 'dataset:', cfg.dataset);
      } catch {}
      featuredProducts = Array.isArray(stringTry) ? stringTry : [];
    }
  }
} catch (err) {
  console.error('Featured products fetch failed', err);
}
---


<BaseLayout
  title="Performance Parts, Wheels & Packages"
  description="F.A.S. Motorsports â€” premium performance upgrades, billet parts, custom fabrication, and wheel packages for Hellcat, Trackhawk, TRX and more."
  canonical={`${new URL(Astro.request.url).origin}/`}
  ogImage="/logo/faslogochroma.png"
>
  <div {...sbObjectId('content/pages/index.json')}>
  {/* Static hero banner placed first, no longer Stackbit-managed */}
  <HeroBanner
    headline="Power Up Your Ride"
    subtext="Premium performance upgrades tailored to your build."
    ctaText="Explore Now"
    ctaLink="/shop"
  />
  <div aria-hidden="true" class="hidden" {...sbFieldPath('title')}>{pageDoc?.title ?? 'Home'}</div>

  <main class="relative flex flex-col">
    {/* Dynamic sections follow so the Editor can add/reorder blocks */}
    {Array.isArray(pageDoc?.sections) && pageDoc.sections.length > 0 && (
      <SectionRenderer sections={pageDoc.sections} baseFieldPath="sections" />
    )}

    {/* Keep existing curated sections below; we can convert later */}
    <section id="TruckPackagesHero" >
      <TruckPackagesHero client:only="react" />
    </section>

    <section id="Highlights">
      <Highlights items={featuredProducts} />
    </section>

    <section id="cta" class="mt-20">
      <CTASection client:only="react" />
    </section>

    <section id="Products" class="mt-20">
      <Products client:only="react" />
    </section>

    <section id="CustomFabrication" >
      <CustomFabrication client:only="react" />
    </section>

    <section id="services" class="mt-20">
      <Services client:only="react" />
    </section>

    <section id="LuxuryFeatures" class="mt-20">
      <LuxuryFeatures client:only="react" />
    </section>

    <section id="About" class="mt-20">
      <About client:only="react" />
    </section>


  </main>
  </div>
</BaseLayout>
