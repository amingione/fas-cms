---
import BaseLayout from '../../layouts/BaseLayout.astro';
const title = 'Reset Password';
const token = Astro.url.searchParams.get('token') ?? '';
const email = Astro.url.searchParams.get('email') ?? '';
const invalid = !token || !email;
---

<BaseLayout hideBrandTag title={title}>
  <main class="min-h-screen flex items-center justify-center px-4 text-white" style="background-image: url('/images/backgrounds/bg-asphalt-overlay.webp')">
    <div class="bg-black/80 border border-white rounded-lg max-w-md w-full p-6">
      <h1 class="text-3xl font-ethno text-primary mb-3 text-center">Set a new password</h1>
      {invalid ? (
        <p class="text-center text-sm text-red-400">
          This password reset link is invalid. Request a new link from the&nbsp;<a class="text-yellow-300 hover:underline" href="/account/forgot-password">forgot password</a> page.
        </p>
      ) : (
        <>
          <p class="text-sm text-gray-300 mb-6 text-center">Create a new password for <strong>{email}</strong>.</p>
          <form id="accountResetForm" class="space-y-4">
            <input type="hidden" id="accountResetToken" value={token} />
            <input type="hidden" id="accountResetEmail" value={email} />
            <div>
              <label class="block text-sm font-semibold mb-2" for="accountResetPassword">New password</label>
              <input
                id="accountResetPassword"
                name="password"
                type="password"
                minlength="8"
                required
                class="w-full bg-gray-900 border border-white/20 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary"
              />
            </div>
            <div>
              <label class="block text-sm font-semibold mb-2" for="accountResetConfirm">Confirm password</label>
              <input
                id="accountResetConfirm"
                name="confirm"
                type="password"
                minlength="8"
                required
                class="w-full bg-gray-900 border border-white/20 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary"
              />
            </div>
            <button
              type="submit"
              class="w-full bg-primary text-white font-ethno rounded px-3 py-2 hover:bg-primary/80 hover:text-white transition"
            >
              Update password
            </button>
            <p id="accountResetStatus" class="text-sm text-center hidden"></p>
          </form>
          <p class="text-center text-sm text-gray-300 mt-6">
            <a href="/account" class="text-yellow-300 hover:underline">Back to login</a>
          </p>
        </>
      )}
    </div>
  </main>

  {!invalid && (
    <script>
      const form = document.querySelector('#accountResetForm');
      const statusEl = document.querySelector('#accountResetStatus');

      form?.addEventListener('submit', async (event) => {
        event.preventDefault();
        if (!statusEl) return;

        statusEl.classList.add('hidden');
        statusEl.classList.remove('text-green-400', 'text-red-500');

        const passwordInput = document.querySelector('#accountResetPassword') as HTMLInputElement | null;
        const confirmInput = document.querySelector('#accountResetConfirm') as HTMLInputElement | null;
        const tokenInput = document.querySelector('#accountResetToken') as HTMLInputElement | null;
        const emailInput = document.querySelector('#accountResetEmail') as HTMLInputElement | null;
        if (!passwordInput || !confirmInput || !tokenInput || !emailInput) return;

        const password = passwordInput.value;
        const confirm = confirmInput.value;
        if (password !== confirm) {
          statusEl.textContent = 'Passwords do not match. Please try again.';
          statusEl.classList.add('text-red-500');
          statusEl.classList.remove('hidden');
          return;
        }

        try {
          const res = await fetch('/api/auth/password-reset/confirm', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              token: tokenInput.value,
              email: emailInput.value,
              password
            })
          });
          const data = await res.json().catch(() => ({}));
          if (res.ok) {
            statusEl.textContent = data.message || 'Password updated successfully. You can now log in with your new password.';
            statusEl.classList.add('text-green-400');
          } else {
            statusEl.textContent = data.message || 'Unable to reset password. The link may have expired.';
            statusEl.classList.add('text-red-500');
          }
        } catch (err) {
          console.error('Password reset failed', err);
          statusEl.textContent = 'Network error. Please try again.';
          statusEl.classList.add('text-red-500');
        } finally {
          statusEl.classList.remove('hidden');
        }
      });
    </script>
  )}
</BaseLayout>
