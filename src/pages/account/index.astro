---
// src/pages/account/index.astro
import BaseLayout from "../../layouts/BaseLayout.astro";
---
<BaseLayout hideBrandTag>
  <main class="relative text-white p-8">
    <!-- Shared container for both mobile + desktop -->
    <div id="account-view"></div>

    <script type="module">
      import { getAuth0Client } from '../../lib/auth';

      const buttonGroup = `
        <div class="relative flex gap-4">
          <button id="login" class="relative px-4 py-2 bg-primary text-black font-ethno">Log in</button>
          <button id="signup" class="relative px-4 py-2 border border-white/40 font-ethno">Sign up</button>
        </div>`;

      const root = document.getElementById("account-view");

      const show = (html) => {
        if (root) {
          root.innerHTML = html;
          root.dataset.viewReady = "true";
        }
      };

      // Fallback: if still empty after 5s, show login/signup
      setTimeout(() => {
        if (root && (!root.dataset.viewReady || root.textContent.includes("Loading"))) {
          console.warn("‚è∞ Fallback triggered ‚Äî forcing login/signup UI");
          show(`
            <h1 class="text-2xl mb-4 font-ethno text-primary">Account</h1>
            <p class="mb-4">Could not confirm login status. Please log in.</p>
            ${buttonGroup}
          `);
        }
      }, 5000);

      (async () => {
        console.log("üöÄ account page script loaded");

        const withTimeout = (p, ms = 8000) => Promise.race([
          p,
          new Promise((_, rej) => setTimeout(() => rej(new Error('timeout')), ms))
        ]);

        try {
          const auth0 = await withTimeout(getAuth0Client(), 8000);
          window._auth0 = auth0;
          console.log("‚úÖ auth0 client ready");

          // Handle redirect callback
          if (window.location.search.includes("code=")) {
            try {
              await withTimeout(auth0.handleRedirectCallback(), 8000);
            } catch (e) {
              console.warn("Redirect handling failed", e);
            }
            window.history.replaceState({}, document.title, window.location.pathname);
          }

          let authed = false;
          try {
            authed = await withTimeout(auth0.isAuthenticated(), 8000);
          } catch (e) {
            console.warn("isAuthenticated failed", e);
          }
          console.log("üîç authed?", authed);

          if (!authed) {
            show(`
              <h1 class="text-2xl mb-4 font-borg text-primary">Account</h1>
              <p class="mb-6">Log in or create an account to access your dashboard.</p>
              ${buttonGroup}
            `);
            document.getElementById("login")?.addEventListener("click", () => {
              localStorage.removeItem("customerEmail");
              document.cookie = "token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;";
              auth0.loginWithRedirect({
                authorizationParams: { screen_hint: "login", redirect_uri: window.location.origin + "/account" },
              });
            });
            document.getElementById("signup")?.addEventListener("click", () => {
              localStorage.removeItem("customerEmail");
              document.cookie = "token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC;";
              auth0.loginWithRedirect({
                authorizationParams: { screen_hint: "signup", redirect_uri: window.location.origin + "/account" },
              });
            });
            return;
          }

          // Authenticated path
          const user = await withTimeout(auth0.getUser(), 8000).catch(() => ({}));
          const claims = await withTimeout(auth0.getIdTokenClaims(), 8000).catch(() => null);
          const token = claims?.__raw;
          if (token && claims?.exp) {
            try {
              document.cookie = `token=${token}; path=/; SameSite=Lax; ${window.location.protocol === "https:" ? "Secure;" : ""} expires=${new Date(claims.exp * 1000).toUTCString()}`;
            } catch {}
          }
          if (user?.email) {
            try { localStorage.setItem("customerEmail", user.email); } catch {}
          }

          const name = user?.given_name || user?.name || user?.email || "there";
          show(`
            <p class="mb-6">Hello, <span class="text-red-500">${name}</span></p>
            <a href="/customerdashboard/customerProfile" class="underline">My Account ‚Üí</a>
          `);
        } catch (err) {
          console.error("‚ùå account script error", err);
          show(`
            <h1 class="text-2xl mb-4 font-borg text-primary">Account</h1>
            <p class="mb-4">We couldn‚Äôt load your account. ${err?.message === 'timeout' ? 'Request timed out.' : 'Please try again.'}</p>
            ${buttonGroup}
          `);
        }
      })();
    </script>
  </main>
</BaseLayout>