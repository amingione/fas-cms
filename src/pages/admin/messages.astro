---
import DashboardShell from '../../components/admin/DashboardShell.tsx'
---
<DashboardShell client:only="react">
  <h1 class="text-2xl md:text-3xl font-bold mb-6">Messages</h1>

  <div class="grid md:grid-cols-3 gap-4">
    <!-- Inbox -->
    <div class="md:col-span-1 border border-white/10 rounded-lg overflow-hidden">
      <ul id="messages-list" class="divide-y divide-white/10"></ul>
    </div>

    <!-- Detail / Reply -->
    <div class="md:col-span-2">
      <div id="message-detail" class="border border-white/10 rounded-lg p-4 space-y-3 hidden">
        <div class="text-xl font-semibold" id="msg-subject"></div>
        <div class="text-sm text-white/70" id="msg-from"></div>
        <div class="rounded bg-white/5 p-3 whitespace-pre-wrap" id="msg-body"></div>

        <textarea id="reply-body" class="w-full h-40 bg-transparent border border-white/20 rounded p-2" placeholder="Write your reply..."></textarea>
        <div class="flex gap-2 justify-end">
          <button id="close-detail" class="px-3 py-2 rounded border border-white/20 hover:bg-white/5 transition">Close</button>
          <button id="send-reply" class="px-4 py-2 rounded bg-white text-black hover:bg-white/90 transition">Send Reply</button>
        </div>
      </div>

      <div id="message-empty" class="text-white/60">Select a message.</div>
    </div>
  </div>

  <script type="module">
    const listEl = document.getElementById('messages-list')
    const detailEl = document.getElementById('message-detail')
    const emptyEl = document.getElementById('message-empty')

    const subjectEl = document.getElementById('msg-subject')
    const fromEl = document.getElementById('msg-from')
    const bodyEl = document.getElementById('msg-body')
    const replyEl = document.getElementById('reply-body')
    const closeBtn = document.getElementById('close-detail')
    const sendBtn = document.getElementById('send-reply')

    let selected = null

    async function fetchJSON(url, opts){
      const res = await fetch(url, opts)
      if (!res.ok) throw new Error(await res.text())
      return res.json()
    }

    function liTemplate(m){
      const li = document.createElement('li')
      li.className = 'p-3 hover:bg-white/5 cursor-pointer transition'
      li.dataset.id = m._id
      li.innerHTML = `
        <div class="text-sm text-white/60">${new Date(m.createdAt).toLocaleString()}</div>
        <div class="font-medium truncate">${m.subject || '(No subject)'}</div>
        <div class="text-white/70 text-sm truncate">${m.fromEmail}</div>
      `
      return li
    }

    async function loadList(){
      listEl.innerHTML = ''
      try {
        const list = await fetchJSON('/.netlify/functions/messages-list')
        list.forEach(m => listEl.appendChild(liTemplate(m)))
      } catch (e) {
        listEl.innerHTML = '<li class="p-3 text-white/60 text-sm">Failed to load messages.</li>'
        console.error(e)
      }
    }

    async function openMessage(id){
      try {
        const m = await fetchJSON('/.netlify/functions/message-detail?id=' + encodeURIComponent(id))
        selected = m
        subjectEl.textContent = m.subject || '(No subject)'
        fromEl.textContent = m.fromEmail || ''
        bodyEl.textContent = m.body || ''
        replyEl.value = '<p>Hello ' + (m.customerName || '') + ',</p><p></p><p>Best,</p>'

        emptyEl.classList.add('hidden')
        detailEl.classList.remove('hidden')
        detailEl.classList.remove('opacity-0','translate-y-1')
        void detailEl.offsetWidth
        detailEl.classList.add('transition', 'duration-200')
      } catch (e) {
        alert('Failed to open message')
        console.error(e)
      }
    }

    async function sendReply(){
      if (!selected) return
      try {
        const payload = { _id: selected._id, to: selected.fromEmail, subject: 'Re: ' + (selected.subject || 'Message'), html: replyEl.value }
        const res = await fetch('/.netlify/functions/message-reply', { method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify(payload) })
        if (!res.ok) throw new Error(await res.text())
        alert('Reply sent')
        closeDetail()
        loadList()
      } catch (e) {
        alert('Failed to send'); console.error(e)
      }
    }

    function closeDetail(){
      selected = null
      detailEl.classList.add('hidden')
      emptyEl.classList.remove('hidden')
    }

    // Events
    listEl.addEventListener('click', (e) => {
      const li = e.target.closest('li')
      if (!li) return
      openMessage(li.dataset.id)
    })
    closeBtn.addEventListener('click', closeDetail)
    sendBtn.addEventListener('click', sendReply)

    // Init
    loadList()
  </script>
</DashboardShell>