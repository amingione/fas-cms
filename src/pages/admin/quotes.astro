---
import DashboardShell from '../../components/admin/DashboardShell.tsx'
---
<DashboardShell client:only="react">
  <h1 class="text-2xl md:text-3xl font-bold mb-4">Quotes</h1>
  <div class="mb-4 flex items-center justify-between">
    <p class="text-white/70 text-sm">Draft, send, convert to invoice.</p>
    <button id="newQuote" class="px-4 py-2 rounded bg-white text-accent hover:bg-white/90">New Quote</button>
  </div>
  <div id="quotes-root"></div>

  <script type="module">
    import React, { useEffect, useState } from 'react'
    import ReactDOM from 'react-dom/client'
    import QuoteEditorDrawer from '@components/admin/QuoteEditorDrawer.tsx'

    function QuotesApp(){
      const [rows, setRows] = useState([])
      const [open, setOpen] = useState(false)
      const [initial, setInitial] = useState<any>(null)
      const [filter, setFilter] = useState('all')

      async function load(){
        try {
          const r = await fetch('/.netlify/functions/quotes-list', {
            credentials: 'include'
          });
          const data = await r.json();
          setRows(Array.isArray(data) ? data : [])
        } catch { setRows([]) }
      }
      useEffect(()=>{ load() },[])
      function newQuote(){ setInitial(null); setOpen(true) }

      // Assign newQuote to window.__newQuote for global access
      if (typeof window !== 'undefined') {
        (window).__newQuote = newQuote;
      }

      return (
        React.createElement(React.Fragment, null,
          React.createElement('div',{className:'mb-3 flex items-center gap-2 text-xs'},
            ['all','draft','sent','invoiced','paid'].map((f)=>
              React.createElement('button',{
                key:f,
                className:`px-2 py-1 rounded border ${filter===f ? 'bg-white text-accent border-white' : 'border-white/30 hover:bg-white/80'}`,
                onClick:()=>setFilter(f)
              }, f[0].toUpperCase()+f.slice(1))
            )
          ),
          React.createElement('div',{className:'overflow-x-auto border border-white/20 rounded-lg'},
            React.createElement('table',{className:'min-w-full text-sm'},
              React.createElement('thead',{className:'bg-white/5'},
                React.createElement('tr',null,['Quote','Customer','Status','Total','Actions'].map(h=>React.createElement('th',{className:'text-left px-3 py-2',key:h},h)))
              ),
              React.createElement('tbody',null,
                rows
                  .filter((r)=>{
                    if(filter==='all') return true;
                    const st=(r.status||'').toLowerCase();
                    if(filter==='sent') return st==='sent'||st==='invoiced';
                    return st===filter;
                  })
                  .map((r)=>React.createElement('tr',{key:r._id,className:'border-t border-white/20 hover:bg-white/5 transition'},
                  React.createElement('td',{className:'px-3 py-2'},
                    React.createElement(React.Fragment,null,
                      React.createElement('div',null, r.number || r._id.slice(-6)),
                      r.stripeInvoiceNumber ? React.createElement('div',{className:'text-xs text-white/70'}, 'INV: ' + r.stripeInvoiceNumber) : null
                    )
                  ),
                  React.createElement('td',{className:'px-3 py-2'}, r.customerName||r.customerEmail||'â€”'),
                  React.createElement('td',{className:'px-3 py-2'}, (function(st){
                    st = (st||'draft').toLowerCase();
                    var cls = 'inline-block text-xs px-2 py-0.5 rounded-full border ' + (st==='paid'
                      ? 'bg-green-600/20 text-green-400 border-green-500/30'
                      : (st==='sent'||st==='invoiced')
                        ? 'bg-blue-600/20 text-blue-400 border-blue-500/30'
                        : 'bg-white/80 text-white/70 border-white/30');
                    var label = st.charAt(0).toUpperCase()+st.slice(1);
                    return React.createElement('span',{className:cls}, label);
                  })(r.status)),
                  React.createElement('td',{className:'px-3 py-2'}, `$${Number(r.total||0).toFixed(2)}`),
                  React.createElement('td',{className:'px-3 py-2 text-right'},
                    React.createElement(React.Fragment,null,
                      React.createElement('button',{className:'px-3 py-1 rounded border border-white/30 hover:bg-white/80 mr-2', onClick:()=>{ setInitial(r); setOpen(true) }}, 'Edit'),
                      r.stripeHostedInvoiceUrl
                        ? React.createElement('a',{className:'px-3 py-1 rounded border border-white/30 hover:bg-white/80', href:r.stripeHostedInvoiceUrl, target:'_blank'}, 'Open Invoice')
                        : React.createElement('button',{className:'px-3 py-1 rounded border border-white/30 hover:bg-white/80', onClick: async ()=>{ try { const rr = await fetch('/.netlify/functions/quotes-send',{ method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify({ quoteId: r._id }), credentials: 'include' }); if(!rr.ok) throw new Error(await rr.text()); alert('Sent'); load(); } catch(e){ alert('Send failed'); } }}, 'Send')
                    )
                  )
                ))
              )
            )
          ),
          React.createElement(QuoteEditorDrawer,{ open, onClose:()=>setOpen(false), initial, reload:load })
        )
      )
    }

    const newQuoteBtn = document.getElementById('newQuote');
    if (newQuoteBtn) {
      newQuoteBtn.addEventListener('click', () => window.__newQuote && window.__newQuote());
    }
    const quotesRoot = document.getElementById('quotes-root');
    if (quotesRoot) {
      const root = ReactDOM.createRoot(quotesRoot);
      const App = React.createElement(QuotesApp);
      root.render(App);
    }
  </script>
</DashboardShell>
