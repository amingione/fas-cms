---
import DashboardShell from '../../components/admin/DashboardShell.tsx'
---
<DashboardShell client:only="react">
  <h1 class="text-2xl md:text-3xl font-bold mb-6">Categories</h1>

  <div class="space-y-4">
    <div class="flex gap-2">
      <input id="new-cat-title" placeholder="New category title"
             class="bg-transparent border border-white/30 rounded px-3 py-2 flex-1" />
      <button id="add-cat"
              class="px-4 py-2 rounded bg-white text-accent hover:bg-white/90 transition">
        Add
      </button>
    </div>

    <div id="cats-list" class="space-y-2"></div>
  </div>

  <script type="module">
    const $ = (sel, root=document) => root.querySelector(sel)
    const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel))

    const listEl = $('#cats-list')
    const inputEl = $('#new-cat-title')
    const addBtn  = $('#add-cat')

    async function fetchJSON(url, opts = {}) {
      const res = await fetch(url, { credentials: 'include', ...opts })
      if (!res.ok) throw new Error(await res.text())
      return res.json()
    }

    async function load() {
      const data = await fetchJSON('/.netlify/functions/categories-list')
      render(data)
    }

    function rowTpl(cat) {
      const div = document.createElement('div')
      div.className = 'flex items-center justify-between rounded border border-white/20 bg-white/5 px-3 py-2 transition'
      div.dataset.id = cat._id

      const left = document.createElement('div')
      left.className = 'font-medium truncate'
      left.textContent = cat.title
      left.title = cat.title

      const actions = document.createElement('div')
      actions.className = 'flex gap-2'

      const renameBtn = document.createElement('button')
      renameBtn.className = 'px-3 py-1 rounded border border-white/30 hover:bg-white/80 transition'
      renameBtn.textContent = 'Rename'
      renameBtn.addEventListener('click', () => enterEdit(div, cat))

      const delBtn = document.createElement('button')
      delBtn.className = 'px-3 py-1 rounded border border-red-500/40 text-red-300 hover:bg-red-500/10 transition'
      delBtn.textContent = 'Delete'
      delBtn.addEventListener('click', async () => {
        if (!confirm('Delete this category?')) return
        await fetchJSON('/.netlify/functions/categories-delete', {
          method: 'POST',
          headers: { 'content-type': 'application/json' },
          body: JSON.stringify({ _id: cat._id }),
        })
        div.classList.add('opacity-0', 'scale-[0.98]')
        setTimeout(load, 120)
      })

      actions.append(renameBtn, delBtn)
      div.append(left, actions)
      return div
    }

    function render(list) {
      listEl.innerHTML = ''
      list.forEach(cat => listEl.appendChild(rowTpl(cat)))
    }

    function enterEdit(row, cat) {
      row.innerHTML = ''
      const form = document.createElement('div')
      form.className = 'grid gap-2 w-full'

      const input = document.createElement('input')
      input.className = 'bg-transparent border border-white/30 rounded px-2 py-1 w-full'
      input.value = cat.title
      input.autofocus = true

      const slug = document.createElement('input')
      slug.className = 'bg-transparent border border-white/30 rounded px-2 py-1 w-full'
      slug.placeholder = 'slug (optional)'
      slug.value = cat.slug || ''

      const metaTitle = document.createElement('input')
      metaTitle.className = 'bg-transparent border border-white/30 rounded px-2 py-1 w-full'
      metaTitle.placeholder = 'Meta Title'
      metaTitle.value = cat.metaTitle || ''

      const metaDescription = document.createElement('textarea')
      metaDescription.className = 'bg-transparent border border-white/30 rounded px-2 py-1 w-full'
      metaDescription.placeholder = 'Meta Description'
      metaDescription.rows = 2
      metaDescription.value = cat.metaDescription || ''

      const canonicalUrl = document.createElement('input')
      canonicalUrl.className = 'bg-transparent border border-white/30 rounded px-2 py-1 w-full'
      canonicalUrl.placeholder = 'Canonical URL'
      canonicalUrl.value = cat.canonicalUrl || ''

      const noindex = document.createElement('label')
      noindex.className = 'inline-flex items-center gap-2 text-sm'
      const noidx = document.createElement('input')
      noidx.type = 'checkbox'
      noidx.checked = !!cat.noindex
      noidx.className = 'accent-white/80'
      const noidxSpan = document.createElement('span')
      noidxSpan.textContent = 'Noindex'
      noindex.append(noidx, noidxSpan)

      const save = document.createElement('button')
      save.className = 'px-3 py-1 rounded bg-white text-accent hover:bg-white/90 transition'
      save.textContent = 'Save'
      save.addEventListener('click', async () => {
        const title = input.value.trim()
        if (!title) return alert('Title required')
        await fetchJSON('/.netlify/functions/categories-upsert', {
          method: 'POST',
          headers: { 'content-type': 'application/json' },
          body: JSON.stringify({
            _id: cat._id,
            title,
            slug: slug.value || undefined,
            metaTitle: metaTitle.value || undefined,
            metaDescription: metaDescription.value || undefined,
            canonicalUrl: canonicalUrl.value || undefined,
            noindex: !!noidx.checked
          }),
        })
        await load()
      })

      const cancel = document.createElement('button')
      cancel.className = 'px-3 py-1 rounded border border-white/30 hover:bg-white/80 transition'
      cancel.textContent = 'Cancel'
      cancel.addEventListener('click', load)

      // SERP preview
      const preview = document.createElement('div')
      preview.className = 'rounded border border-white/15 bg-black/50 p-2 text-xs text-white/80'
      const updatePreview = () => {
        const base = location.origin || ''
        preview.innerHTML = `
          <div class="text-white/60 mb-1">Search Preview</div>
          <div class="text-blue-400">${metaTitle.value || title}</div>
          <div class="text-green-500">${base}/shop/categories/${(slug.value || title).toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)+/g,'')}</div>
          <div class="text-white/80 mt-1">${metaDescription.value || ''}</div>
        `
      }
      ;[input, slug, metaTitle, metaDescription].forEach(el => el.addEventListener('input', updatePreview))
      updatePreview()

      form.append(input, slug, metaTitle, metaDescription, canonicalUrl, noindex, preview, save, cancel)
      row.appendChild(form)
      input.focus()
      input.select()
    }

    addBtn.addEventListener('click', async () => {
      const title = inputEl.value.trim()
      if (!title) return
      await fetchJSON('/.netlify/functions/categories-upsert', {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ title }),
      })
      inputEl.value = ''
      await load()
    })

    inputEl.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') addBtn.click()
    })

    // initial
    load().catch(err => {
      listEl.innerHTML = '<div class="text-white/70 text-sm">Failed to load categories.</div>'
      console.error(err)
    })
  </script>
</DashboardShell>
