---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { formatMoney } from '@/utils/money';
---

<BaseLayout title="Checkout" canonical={`${new URL(Astro.request.url).origin}/checkout`}>
  <section class="min-h-[60vh] bg-black text-white flex flex-col items-center justify-center px-6 py-16">
    <div class="max-w-3xl w-full rounded-2xl border border-white/10 bg-white/5 p-8 shadow-lg shadow-primary/10">
      <h1 class="text-3xl font-borg text-primary tracking-wide text-center mb-6">Secure Checkout</h1>
      <p class="text-sm text-white/70 text-center mb-10">
        Review your cart items and continue to Stripe to finish your purchase. All payments are PCI compliant
        and processed securely.
      </p>

      <div id="checkout-cart" class="space-y-4 text-sm text-white/80"></div>
      <div id="checkout-total" class="text-lg font-semibold text-white text-right mt-6"></div>

      <div class="mt-10 flex flex-wrap justify-center gap-4">
        <a
          href="/cart"
          class="inline-flex items-center rounded-full border border-white/20 px-5 py-2 text-xs uppercase tracking-wide text-white hover:border-primary hover:text-primary transition"
        >
          Back to Cart
        </a>
        <button
          id="begin-checkout"
          class="inline-flex items-center rounded-full bg-primary px-6 py-2 text-xs uppercase tracking-wide text-black font-semibold hover:bg-primary/90 transition"
        >
          Continue to Payment
        </button>
      </div>

      <p id="checkout-status" class="mt-6 hidden text-center text-sm"></p>
    </div>
  </section>

  <script is:inline>
    const cartContainer = document.getElementById('checkout-cart');
    const totalEl = document.getElementById('checkout-total');
    const statusEl = document.getElementById('checkout-status');
    const submitBtn = document.getElementById('begin-checkout');

    const setStatus = (message, type = 'info') => {
      if (!statusEl) return;
      statusEl.textContent = message;
      statusEl.classList.remove('hidden', 'text-red-300', 'text-green-300', 'text-white/70');
      const cls = type === 'error' ? 'text-red-300' : type === 'success' ? 'text-green-300' : 'text-white/70';
      statusEl.classList.add(cls);
    };

    const money = (value) => {
      try {
        if (typeof window.formatMoney === 'function') return window.formatMoney(value);
      } catch {}
      const n = Number(value) || 0;
      return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(n);
    };

    const loadCart = () => {
      try {
        const raw = localStorage.getItem('fas_cart_v1');
        if (!raw) return { items: [] };
        const parsed = JSON.parse(raw);
        if (parsed && Array.isArray(parsed.items)) return parsed;
      } catch {}
      return { items: [] };
    };

    const renderCart = () => {
      const cart = loadCart();
      const items = Array.isArray(cart.items) ? cart.items : [];
      if (!items.length) {
        if (cartContainer) cartContainer.innerHTML = '<p class="text-center text-white/60">Your cart is empty.</p>';
        if (totalEl) totalEl.textContent = '';
        if (submitBtn) submitBtn.setAttribute('disabled', 'true');
        return;
      }

      if (submitBtn) submitBtn.removeAttribute('disabled');

      const rows = items
        .map((item) => {
          const qty = Math.max(1, Number(item.quantity) || 1);
          const price = Number(item.price) || 0;
          const subtotal = price * qty;
          return `
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between rounded-lg border border-white/10 bg-black/40 p-4 gap-3">
              <div class="flex items-center gap-3">
                <img src="${item.image || '/logo/faslogochroma.webp'}" class="h-14 w-14 rounded object-cover border border-white/10" alt="">
                <div>
                  <p class="font-semibold text-white">${item.name || 'Item'}</p>
                  <p class="text-xs text-white/50">${qty} Ã— ${money(price)}</p>
                </div>
              </div>
              <div class="text-sm font-semibold text-white">${money(subtotal)}</div>
            </div>
          `;
        })
        .join('');

      if (cartContainer) cartContainer.innerHTML = rows;

      const total = items.reduce((sum, item) => {
        const qty = Math.max(1, Number(item.quantity) || 1);
        const price = Number(item.price) || 0;
        return sum + price * qty;
      }, 0);

      if (totalEl) totalEl.textContent = `Subtotal: ${money(total)}`;
    };

    const startCheckout = async () => {
      const cart = loadCart();
      const items = Array.isArray(cart.items) ? cart.items : [];
      if (!items.length) {
        setStatus('Your cart is empty. Please add items before checking out.', 'error');
        return;
      }

      if (submitBtn) submitBtn.setAttribute('disabled', 'true');
      setStatus('Contacting checkout...', 'info');
      try {
        const response = await fetch('/api/checkout', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ cart: items })
        });
        const data = await response.json().catch(() => ({}));
        if (!response.ok || !data?.url) {
          throw new Error(data?.error || 'Checkout failed. Please try again.');
        }
        window.location.href = data.url;
      } catch (error) {
        console.error(error);
        setStatus(
          error instanceof Error ? error.message : 'We were unable to begin checkout. Please try again.',
          'error'
        );
        if (submitBtn) submitBtn.removeAttribute('disabled');
      }
    };

    renderCart();
    submitBtn?.addEventListener('click', (event) => {
      event.preventDefault();
      startCheckout();
    });
  </script>
</BaseLayout>
