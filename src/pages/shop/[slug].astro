---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getProductBySlug, getRelatedProducts, getUpsellProducts, type Product } from '../../lib/sanity-utils';
import PortableTextRenderer from "../../components/PortableTextRenderer.jsx";
import SlugCarousel from '@/components/SlugCarousel.astro';

export type KitItem = { item: string; quantity?: number };
export type VehicleCompat = { make?: string; model?: string; trim?: string };
export type SpecItem = { label?: string; name?: string; value?: string; detail?: string };
export type AttrItem = { key?: string; value?: string };

export type ProductWithKit = Product & {
  includedInKit?: KitItem[];
  requiresPaintCode?: boolean;
  compatibleVehicles?: VehicleCompat[];
  tune?: { title?: string } | null;
  averageHorsepower?: number | null;
  specifications?: SpecItem[];
  attributes?: AttrItem[];
  filters?: string[];
  categories?: { slug?: { current?: string } | string; title?: string }[];
};

const { slug } = Astro.params;

// Fetch product data based on the slug
let product: ProductWithKit | null = null;
let relatedProducts: Product[] = [];
let upsellProducts: Product[] = [];
let options: any[] = [];
let addOns: any[] = [];
let customs: any[] = [];
try {
  if (typeof slug !== 'string') {
    throw new Error('Product slug is missing or invalid.');
  }
  product = await getProductBySlug(slug);
  if (!product) {
    throw new Error(`Product with slug "${slug}" not found.`);
  }

  // Build inputs for auto-related / upsell
  const catIds = ((product as any).category || (product as any).categories || [])
    .map((c: any) => c?._id || c?._ref)
    .filter(Boolean);
  const tagFilters = Array.isArray((product as any).filters) ? (product as any).filters : [];
  const basePrice = typeof (product as any).price === 'number' ? (product as any).price : undefined;

  // Auto-related and upsell
  relatedProducts = await getRelatedProducts(slug, catIds, tagFilters, 6);
  upsellProducts = await getUpsellProducts(slug, catIds, basePrice, 6);

  // Prepare a plain description string for client-side script (avoid TS in inline JS)
  const descriptionText: string = (((product as any)?.shortDescription ?? (product as any)?.description) ?? '').toString();

  // ---- Options/Upgrades normalization (support multiple schema shapes) ----
  options = ((product as any).options || (product as any).optionGroups || (product as any).variationOptions || (product as any).variations || []) as any[];
  addOns  = ((product as any).addOns  || (product as any).upgrades     || (product as any).extras     || []) as any[];
  customs = ((product as any).customizations || (product as any).customOptions || []) as any[];
  // Map Sanity customPaint object -> a custom text input with optional surcharge
  const cp = (product as any).customPaint;
  if (cp?.enabled) {
    customs = Array.isArray(customs) ? customs.slice() : [];
    customs.push({
      key: 'paintCode',
      name: 'paintCode',
      label: cp.codeLabel || 'OEM Paint Code',
      placeholder: '',
      group: 'customPaint',
      type: 'text',
      required: cp.paintCodeRequired === true,
      priceDelta: typeof cp.additionalPrice === 'number' ? cp.additionalPrice : 0,
      instructions: cp.instructions || ''
    });
  }
} catch (err) {
  console.error('‚ùå Failed to fetch product or similar products:', err);
  return Astro.redirect('/shop'); // Redirect to shop if product not found
}
---

<BaseLayout>
  <div class="container mx-auto px-4 py-10 text-white" style="padding-top: 80px;">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-10">
      <!-- LEFT: Sticky Image on desktop -->
      <div class="md:sticky md:top-28 flex justify-center items-start">
        <SlugCarousel
          images={(product as any).images?.map((img: any) => ({
            url: img?.asset?.url || '/placeholder.png',
            alt: img?.alt || (product as any).title
          })) || []}
        />
      </div>

      <!-- RIGHT: Title, price, short intro, add-to-cart, then accordion -->
      <div>
        <h1 class="text-3xl font-ethno mb-3">{(product as any).title}</h1>
        <h2 class="text-4xl text-accent
         font-captain mb-4">
          {typeof (product as any).price === 'number' ? `$${(product as any).price.toFixed(2)}` : 'Price not available'}
        </h2>

        {(((options?.length || 0) + (addOns?.length || 0) + (customs?.length || 0)) > 0) && (
          <form id="product-options" class="mb-6 space-y-4">
            {/* Variant Options (radio/select) */}
            {Array.isArray(options) && options.length > 0 && options.map((group: any) => (
              <div class="bg-black/20 rounded-lg p-3 border border-white/10">
                <div class="font-semibold mb-2">{group.title || group.name || 'Option'}</div>
                {/* Prefer select if many values, else radios */}
                {(Array.isArray(group.values) ? group.values : (group.items || [])).length > 4 ? (
                  <select
                    class="w-full bg-black/30 border border-white/10 rounded px-2 py-2"
                    name={(group.key || group.name || group.title || 'option').toString()}
                    data-group={(group.key || group.name || group.title || 'option').toString()}
                  >
                    {(Array.isArray(group.values) ? group.values : (group.items || [])).map((v: any) => (
                      <option
                        value={(v.value || v.name || v.title || v.label || '').toString()}
                        data-price={(typeof v.priceDelta === 'number' ? v.priceDelta : (typeof v.delta === 'number' ? v.delta : 0)).toString()}
                      >
                        {(v.label || v.title || v.name || v.value || 'Choice')}
                        {typeof v.priceDelta === 'number' && v.priceDelta !== 0 ? ` (+$${Number(v.priceDelta).toFixed(2)})` : ''}
                        {typeof v.delta === 'number' && v.delta !== 0 ? ` (+$${Number(v.delta).toFixed(2)})` : ''}
                      </option>
                    ))}
                  </select>
                ) : (
                  <div class="grid grid-cols-1 sm:grid-cols-2 gap-2">
                    {(Array.isArray(group.values) ? group.values : (group.items || [])).map((v: any, i: number) => (
                      <label class="flex items-center gap-2 bg-black/30 border border-white/10 rounded px-2 py-2 cursor-pointer">
                        <input
                          type="radio"
                          name={(group.key || group.name || group.title || 'option').toString()}
                          value={(v.value || v.name || v.title || v.label || '').toString()}
                          data-group={(group.key || group.name || group.title || 'option').toString()}
                          data-price={typeof v.priceDelta === 'number' ? v.priceDelta : (typeof v.delta === 'number' ? v.delta : 0)}
                          checked={i === 0}
                        />
                        <span class="text-sm">{v.label || v.title || v.name || v.value || 'Choice'}</span>
                        <span class="ml-auto text-xs opacity-70">
                          {typeof v.priceDelta === 'number' && v.priceDelta !== 0 ? `+$${Number(v.priceDelta).toFixed(2)}` : ''}
                          {typeof v.delta === 'number' && v.delta !== 0 ? `+$${Number(v.delta).toFixed(2)}` : ''}
                        </span>
                      </label>
                    ))}
                  </div>
                )}
              </div>
            ))}

            {/* Add-ons (checkbox) */}
            {Array.isArray(addOns) && addOns.length > 0 && (
              <div class="bg-black/20 rounded-lg p-3 border border-white/10">
                <div class="font-semibold mb-2">Optional Upgrades</div>
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {addOns.map((a: any) => (
                    <label class="flex items-center gap-2 bg-black/30 border border-white/10 rounded px-2 py-2 cursor-pointer">
                      <input type="checkbox"
                        name={(a.key || a.slug || a.id || a.name || a.title || 'addon').toString()}
                        value={(a.value || a.name || a.title || '').toString()}
                        data-group={(a.group || 'addOn').toString()}
                        data-price={(typeof a.priceDelta === 'number' ? a.priceDelta : (typeof a.price === 'number' ? a.price : (typeof a.delta === 'number' ? a.delta : 0))).toString()}
                        checked={!!a.defaultSelected}
                      />
                      <span class="text-sm">{a.label || a.title || a.name || 'Upgrade'}</span>
                      <span class="ml-auto text-xs opacity-70">
                        {typeof a.priceDelta === 'number' ? `+$${Number(a.priceDelta).toFixed(2)}` : (typeof a.price === 'number' ? `+$${Number(a.price).toFixed(2)}` : (typeof a.delta === 'number' ? `+$${Number(a.delta).toFixed(2)}` : ''))}
                      </span>
                    </label>
                  ))}
                </div>
              </div>
            )}

            {/* Custom fields (e.g., paint code with fixed surcharge) */}
            {Array.isArray(customs) && customs.length > 0 && customs.map((c: any) => (
              <div class="bg-black/20 rounded-lg p-3 border border-white/10">
                <div class="font-semibold mb-2">{c.label || c.title || 'Custom Option'}</div>
                <input
                  type={c.type === 'number' ? 'number' : 'text'}
                  name={(c.key || c.name || 'custom').toString()}
                  placeholder={(c.placeholder || '').toString()}
                  class="w-full bg-black/30 border border-white/10 rounded px-2 py-2"
                  data-group={(c.group || 'custom').toString()}
                  data-price={(typeof c.priceDelta === 'number' ? c.priceDelta : (typeof c.price === 'number' ? c.price : (typeof c.delta === 'number' ? c.delta : 0))).toString()}
                  required={!!c.required}
                />
                {c.instructions && (
                  <div class="mt-1 text-xs opacity-80">{String(c.instructions)}</div>
                )}
                {(typeof c.priceDelta === 'number' || typeof c.price === 'number' || typeof c.delta === 'number') && (
                  <div class="mt-1 text-xs opacity-70">Surcharge: +${Number(c.priceDelta ?? c.price ?? c.delta ?? 0).toFixed(2)}</div>
                )}
              </div>
            ))}

            {/* Live price */}
            <div class="flex items-center justify-between bg-black/20 rounded-lg p-3 border border-white/10">
              <span class="text-sm opacity-80">Configured Price</span>
              <span id="price-total" class="text-lg font-bold">$ {(typeof (product as any).price === 'number' ? (product as any).price.toFixed(2) : '0.00')}</span>
            </div>
          </form>
        )}

        <!-- Short intro (truncated) -->
        <PortableTextRenderer value={product.shortDescription} />

        <!-- Add to Cart Button -->
        <button
          id="add-to-cart-btn"
          type="button"
          class="add-to-cart inline-flex items-center gap-2 border border-white/20 px-4 py-2 rounded-full hover:bg-primary hover:text-black transition relative z-10 pointer-events-auto"
          data-product-id={(product as any)._id}
          data-product-name={(product as any).title}
          data-product-price={(product as any).price}
          data-product-base-price={(product as any).price}
          data-product-categories={`${JSON.stringify((product as any).categories || [])}`}
        >
          <!-- bag icon -->
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
            <path d="M8 7a4 4 0 118 0h3a1 1 0 011 1v12a2 2 0 01-2 2H6a2 2 0 01-2-2V8a1 1 0 011-1h3zm2 0a2 2 0 104 0H10z"/>
          </svg>
          <span class="text-sm font-kwajong">Add to Cart</span>
        </button>

        <!-- Accordion -->
        <div class="mt-8 divide-y divide-white/10 border border-white/10 rounded-lg overflow-hidden">
          <!-- Details / Full Description -->
          <details class="group" id="acc-details">
            <summary class="cursor-pointer select-none bg-black/30 px-4 py-3 font-ethno text-lg flex items-center justify-between">
              <span>Product Details</span>
              <span class="transition-transform group-open:rotate-180">‚ñæ</span>
            </summary>
            <div class="px-4 py-4 text-white/90 font-arial leading-relaxed whitespace-pre-line">
              <PortableTextRenderer value={product.description} />
              {/* Specifications Table */}
              {product.specifications && product.specifications.length > 0 && (
                <div class="mt-6">
                  <h3 class="font-bold text-lg mb-2">Specifications</h3>
                  <table class="table-auto border border-gray-300 w-full text-left text-sm">
                    <tbody>
                      {product.specifications.map((spec: { label?: string; key?: string; value?: string }) => (
                        <tr>
                          <td class="border px-2 py-1">{spec.label || spec.key}</td>
                          <td class="border px-2 py-1">{spec.value}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
              {/* Attributes Table */}
              {product.attributes && product.attributes.length > 0 && (
                <div class="mt-6">
                  <h3 class="font-bold text-lg mb-2">Attributes</h3>
                  <table class="table-auto border border-gray-300 w-full text-left text-sm">
                    <tbody>
                      {product.attributes.map((attr: { name?: string; value?: string }) => (
                        <tr>
                          <td class="border px-2 py-1">{attr.name}</td>
                          <td class="border px-2 py-1">{attr.value}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
              {/* Kit Includes Table */}
              {Array.isArray(product?.includedInKit) && product.includedInKit.length > 0 && (
                <div class="mt-6">
                  <h3 class="font-bold text-lg mb-2">Included in Kit</h3>
                  <table class="table-auto border border-gray-300 w-full text-left text-sm">
                    <tbody>
                      {product.includedInKit.map((kit: KitItem, idx: number) => (
                        <tr>
                          <td class="border px-2 py-1">{kit.item ?? 'Item'}</td>
                          <td class="border px-2 py-1">{kit.quantity ?? 1}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </details>

          {product.importantNotes && (
            <div class="mt-6 p-4 border border-red-500 bg-slate-400 text-red-700 rounded">
              <h3 class="font-bold text-lg mb-2">Important Notes</h3>
              <PortableTextRenderer value={product.importantNotes} />
            </div>
          )}


          <!-- Specifications (removed, now handled in Product Details accordion) -->

          <!-- Compatibility -->
          {(Array.isArray((product as any).compatibleVehicles) && (product as any).compatibleVehicles.length > 0) || (product as any).tune || (product as any).averageHorsepower ? (
            <details class="group">
              <summary class="cursor-pointer select-none bg-black/30 px-4 py-3 font-ethno text-lg flex items-center justify-between">
                <span>Compatibility</span>
                <span class="transition-transform group-open:rotate-180">‚ñæ</span>
              </summary>
              <div class="px-4 py-4 space-y-4">
                {Array.isArray((product as any).compatibleVehicles) && (product as any).compatibleVehicles.length > 0 && (
                  <div>
                    <div class="font-semibold mb-2">Compatible Vehicles</div>
                    <ul class="list-disc list-inside text-white/90">
                      {(product as any).compatibleVehicles.map((v: { make?: string; model?: string; trim?: string }) => (
                        <li>{[v.make, v.model, v.trim].filter(Boolean).join(' ')}</li>
                      ))}
                    </ul>
                  </div>
                )}
                {(product as any).tune && (
                  <div class="text-white/90"><span class="font-semibold">Tune:</span> {(product as any).tune.title}</div>
                )}
                {typeof (product as any).averageHorsepower === 'number' && (
                  <div class="text-white/90"><span class="font-semibold">Average Horsepower:</span> {(product as any).averageHorsepower}</div>
                )}
              </div>
            </details>
          ) : null}

          {/* Categories & Filters (inline minimal) */}
        {/* Inline Categories & Filters at the bottom, centered */}
        {(((product as any).categories?.length ?? 0) > 0) || (((product as any).filters?.length ?? 0) > 0) ? (
          <div class="mt-8 text-left text-sm text-white/70">
            {(product as any).categories?.length > 0 && (
              <div class="mb-1">
                <span class="font-semibold text-white">Categories:</span>{' '}
                {(product as any).categories.map((c: any, idx: number) => (
                  <>
                    <a href={`/shop?categorySlug=${c.slug?.current || c.slug}`} class="hover:underline">
                      {c.title}
                    </a>
                    {idx < (product as any).categories.length - 1 ? ', ' : ''}
                  </>
                ))}
              </div>
            )}
            {(product as any).filters?.length > 0 && (
              <div>
                <span class="font-semibold text-white">Filters:</span>{' '}
                {(product as any).filters.map((f: any, idx: number) => (
                  <>
                    <a href={`/shop?filters=${encodeURIComponent(String(f).toLowerCase())}`} class="hover:underline capitalize">
                      {String(f)}
                    </a>
                    {idx < (product as any).filters.length - 1 ? ', ' : ''}
                  </>
                ))}
              </div>
            )}
          </div>
        ) : null}
        </div>
      </div>
    </div>

    <!-- Related Products -->
{Array.isArray(relatedProducts) && relatedProducts.length > 0 && (
  <div class="mt-16">
    <h2 class="text-2xl font-borg mb-6">Related Products</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {(relatedProducts || [])
        .filter((p: any) => p && p.slug && (p.slug.current || typeof p.slug === 'string'))
        .map((p: any) => {
          const s = (p.slug && (p.slug.current || p.slug)) as string;
          if (!s) return null;
          const img = p?.images?.[0]?.asset?.url || '/placeholder.png';
          const alt = p?.images?.[0]?.alt || p?.title || 'Product image';
          const price =
            typeof p?.price === 'number' ? `$${p.price.toFixed(2)}` : '';
          return (
            <>
              {p.slug?.current ? (
                <a href={`/shop/${p.slug.current}`} class="block bg-black/10 rounded-lg shadow-md hover:shadow-lg transition p-4">
                  <div class="w-full aspect-square bg-black/20 rounded-md mb-4 overflow-hidden grid place-items-center">
                    <img src={img} alt={alt} class="max-w-full max-h-full object-contain" />
                  </div>
                  <h3 class="text-lg font-semibold">{p?.title || 'Untitled product'}</h3>
                  <p class="text-primary font-bold">{price}</p>
                </a>
              ) : (
                <span class="block bg-black/10 rounded-lg shadow-md transition p-4">
                  <div class="w-full aspect-square bg-black/20 rounded-md mb-4 overflow-hidden grid place-items-center">
                    <img src={img} alt={alt} class="max-w-full max-h-full object-contain" />
                  </div>
                  <h3 class="text-lg font-semibold">{p?.title || 'Untitled product'}</h3>
                  <p class="text-primary font-bold">{price}</p>
                </span>
              )}
            </>
          );
        })}
    </div>
  </div>
)}

<!-- Recommended Upgrades / Upsell -->
{Array.isArray(upsellProducts) && upsellProducts.length > 0 && (
  <div class="mt-12">
    <h2 class="text-2xl font-borg mb-6">Recommended Upgrades</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {(upsellProducts || [])
        .filter((p: any) => p && p.slug && (p.slug.current || typeof p.slug === 'string'))
        .map((p: any) => {
          const s = (p.slug && (p.slug.current || p.slug)) as string;
          if (!s) return null;
          const img = p?.images?.[0]?.asset?.url || '/placeholder.png';
          const alt = p?.images?.[0]?.alt || p?.title || 'Product image';
          const price =
            typeof p?.price === 'number' ? `$${p.price.toFixed(2)}` : '';
          return (
            <>
              {p.slug?.current ? (
                <a href={`/shop/${p.slug.current}`} class="block bg-black/10 rounded-lg shadow-md hover:shadow-lg transition p-4">
                  <div class="w-full aspect-square bg-black/20 rounded-md mb-4 overflow-hidden grid place-items-center">
                    <img src={img} alt={alt} class="max-w-full max-h-full object-contain" />
                  </div>
                  <h3 class="text-lg font-semibold">{p?.title || 'Untitled product'}</h3>
                  <p class="text-primary font-bold">{price}</p>
                </a>
              ) : (
                <span class="block bg-black/10 rounded-lg shadow-md transition p-4">
                  <div class="w-full aspect-square bg-black/20 rounded-md mb-4 overflow-hidden grid place-items-center">
                    <img src={img} alt={alt} class="max-w-full max-h-full object-contain" />
                  </div>
                  <h3 class="text-lg font-semibold">{p?.title || 'Untitled product'}</h3>
                  <p class="text-primary font-bold">{price}</p>
                </span>
              )}
            </>
          );
        })}
    </div>
  </div>
)}
  </div>

  
</BaseLayout>
  <style>
    /* Ensure transparent overlays don‚Äôt block clicks on this product page */
    [class~="absolute"][class~="inset-0"][class*="bg-black/10"][class~="z-0"] { pointer-events: none; }
  </style>
  <script>
  // @ts-nocheck
  (function () {
    if (window.__fasPriceInit) return; // prevent double-init on HMR/nav
    window.__fasPriceInit = true;

    let __rafPending = false;
    function scheduleUpdate(fn) {
      if (__rafPending) return;
      __rafPending = true;
      requestAnimationFrame(() => {
        __rafPending = false;
        try { fn(); } catch (_) {}
      });
    }

    function safeParseJSON(str, fallback) {
      try { return JSON.parse(String(str || "")); } catch { return fallback; }
    }

    function getCart(keys) {
      for (const key of keys) {
        try {
          const raw = localStorage.getItem(key);
          if (!raw) continue;
          const data = JSON.parse(raw);
          if (Array.isArray(data)) return { key, data };
        } catch {}
      }
      return { key: keys[0], data: [] };
    }

    function setCart(key, cart) {
      try { localStorage.setItem(key, JSON.stringify(cart)); } catch {}
      try { if (key !== "fas_cart") localStorage.setItem("fas_cart", JSON.stringify(cart)); } catch {}
      try { if (key !== "cart") localStorage.setItem("cart", JSON.stringify(cart)); } catch {}
      try { window.cart = cart; } catch {}
    }

    function emitAll(cart) {
      try { window.dispatchEvent(new CustomEvent("cartUpdated", { detail: cart })); } catch {}
      try { window.dispatchEvent(new CustomEvent("cart-change", { detail: cart })); } catch {}
      try { window.dispatchEvent(new CustomEvent("cart:updated", { detail: cart })); } catch {}
    }

    // Add-to-cart delegation (compute latest config first)
    document.addEventListener("click", (evt) => {
      const target = evt.target;
      const el = target?.closest(".add-to-cart");
      if (!el) return;
      evt.preventDefault();
      evt.stopPropagation();

      // Compute latest configured price & selections
      const calc = updateConfiguredPriceUI();
      const selections = (calc && calc.cfg && Array.isArray(calc.cfg.selections)) ? calc.cfg.selections : [];
      const extra = (calc && calc.cfg && typeof calc.cfg.extra === 'number') ? calc.cfg.extra : 0;

      const ds = el.dataset || {};
      const basePrice = parseFloat(ds.productBasePrice || ds.productPrice || "0") || 0;
      const total = (typeof calc?.total === 'number') ? calc.total : (basePrice + extra);

      // Stable config signature for line dedup (same options -> same line)
      const signature = JSON.stringify(selections.slice().sort((a,b)=>{
        const ga=(a.group||'')+':' + (a.value||'');
        const gb=(b.group||'')+':' + (b.value||'');
        return ga.localeCompare(gb);
      }));

      const product = {
        id: ds.productId || "",
        name: ds.productName || "Item",
        price: total,                 // line item price reflects configured total
        basePrice: basePrice,         // keep base for reference
        extra: total - basePrice,     // summed deltas
        categories: safeParseJSON(ds.productCategories || "[]", []),
        options: selections,          // selected upgrades/options
        signature,                    // used to deduplicate
        qty: 1,
      };

      const { key, data } = getCart(["cart", "fas_cart"]);
      const cart = Array.isArray(data) ? data : [];

      // Find existing line with same product id AND same configuration signature
      const existing = cart.find((p) => p && p.id === product.id && p.signature === product.signature);
      if (existing) {
        existing.qty = (existing.qty || 1) + 1;
        // Always keep price in sync with current configuration
        existing.price = product.price;
        existing.extra = product.extra;
        existing.basePrice = product.basePrice;
        existing.options = product.options;
      } else {
        cart.push(product);
      }

      setCart(key, cart);
      emitAll(cart);
    }, true);

    // ---- Price calculator ----
    function normalizeDelta(v) {
      if (v == null) return 0;
      const s = String(v).replace(/[^0-9.+-]/g, '');
      const n = parseFloat(s);
      return isNaN(n) ? 0 : n;
    }

    function readConfiguredOptions() {
      const result = { selections: [], extra: 0 };

      // Prefer scoped lookup; fall back to global if needed
      let fields = document.querySelectorAll('#product-options [data-group]');
      if (!fields || fields.length === 0) {
        fields = document.querySelectorAll('[data-group]');
      }
      if (!fields || fields.length === 0) return result;

      fields.forEach((el) => {
        const tag = (el.tagName || '').toLowerCase();
        const group = el.getAttribute('data-group') || 'option';
        const baseDelta = normalizeDelta(el.dataset?.price ?? el.getAttribute('data-price'));

        if (tag === 'select') {
          const sel = el;
          const opt = sel.options[sel.selectedIndex];
          const delta = normalizeDelta(opt?.dataset?.price ?? opt?.getAttribute?.('data-price'));
          result.selections.push({ group, value: opt?.value || '', priceDelta: delta });
          result.extra += delta;
          return;
        }

        if (tag === 'input') {
          const type = el.getAttribute('type')?.toLowerCase() || 'text';
          if (type === 'radio' && el.checked) {
            result.selections.push({ group, value: el.value, priceDelta: baseDelta });
            result.extra += baseDelta;
            return;
          }
          if (type === 'checkbox' && el.checked) {
            result.selections.push({ group, value: el.value || 'on', priceDelta: baseDelta });
            result.extra += baseDelta;
            return;
          }
          const val = (el.value || '').toString().trim();
          if (val.length > 0) {
            result.selections.push({ group, value: val, priceDelta: baseDelta });
            result.extra += baseDelta;
          }
          return;
        }
      });
      return result;
    }

    function updateConfiguredPriceUI() {
      const __dbg = false;
      const btn = document.getElementById('add-to-cart-btn');
      const base = parseFloat(String(btn?.dataset?.productBasePrice || '0')) || 0;
      const cfg = readConfiguredOptions();
      const total = Math.max(0, base + (cfg.extra || 0));

      // Update any configured-price displays (support multiple targets)
      try {
        const nodes = document.querySelectorAll('#price-total, [data-price-target="configured"], .js-configured-price');
        nodes.forEach((n) => { n.textContent = `$ ${total.toFixed(2)}`; });
      } catch {}

      if (btn?.dataset) btn.dataset.productPrice = String(total);
      if (__dbg) {
        try { console.debug('[FAS] base=', base, 'extra=', cfg.extra, 'selections=', cfg.selections); } catch {}
      }
      return { total, cfg };
    }

    // Initialize strictly after full window load to avoid hydration races
    window.addEventListener('load', () => {
      scheduleUpdate(updateConfiguredPriceUI);
      setTimeout(() => scheduleUpdate(updateConfiguredPriceUI), 0);
      setTimeout(() => scheduleUpdate(updateConfiguredPriceUI), 200);
    });

    // Recalc on input/change
    function maybeRecalc(e) {
      const form = document.getElementById('product-options');
      if (form && form.contains(e.target)) scheduleUpdate(updateConfiguredPriceUI);
    }

    function attachListenersOnce() {
      if (!window.__fasPriceListeners) {
        window.__fasPriceListeners = true;
        ['input', 'change'].forEach((evt) => document.addEventListener(evt, maybeRecalc, true));
      }
    }

    if (document.readyState === 'complete') attachListenersOnce();
    else window.addEventListener('load', attachListenersOnce);

    // ‚úÖ Expose for debugging
    window.readConfiguredOptions = readConfiguredOptions;
    window.updateConfiguredPriceUI = updateConfiguredPriceUI;

  })();
</script>
