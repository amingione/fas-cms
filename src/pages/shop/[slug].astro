---
import BaseLayout from '../../layouts/BaseLayout.astro';
import {
  coercePriceToNumber,
  getProductBySlug,
  getRelatedProducts,
  getUpsellProducts,
  type Product
} from '../../lib/sanity-utils';
import PortableTextRenderer from "../../components/PortableTextRenderer.jsx";
import SlugCarousel from '@/components/SlugCarousel.astro';
import TrustStrip from '@/components/TrustStrip.astro';
import { inlineFieldAttrs, inlineObjectId } from '@lib/content';

export type KitItem = { item: string; quantity?: number };
export type VehicleCompat = { make?: string; model?: string; trim?: string };
export type SpecItem = { label?: string; name?: string; value?: string; detail?: string };
export type AttrItem = { key?: string; value?: string };

type FilterEntry =
  | string
  | {
      _id?: string;
      title?: string;
      label?: string;
      name?: string;
      value?: string;
      slug?: { current?: string } | string;
    };

export type ProductWithKit = Product & {
  includedInKit?: KitItem[];
  requiresPaintCode?: boolean;
  compatibleVehicles?: VehicleCompat[];
  tune?: { title?: string } | null;
  averageHorsepower?: number | null;
  specifications?: SpecItem[];
  attributes?: AttrItem[];
  filters?: FilterEntry[];
  categories?: { slug?: { current?: string } | string; title?: string }[];
  media?: any[];
};

const slugify = (str: string): string =>
  String(str ?? '')
    .trim()
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '');

const normalizeFilterSlug = (value: FilterEntry): string => {
  if (!value) return '';
  if (typeof value === 'string') return slugify(value);
  const candidates = [
    value.slug,
    typeof value.slug === 'object' && value.slug ? (value.slug as any).current : undefined,
    value.value,
    value.label,
    value.title,
    value.name,
    value._id
  ];
  for (const candidate of candidates) {
    if (typeof candidate === 'string' && candidate.trim()) return slugify(candidate);
  }
  try {
    const json = JSON.stringify(value);
    if (json && json !== '{}') return slugify(json);
  } catch {}
  return '';
};

const normalizeFilterLabel = (value: FilterEntry, fallbackSlug: string): string => {
  if (!value) return fallbackSlug;
  if (typeof value === 'string') return value.trim();
  const candidates = [
    value.title,
    value.label,
    value.name,
    value.value,
    value.slug,
    typeof value.slug === 'object' && value.slug ? (value.slug as any).current : undefined
  ];
  for (const candidate of candidates) {
    if (typeof candidate === 'string' && candidate.trim() && candidate !== '[object Object]') {
      return candidate.trim();
    }
  }
  return fallbackSlug
    .split(/[-_]/g)
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
    .join(' ');
};

const VEHICLE_DISCLAIMER_KEYWORDS = [
  'install service',
  'installation service',
  'install-only',
  'install only',
  'performance package',
  'performance packages',
  'power package',
  'power packages',
  'truck package',
  'truck packages'
];

const { slug } = Astro.params;

const toPlainText = (input: any): string => {
  if (!input) return '';
  if (typeof input === 'string') return input;
  if (Array.isArray(input)) {
    return input
      .map((block) => {
        if (typeof block === 'string') return block;
        if (block && typeof block === 'object') {
          if (Array.isArray((block as any).children)) {
            return (block as any).children
              .map((child: any) => (typeof child?.text === 'string' ? child.text : ''))
              .join('');
          }
          if (typeof (block as any).text === 'string') return (block as any).text;
        }
        return '';
      })
      .join(' ');
  }
  if (typeof input === 'object') {
    const values = ['text', 'content', 'description']
      .map((key) => (input as any)?.[key])
      .filter(Boolean);
    if (values.length) return toPlainText(values);
  }
  return '';
};

const collapseSpaces = (value: string): string => value.replace(/\s+/g, ' ').trim();

const ensureDisclaimerMessaging = (value: string, message: string): string => {
  const base = collapseSpaces(value || '');
  if (!message) return base;
  const normalized = base.toLowerCase();
  if (normalized.includes('vehicle not included') || normalized.includes('vehicle is not included')) {
    return base;
  }
  const merged = `${base ? `${base} ` : ''}${message}`;
  return collapseSpaces(merged);
};

const requestUrl = new URL(Astro.request.url);
const slugSegments = Array.isArray(slug) ? slug : typeof slug === 'string' ? [slug] : [];
const slugValue = slugSegments.filter((segment): segment is string => typeof segment === 'string').pop() ?? '';
const defaultCanonical = `${requestUrl.origin}/shop/${slugValue}`;

const ensureAbsoluteUrl = (value?: string | null): string | undefined => {
  if (!value) return undefined;
  if (/^https?:/i.test(value)) return value;
  try {
    return new URL(value, requestUrl.origin).toString();
  } catch {
    return undefined;
  }
};

// Fetch product data based on the slug
let product: ProductWithKit | null = null;
let relatedProducts: Product[] = [];
let upsellProducts: Product[] = [];
let options: any[] = [];
let addOns: any[] = [];
let customs: any[] = [];
let variationOptions: any[] = [];
let plainDescription: string = '';
let seoTitle: string = 'Product';
let seoDesc: string | undefined;
let seoCanon: string | undefined = defaultCanonical;
let seoOg: string | undefined;
let productPriceNumber: number | undefined;
try {
  if (typeof slug !== 'string') {
    throw new Error('Product slug is missing or invalid.');
  }
  product = await getProductBySlug(slug);
  if (!product) {
    throw new Error(`Product with slug "${slug}" not found.`);
  }

  const coercedBasePrice = coercePriceToNumber((product as any)?.price);
  productPriceNumber = typeof coercedBasePrice === 'number' ? coercedBasePrice : undefined;

  // Build inputs for auto-related / upsell
  const catIds = ((product as any).category || (product as any).categories || [])
    .map((c: any) => c?._id || c?._ref)
    .filter(Boolean);
  const tagFilters = Array.isArray((product as any).filters)
    ? (product as any).filters.map((entry: FilterEntry) => normalizeFilterSlug(entry)).filter(Boolean)
    : [];
  const basePrice = typeof productPriceNumber === 'number' ? productPriceNumber : undefined;

  // Auto-related and upsell
  relatedProducts = await getRelatedProducts(slug, catIds, tagFilters, 6);
  upsellProducts = await getUpsellProducts(slug, catIds, basePrice, 6);

  // ---- Options/Upgrades normalization (support multiple schema shapes) ----
  variationOptions = Array.isArray((product as any).variationOptions) ? (product as any).variationOptions : [];
  const optionsSources = [
    (product as any).options,
    (product as any).optionGroups,
    (product as any).variations
  ];
  options = (optionsSources.find((src) => Array.isArray(src) && src.length) || variationOptions || []) as any[];
  addOns  = ((product as any).addOns  || (product as any).upgrades     || (product as any).extras     || []) as any[];
  customs = ((product as any).customizations || (product as any).customOptions || []) as any[];
  // Normalize arrays and shapes to prevent null access during render
  options = Array.isArray(options)
    ? options
        .filter(Boolean)
        .map((g: any) => {
          if (!g || typeof g !== 'object') return null;

          // Sanity option schemas vary (values/items/sizes/etc.); pick the first populated shape
          const possibleArrays = [
            g.values,
            g.items,
            g.options,
            g.choices,
            g.sizes,
            g.variants,
            g.entries,
            g.variations,
            g.valueOptions
          ];

          const values = (possibleArrays.find((arr) => Array.isArray(arr) && arr.length) ?? []) as any[];

          return {
            ...g,
            key: g.key || g.name || g.title || 'option',
            title: g.title || g.name || 'Option',
            values
          };
        })
        .filter((group: any) => Array.isArray(group?.values) && group.values.length > 0)
    : [];

  if (options.length === 0 && Array.isArray(variationOptions) && variationOptions.length > 0) {
    options.push({
      key: 'variation',
      title: 'Options',
      values: variationOptions
    });
  }

  addOns = Array.isArray(addOns)
    ? addOns
        .filter(Boolean)
        .map((a: any) => {
          const label =
            (a?.label ||
              a?.title ||
              a?.name ||
              a?.value ||
              a?.id ||
              'Upgrade').toString();
          const value =
            (a?.value ||
              a?.label ||
              a?.title ||
              a?.name ||
              a?.id ||
              label).toString();
          const priceDelta =
            typeof a?.priceDelta === 'number'
              ? a.priceDelta
              : typeof a?.price === 'number'
                ? a.price
                : typeof a?.delta === 'number'
                  ? a.delta
                  : 0;
          return {
            ...a,
            label,
            value,
            priceDelta,
            group: (a?.group || 'upgrade').toString(),
            key: (a?.key || a?.slug || a?.id || label || 'upgrade').toString(),
          };
        })
    : [];
  customs = Array.isArray(customs) ? customs.filter(Boolean) : [];
  // Map Sanity customPaint object -> a custom text input with optional surcharge
  const cp = (product as any).customPaint;
  if (cp?.enabled) {
    customs = Array.isArray(customs) ? customs.slice() : [];
    customs.push({
      key: 'paintCode',
      name: 'paintCode',
      label: cp.codeLabel || 'OEM Paint Code',
      placeholder: '',
      group: 'customPaint',
      type: 'text',
      required: cp.paintCodeRequired === true,
      priceDelta: typeof cp.additionalPrice === 'number' ? cp.additionalPrice : 0,
      instructions: cp.instructions || ''
    });
  }
  // SEO helpers
  seoTitle = String((product as any)?.title || 'Product');
  plainDescription = collapseSpaces(
    toPlainText((product as any)?.shortDescription ?? (product as any)?.description ?? '')
  );
  seoCanon = defaultCanonical;
  seoOg = ensureAbsoluteUrl(
    (product as any)?.images?.[0]?.asset?.url || (product as any)?.images?.[0]?.url || undefined
  );
} catch (err) {
  console.error('❌ Failed to fetch product or similar products:', err);
  product = null;
}

const productNotFound = !product;
if (!product) {
  Astro.response.status = 404;
}

let productImages: string[] = [];
let metaKeywords = '';
let serviceDisclaimer = '';
let titleQualifier = '';
let priceValue: number | undefined;
let breadcrumbStructuredData: Record<string, any> | null = null;
let productStructuredData: Record<string, any> | null = null;
let isInstallOnly = false;
let isPerformanceParts = false;
let requiresVehicleDisclaimer = false;

const vehicleAvailabilityProperty = {
  '@type': 'PropertyValue',
  name: 'Vehicle availability',
  value: 'Vehicle not included with purchase'
};

if (product) {
  productImages = Array.isArray((product as any)?.images)
    ? (product as any).images
        .map((image: any) => ensureAbsoluteUrl(image?.asset?.url || image?.url))
        .filter((image: unknown): image is string => typeof image === 'string' && Boolean(image))
    : [];

  if (!seoOg && productImages.length > 0) {
    seoOg = productImages[0];
  }

  const metaKeywordTokens: string[] = [];
  const productTypeRaw = collapseSpaces(String((product as any)?.productType || ''));
  const categoryTitlesForTokens: string[] = [];
  if (Array.isArray((product as any)?.categories)) {
    (product as any).categories.forEach((category: any) => {
      if (category?.title) metaKeywordTokens.push(String(category.title));
      if (category?.title) categoryTitlesForTokens.push(String(category.title));
      if (category?.slug?.current) metaKeywordTokens.push(String(category.slug.current).replace(/[-_]/g, ' '));
      if (category?.slug?.current) {
        categoryTitlesForTokens.push(String(category.slug.current).replace(/[-_]/g, ' '));
      }
    });
  }

  const filterEntriesForKeywords: FilterEntry[] = Array.isArray((product as any)?.filters)
    ? (product as any).filters
    : [];
  const filterSlugsForFlags: string[] = [];
  filterEntriesForKeywords.forEach((entry) => {
    const entrySlug = normalizeFilterSlug(entry);
    if (entrySlug) filterSlugsForFlags.push(entrySlug);
    const labelValue = normalizeFilterLabel(entry, entrySlug);
    if (labelValue) metaKeywordTokens.push(labelValue);
  });

  const canonicalFilterSlugs: Set<string> = new Set<string>();
  filterSlugsForFlags.forEach((value) => {
    if (!value) return;
    canonicalFilterSlugs.add(value);
    canonicalFilterSlugs.add(value.replace(/_/g, '-'));
    canonicalFilterSlugs.add(value.replace(/[-_]/g, ''));
  });

  const shippingClassRaw = ((product as any)?.shippingClass || '').toString();
  const normalizedShippingClass = shippingClassRaw.toLowerCase().replace(/[^a-z0-9]/g, '');
  const computedInstallOnly =
    normalizedShippingClass.includes('installonly') ||
    canonicalFilterSlugs.has('installonly') ||
    canonicalFilterSlugs.has('install-only');
  const computedPerformanceParts =
    normalizedShippingClass === 'performanceparts' ||
    canonicalFilterSlugs.has('performanceparts') ||
    canonicalFilterSlugs.has('performance-parts');

  isInstallOnly = computedInstallOnly;
  isPerformanceParts = computedPerformanceParts;
  const normalizedCategoryTokens: string[] = categoryTitlesForTokens
    .map((value) => collapseSpaces(value).toLowerCase())
    .filter((value): value is string => Boolean(value));
  const productTypeSegments: string[] = productTypeRaw
    ? productTypeRaw
        .split('>')
        .map((segment: string) => collapseSpaces(segment).toLowerCase())
        .filter((segment): segment is string => Boolean(segment))
    : [];
  const normalizedFilterTokens: string[] = Array.from(canonicalFilterSlugs)
    .map((token: string) => collapseSpaces(token.replace(/[-_]/g, ' ')).toLowerCase())
    .filter((token): token is string => Boolean(token));

  requiresVehicleDisclaimer =
    isInstallOnly ||
    [...normalizedCategoryTokens, ...productTypeSegments, ...normalizedFilterTokens].some((token) =>
      VEHICLE_DISCLAIMER_KEYWORDS.some((keyword) => token.includes(keyword))
    );

  if (requiresVehicleDisclaimer) {
    serviceDisclaimer = isInstallOnly
      ? 'Professional installation service only. Vehicle not included.'
      : 'Performance package or components only. Vehicle not included.';
    titleQualifier = isInstallOnly
      ? 'Installation Service — Vehicle Not Included'
      : 'Performance Package — Vehicle Not Included';

    plainDescription = ensureDisclaimerMessaging(plainDescription, serviceDisclaimer);
    if (!seoTitle.toLowerCase().includes('vehicle not included')) {
      seoTitle = `${seoTitle} — ${titleQualifier}`;
    }
  } else {
    serviceDisclaimer = '';
    titleQualifier = '';
  }
  seoDesc = plainDescription ? plainDescription.slice(0, 160) : undefined;

  metaKeywords = Array.from(
    new Set(
      metaKeywordTokens
        .map((token) => collapseSpaces(String(token)))
        .filter((token) => token.length > 0)
    )
  ).join(', ');

  priceValue = typeof productPriceNumber === 'number' ? productPriceNumber : undefined;

  breadcrumbStructuredData = {
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    itemListElement: [
      { '@type': 'ListItem', position: 1, name: 'Home', item: requestUrl.origin },
      { '@type': 'ListItem', position: 2, name: 'Shop', item: `${requestUrl.origin}/shop` },
      { '@type': 'ListItem', position: 3, name: seoTitle, item: seoCanon }
    ]
  };

  const offerDetails: Record<string, any> = {
    '@type': 'Offer',
    priceCurrency: 'USD',
    availability: 'https://schema.org/InStock',
    url: seoCanon,
    itemCondition: 'https://schema.org/NewCondition'
  };
  if (typeof priceValue === 'number') {
    offerDetails.price = priceValue.toFixed(2);
  }
  if (isInstallOnly) {
    offerDetails.itemOffered = {
      '@type': 'Service',
      name: `${(product as any)?.title} Installation`,
      description: serviceDisclaimer
    };
  }

  const brandOrProvider = isInstallOnly
    ? { '@type': 'Organization', name: 'F.A.S. Motorsports' }
    : { '@type': 'Brand', name: 'F.A.S. Motorsports' };

  productStructuredData = {
    '@context': 'https://schema.org',
    '@type': isInstallOnly ? 'Service' : 'Product',
    name: (product as any)?.title,
    image: productImages,
    description: plainDescription || undefined,
    sku: (product as any)?.sku || undefined,
    url: seoCanon,
    offers: offerDetails
  };
  if (requiresVehicleDisclaimer) {
    productStructuredData.additionalProperty = [vehicleAvailabilityProperty];
  }

  if (isInstallOnly) {
    productStructuredData.serviceType = 'Automotive performance installation';
    productStructuredData.provider = brandOrProvider;
    productStructuredData.areaServed = 'US';
  } else {
    productStructuredData.brand = brandOrProvider;
    productStructuredData.category = metaKeywords || undefined;
  }
} else {
  seoTitle = 'Product Not Found';
  seoDesc = 'The product you are looking for may have been removed or is no longer available.';
  seoCanon = defaultCanonical;
  productImages = [];
  metaKeywords = '';
  serviceDisclaimer = '';
  titleQualifier = '';
  priceValue = undefined;
  breadcrumbStructuredData = {
    '@context': 'https://schema.org',
    '@type': 'BreadcrumbList',
    itemListElement: [
      { '@type': 'ListItem', position: 1, name: 'Home', item: requestUrl.origin },
      { '@type': 'ListItem', position: 2, name: 'Shop', item: `${requestUrl.origin}/shop` },
      { '@type': 'ListItem', position: 3, name: 'Product Not Found', item: seoCanon }
    ]
  };
  productStructuredData = null;
}
---

{!productNotFound ? (
  <BaseLayout hideBrandTag title={seoTitle} description={seoDesc} canonical={seoCanon} ogImage={seoOg}>
  <Fragment slot="head">
    <meta property="og:type" content="product" />
    {typeof priceValue === 'number' && (
      <>
        <meta property="product:price:amount" content={priceValue.toFixed(2)} />
        <meta property="product:price:currency" content="USD" />
      </>
    )}
    <meta property="product:availability" content="https://schema.org/InStock" />
    {metaKeywords && <meta name="keywords" content={metaKeywords} />}
    {breadcrumbStructuredData && (
      <script type="application/ld+json" set:html={JSON.stringify(breadcrumbStructuredData)} />
    )}
    {productStructuredData && (
      <script type="application/ld+json" set:html={JSON.stringify(productStructuredData)} />
    )}
  </Fragment>
  <div {...inlineObjectId((product as any)._id)}>
  <div class="container mx-auto px-4 py-10 text-white" style="padding-top: 80px;">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-10">
      <!-- LEFT: Sticky Image on desktop -->
      <div class="md:sticky md:top-28 flex justify-center items-start z-0 min-w-0" {...inlineFieldAttrs('images')}>
        <SlugCarousel
          images={(product as any).images?.map((img: any) => ({
            url: img?.asset?.url || '/logo/faslogochroma.webp',
            alt: img?.alt || (product as any).title
          })) || []}
        />
      </div>

      <!-- RIGHT: Title, price, short intro, add-to-cart, then accordion -->
      <div class="relative z-10 min-w-0 break-words text-sm">
        <h1 class="text-3xl font-ethno mb-3" {...inlineFieldAttrs('title')}>{(product as any).title}</h1>
        <h2 class="text-4xl text-accent
         font-mono mb-4" {...inlineFieldAttrs('price')}>
          {typeof priceValue === 'number' ? `$${priceValue.toFixed(2)}` : 'Price not available'}
        </h2>

        {serviceDisclaimer && (
          <div class="mb-4 rounded border border-yellow-500/40 bg-yellow-500/10 px-4 py-3 text-xs leading-relaxed text-yellow-100 shadow-sm">
            {serviceDisclaimer}
          </div>
        )}

        {(((options?.length || 0) + (addOns?.length || 0) + (customs?.length || 0)) > 0) && (
          <form id="product-options" class="mb-6 space-y-4">
            {/* Variant Options (radio/select) */}
            {Array.isArray(options) && options.length > 0 && options.filter(Boolean).map((group: any) => {
              const groupKey = (group?.key || group?.name || group?.title || 'option').toString();
              const values = Array.isArray(group?.values) ? group.values : (Array.isArray(group?.items) ? group.items : []);
              return (
                <div class="bg-black/20 rounded-none p-3 border border-white/20">
                  <div class="font-semibold mb-2">{group?.title || group?.name || 'Option'}</div>
                  {/* Prefer select if many values, else radios */}
                  {values.length > 4 ? (
                    <select
                      class="w-full border border-white/20 bg-black rounded px-2 py-2"
                      name={groupKey}
                      data-group={groupKey}
                    >
                      {values.map((v: any) => {
                        const val = typeof v === 'string' ? v : (v?.value || v?.name || v?.title || v?.label || '').toString();
                        const label = typeof v === 'string' ? v : (v?.label || v?.title || v?.name || v?.value || 'Choice');
                        const price = typeof v === 'object'
                          ? (typeof v?.priceDelta === 'number'
                              ? v.priceDelta
                              : (typeof v?.delta === 'number' ? v.delta : (typeof v?.price === 'number' ? v.price : 0)))
                          : 0;
                        return (
                          <option value={val} data-price={price.toString()} data-label={label}>
                            {label}
                            {price ? ` (+$${Number(price).toFixed(2)})` : ''}
                          </option>
                        );
                      })}
                    </select>
                  ) : (
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-2">
                      {values.map((v: any, i: number) => {
                        const val = typeof v === 'string' ? v : (v?.value || v?.name || v?.title || v?.label || '').toString();
                        const label = typeof v === 'string' ? v : (v?.label || v?.title || v?.name || v?.value || 'Choice');
                        const price = typeof v === 'object'
                          ? (typeof v?.priceDelta === 'number'
                              ? v.priceDelta
                              : (typeof v?.delta === 'number' ? v.delta : (typeof v?.price === 'number' ? v.price : 0)))
                          : 0;
                        return (
                          <label class="relative flex items-center gap-3 rounded-md border border-white/30 bg-black/40 px-3 py-2 text-white transition hover:border-white/50 hover:bg-black/55 focus-within:border-white/70 focus-within:ring-1 focus-within:ring-white/40 cursor-pointer">
                            <input
                              type="radio"
                              name={groupKey}
                              value={val}
                              data-group={groupKey}
                              data-price={price}
                              data-label={label}
                              checked={i === 0}
                              class="h-4 w-4 flex-shrink-0 accent-primary focus:ring-0"
                            />
                            <span class="flex-1 text-sm font-medium leading-snug text-white">{label}</span>
                            <span class="ml-3 text-xs font-semibold text-white/70">
                              {price ? `+$${Number(price).toFixed(2)}` : ''}
                            </span>
                          </label>
                        );
                      })}
                    </div>
                  )}
                </div>
              );
            })}

            {/* Add-ons (checkbox) */}
            {Array.isArray(addOns) && addOns.length > 0 && (
              <div class="bg-black/20 rounded-none p-3 border border-white/20">
                <div class="font-semibold mb-2">Optional Upgrades</div>
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {addOns.map((a: any) => (
                    <label class="relative flex items-center gap-3 rounded-md border border-white/30 bg-black/40 px-3 py-2 text-white transition hover:border-white/50 hover:bg-black/55 focus-within:border-white/70 focus-within:ring-1 focus-within:ring-white/40 cursor-pointer">
                      <input type="checkbox"
                        name={(a.key || 'upgrade').toString()}
                        value={(a.value || a.label || '').toString()}
                        data-group={(a.group || 'upgrade').toString()}
                        data-price={(typeof a.priceDelta === 'number' ? a.priceDelta : 0).toString()}
                        data-label={a.label}
                        checked={!!a.defaultSelected}
                        class="h-4 w-4 flex-shrink-0 accent-primary focus:ring-0"
                      />
                      <span class="flex-1 text-sm font-medium leading-snug text-white">{a.label}</span>
                      <span class="ml-3 text-xs font-semibold text-white/70">
                        {typeof a.priceDelta === 'number' && a.priceDelta !== 0
                          ? `+$${Number(a.priceDelta).toFixed(2)}`
                          : ''}
                      </span>
                    </label>
                  ))}
                </div>
              </div>
            )}

            {/* Custom fields (e.g., paint code with fixed surcharge) */}
            {Array.isArray(customs) && customs.length > 0 && customs.map((c: any) => (
              <div class="bg-black/20 rounded-none p-3 border border-white/20">
                <div class="font-semibold mb-2">{c.label || c.title || 'Custom Option'}</div>
                <input
                  type={c.type === 'number' ? 'number' : 'text'}
                  name={(c.key || c.name || 'custom').toString()}
                  placeholder={(c.placeholder || '').toString()}
                  class="w-full bg-black/30 border border-white/20 rounded px-2 py-2"
                  data-group={(c.group || 'custom').toString()}
                  data-price={(typeof c.priceDelta === 'number' ? c.priceDelta : (typeof c.price === 'number' ? c.price : (typeof c.delta === 'number' ? c.delta : 0))).toString()}
                  required={!!c.required}
                />
                {c.instructions && (
                  <div class="mt-1 text-xs opacity-80">{String(c.instructions)}</div>
                )}
                {(typeof c.priceDelta === 'number' || typeof c.price === 'number' || typeof c.delta === 'number') && (
                  <div class="mt-1 text-xs opacity-70">Surcharge: +${Number(c.priceDelta ?? c.price ?? c.delta ?? 0).toFixed(2)}</div>
                )}
              </div>
            ))}

            {/* Live price */}
            <div class="flex items-center justify-between bg-black/20 rounded-none p-3 border border-white/20">
              <span class="text-sm opacity-80">Configured Price</span>
              <span id="price-total" class="text-lg font-bold">$ {(typeof (product as any).price === 'number' ? (product as any).price.toFixed(2) : '0.00')}</span>
            </div>
          </form>
        )}

        <!-- Short intro (truncated) -->
        <div class="break-words" {...inlineFieldAttrs('shortDescription')}>
          <PortableTextRenderer value={product?.shortDescription ?? []} />
        </div>

        <!-- Add to Cart Button -->
        <button
          id="add-to-cart-btn"
          type="button"
          class="add-to-cart inline-flex items-center gap-2 border border-white/30 px-4 py-2 rounded-full hover:bg-primary hover:text-accent transition relative z-10 pointer-events-auto"
          data-product-id={(product as any)._id}
          data-product-name={(product as any).title}
          data-product-price={typeof priceValue === 'number' ? priceValue.toFixed(2) : undefined}
          data-product-base-price={typeof priceValue === 'number' ? priceValue.toFixed(2) : undefined}
        data-product-image={(product as any).images?.[0]?.asset?.url || (product as any).images?.[0]?.url || ''}
        data-product-categories={`${JSON.stringify((product as any).categories || [])}`}
        data-product-shipping-class={(product as any).shippingClass || ''}
        data-product-install-only={String(isInstallOnly)}
        data-product-performance-parts={String(isPerformanceParts)}
        data-product-href={`/shop/${slug}`}
        >
          <!-- bag icon -->
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
            <path d="M8 7a4 4 0 118 0h3a1 1 0 011 1v12a2 2 0 01-2 2H6a2 2 0 01-2-2V8a1 1 0 011-1h3zm2 0a2 2 0 104 0H10z"/>
          </svg>
          <span class="text-sm font-kwajong">Add to Cart</span>
        </button>

        <!-- Trust strip -->
        <div class="mt-6">
          <TrustStrip compact />
        </div>

        <!-- Optional media strip (images/videos/files from Sanity "media" field) -->
        {Array.isArray((product as any)?.media) && (product as any).media.length > 0 && (
          <section class="mt-6">
            <h3 class="font-semibold mb-2">Media</h3>
            <div class="flex gap-3 overflow-x-auto pb-2">
              {(product as any).media.map((m: any) => {
                try {
                  const title = String(m?.title || '').trim();
                  const alt = String(m?.alt || title || (product as any)?.title || 'Media');
                  const assetUrl = (m?.asset && (m.asset.url || (m.asset as any)?.asset?.url)) || '';
                  const directUrl = String(m?.url || '') || '';
                  const url = assetUrl || directUrl;
                  const playbackId = String(m?.muxPlaybackId || (m?.asset && (m.asset as any)?.playbackId) || '').trim();
                  let yt = String(m?.youTubeId || m?.youtubeId || '').trim();

                  // Heuristics
                  const isImage = /\.(?:jpe?g|png|gif|webp|avif|svg)(?:\?.*)?$/i.test(url);
                  const isVideoFile = /\.(?:mp4|webm|ogg)(?:\?.*)?$/i.test(url);

                  // If a YouTube link is provided via url, extract the ID
                  if (!yt && /(?:youtu\.be\/.+|youtube\.com\/.+)/i.test(url)) {
                    try {
                      const u = new URL(url, typeof window !== 'undefined' ? window.location.origin : 'https://example.com');
                      if (/youtu\.be/i.test(u.hostname)) {
                        yt = u.pathname.replace(/^\//, '').split('/')[0];
                      } else if (/youtube\.com/i.test(u.hostname)) {
                        if (u.pathname.includes('/embed/')) yt = u.pathname.split('/embed/')[1]?.split(/[?&#]/)[0] || '';
                        else yt = u.searchParams.get('v') || '';
                      }
                    } catch {}
                  }

                  if (playbackId) {
                    const muxMp4 = `https://stream.mux.com/${playbackId}/medium.mp4`;
                    return (
                      <video controls preload="metadata" class="w-64 h-36 rounded border border-white/20 bg-black/30" src={muxMp4}></video>
                    );
                  }
                  if (yt) {
                    const src = `https://www.youtube.com/embed/${yt}`;
                    return (
                      <iframe
                        src={src}
                        title={alt}
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowfullscreen
                        class="w-64 h-36 rounded border border-white/20 bg-black/30"
                      />
                    );
                  }
                  if (isVideoFile) {
                    return (
                      <video controls preload="metadata" class="w-64 h-36 rounded border border-white/20 bg-black/30" src={url}></video>
                    );
                  }
                  if (isImage) {
                    return (
                      <img src={url} alt={alt} class="w-64 h-36 object-cover rounded border border-white/20 bg-black/30" loading="lazy" />
                    );
                  }
                  if (url) {
                    return (
                      <a href={url} target="_blank" rel="noopener" class="w-64 h-36 grid place-items-center rounded border border-white/20 bg-black/20 text-sm underline">
                        View media
                      </a>
                    );
                  }
                } catch {}
                return null;
              })}
            </div>
          </section>
        )}

        <!-- Accordion -->
        <div class="mt-8 divide-y divide-white/80 border border-white/20 rounded-none overflow-hidden">
          <!-- Details / Full Description -->
          <details class="group" id="acc-details">
            <summary class="cursor-pointer select-none bg-black/30 px-4 py-3 font-ethno text-base md:text-lg flex items-center justify-between">
              <span>Product Details</span>
              <span class="transition-transform group-open:rotate-180">▾</span>
            </summary>
            <div class="px-4 py-4 text-white/90 font-arial leading-relaxed whitespace-pre-line break-words">
              <div {...inlineFieldAttrs('description')}>
                <PortableTextRenderer value={product?.description ?? []} />
              </div>
              {/* Specifications Table */}
              {Array.isArray(product?.specifications) && product?.specifications.length > 0 && (
                <div class="mt-6">
                  <h3 class="font-bold text-lg mb-2">Specifications</h3>
                  <table class="table-auto border border-gray-300 w-full text-left text-sm">
                    <tbody>
                      {(product?.specifications ?? []).map((spec: { label?: string; key?: string; value?: string }) => (
                        <tr>
                          <td class="border px-2 py-1">{spec.label || spec.key}</td>
                          <td class="border px-2 py-1">{spec.value}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
              {/* Attributes Table */}
              {Array.isArray(product?.attributes) && product?.attributes.length > 0 && (
                <div class="mt-6">
                  <h3 class="font-bold text-lg mb-2">Attributes</h3>
                  <table class="table-auto border border-gray-300 w-full text-left text-sm">
                    <tbody>
                      {(product?.attributes ?? []).map((attr: { name?: string; value?: string }) => (
                        <tr>
                          <td class="border px-2 py-1">{attr.name}</td>
                          <td class="border px-2 py-1">{attr.value}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
              {/* Kit Includes Table */}
              {Array.isArray(product?.includedInKit) && product?.includedInKit.length > 0 && (
                <div class="mt-6">
                  <h3 class="font-bold text-lg mb-2">Included in Kit</h3>
                  <table class="table-auto border border-gray-300 w-full text-left text-sm">
                    <tbody>
                      {(product?.includedInKit ?? []).map((kit: KitItem, idx: number) => (
                        <tr>
                          <td class="border px-2 py-1">{kit.item ?? 'Item'}</td>
                          <td class="border px-2 py-1">{kit.quantity ?? 1}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </details>

          {product?.importantNotes && (
            <div class="mt-6 p-4 border border-red-500 bg-slate-400 text-primary rounded" {...inlineFieldAttrs('importantNotes')}>
              <h3 class="font-bold text-lg mb-2 text-primary">Important Notes</h3>
              <PortableTextRenderer value={product?.importantNotes ?? []} />
            </div>
          )}


          <!-- Specifications (removed, now handled in Product Details accordion) -->

          <!-- Compatibility -->
          {(Array.isArray((product as any).compatibleVehicles) && (product as any).compatibleVehicles.length > 0) || (product as any).tune || (product as any).averageHorsepower ? (
            <details class="group">
              <summary class="cursor-pointer select-none bg-black/30 px-4 py-3 font-ethno text-lg flex items-center justify-between">
                <span>Compatibility</span>
                <span class="transition-transform group-open:rotate-180">▾</span>
              </summary>
              <div class="px-4 py-4 space-y-4">
                {Array.isArray((product as any).compatibleVehicles) && (product as any).compatibleVehicles.length > 0 && (
                  <div>
                    <div class="font-semibold mb-2">Compatible Vehicles</div>
                    <ul class="list-disc list-inside text-white/90">
                      {(product as any).compatibleVehicles.map((v: { make?: string; model?: string; trim?: string }) => (
                        <li>{[v.make, v.model, v.trim].filter(Boolean).join(' ')}</li>
                      ))}
                    </ul>
                  </div>
                )}
                {(product as any).tune && (
                  <div class="text-white/90"><span class="font-semibold">Tune:</span> {(product as any).tune.title}</div>
                )}
                {typeof (product as any).averageHorsepower === 'number' && (
                  <div class="text-white/90"><span class="font-semibold">Average Horsepower:</span> {(product as any).averageHorsepower}</div>
                )}
              </div>
            </details>
          ) : null}

          {/* Categories & Filters (inline minimal) */}
        {/* Inline Categories & Filters at the bottom, centered */}
        {(((product as any).categories?.length ?? 0) > 0) || (((product as any).filters?.length ?? 0) > 0) ? (
          <div class="mt-8 text-left text-sm text-white/70">
            {(product as any).categories?.length > 0 && (
              <div class="mb-1">
                <span class="font-semibold text-white">Categories:</span>{' '}
                {(product as any).categories.map((c: any, idx: number) => (
                  <>
                    <a href={`/shop?categorySlug=${c.slug?.current || c.slug}`} class="hover:underline">
                      {c.title}
                    </a>
                    {idx < (product as any).categories.length - 1 ? ', ' : ''}
                  </>
                ))}
              </div>
            )}
            {(product as any).filters?.length > 0 && (
              <div>
                <span class="font-semibold text-white">Filters:</span>{' '}
                {(() => {
                  const filterEntries: FilterEntry[] = Array.isArray((product as any).filters)
                    ? (product as any).filters
                    : [];
                  const titleEntries: FilterEntry[] = Array.isArray((product as any).filterTitles)
                    ? (product as any).filterTitles
                    : filterEntries;
                  const pairs = filterEntries
                    .map((entry, idx) => {
                      const slug = normalizeFilterSlug(entry);
                      if (!slug) return null;
                      const label = normalizeFilterLabel(titleEntries[idx] ?? entry, slug);
                      if (!label) return null;
                      return { slug, label };
                    })
                    .filter(Boolean);

                  return pairs.map((item, idx) => (
                    item ? (
                      <>
                        <a href={`/shop?filters=${encodeURIComponent(item.slug)}`} class="hover:underline capitalize">
                          {item.label}
                        </a>
                        {idx < pairs.length - 1 ? ', ' : ''}
                      </>
                    ) : null
                  ));
                })()}
              </div>
            )}
          </div>
        ) : null}
        </div>
      </div>
    </div>

    <!-- Related Products -->
{Array.isArray(relatedProducts) && relatedProducts.length > 0 && (
  <div class="mt-16">
    <h2 class="text-2xl text-accent font-ethno mb-6">Related Products</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {(relatedProducts || [])
        .filter((p: any) => p && p.slug && (p.slug.current || typeof p.slug === 'string'))
        .map((p: any) => {
          const s = (p.slug && (p.slug.current || p.slug)) as string;
          if (!s) return null;
          const img = p?.images?.[0]?.asset?.url || '/logo/faslogochroma.webp';
          const alt = p?.images?.[0]?.alt || p?.title || 'Product image';
          const price =
            typeof p?.price === 'number' ? `$${p.price.toFixed(2)}` : '';
          return (
            <>
              {p.slug?.current ? (
                <a href={`/shop/${p.slug.current}`} class="block bg-black/10 rounded-lg shadow-md hover:shadow-lg transition p-4">
                  <div class="w-full aspect-square bg-black/20 rounded-md mb-4 overflow-hidden grid place-items-center">
                    <img src={img} alt={alt} class="max-w-full max-h-full object-contain" />
                  </div>
                  <h3 class="text-lg font-semibold">{p?.title || 'Untitled product'}</h3>
                  <p class="text-primary font-bold">{price}</p>
                </a>
              ) : (
                <span class="block bg-black/10 rounded-lg shadow-md transition p-4">
                  <div class="w-full aspect-square bg-black/20 rounded-md mb-4 overflow-hidden grid place-items-center">
                    <img src={img} alt={alt} class="max-w-full max-h-full object-contain" />
                  </div>
                  <h3 class="text-lg font-semibold">{p?.title || 'Untitled product'}</h3>
                  <p class="text-primary font-bold">{price}</p>
                </span>
              )}
            </>
          );
        })}
    </div>
  </div>
)}

<!-- Recommended Upgrades / Upsell -->
{Array.isArray(upsellProducts) && upsellProducts.length > 0 && (
  <div class="mt-12">
    <h2 class="text-2xl text-accent font-ethno mb-6">Recommended Upgrades</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {(upsellProducts || [])
        .filter((p: any) => p && p.slug && (p.slug.current || typeof p.slug === 'string'))
        .map((p: any) => {
          const s = (p.slug && (p.slug.current || p.slug)) as string;
          if (!s) return null;
          const img = p?.images?.[0]?.asset?.url || '/logo/faslogochroma.webp';
          const alt = p?.images?.[0]?.alt || p?.title || 'Product image';
          const price =
            typeof p?.price === 'number' ? `$${p.price.toFixed(2)}` : '';
          return (
            <>
              {p.slug?.current ? (
                <a href={`/shop/${p.slug.current}`} class="block bg-black/10 rounded-lg shadow-md hover:shadow-lg transition p-4">
                  <div class="w-full aspect-square bg-black/20 rounded-md mb-4 overflow-hidden grid place-items-center">
                    <img src={img} alt={alt} class="max-w-full max-h-full object-contain" />
                  </div>
                  <h3 class="text-lg font-semibold">{p?.title || 'Untitled product'}</h3>
                  <p class="text-primary font-bold">{price}</p>
                </a>
              ) : (
                <span class="block bg-black/10 rounded-lg shadow-md transition p-4">
                  <div class="w-full aspect-square bg-black/20 rounded-md mb-4 overflow-hidden grid place-items-center">
                    <img src={img} alt={alt} class="max-w-full max-h-full object-contain" />
                  </div>
                  <h3 class="text-lg font-semibold">{p?.title || 'Untitled product'}</h3>
                  <p class="text-primary font-bold">{price}</p>
                </span>
              )}
            </>
          );
        })}
    </div>
  </div>
)}
  </div>
  </div>

  
  </BaseLayout>
<!-- Sticky mobile add-to-cart bar -->
<div id="mobile-add-to-cart" class="md:hidden fixed bottom-0 left-0 right-0 z-[60] bg-black/90 border-t border-white/20 backdrop-blur px-3 py-2 flex items-center justify-between">
  <div class="text-white/90 text-sm">
    <span class="text-white/70">Total:</span>
    <span id="sticky-price" class="font-bold">$ {(typeof (product as any).price === 'number' ? (product as any).price.toFixed(2) : '0.00')}</span>
  </div>
  <button
    type="button"
    class="add-to-cart inline-flex items-center gap-2 bg-primary text-accent font-ethno px-4 py-2 rounded"
    data-product-id={(product as any)._id}
    data-product-name={(product as any).title}
    data-product-price={typeof priceValue === 'number' ? priceValue.toFixed(2) : undefined}
    data-product-base-price={typeof priceValue === 'number' ? priceValue.toFixed(2) : undefined}
    data-product-image={(product as any).images?.[0]?.asset?.url || (product as any).images?.[0]?.url || ''}
    data-product-categories={`${JSON.stringify((product as any).categories || [])}`}
    data-product-shipping-class={(product as any).shippingClass || ''}
    data-product-install-only={String(
      ((product as any).shippingClass || '').toString().toLowerCase().replace(/[^a-z]/g, '') ===
        'installonly'
    )}
    data-product-href={`/shop/${slug}`}
  >
    Add to Cart
  </button>
</div>

<script>
  // Keep sticky price in sync
  (function(){
    try {
      const sticky = document.getElementById('sticky-price');
      const main = document.getElementById('price-total');
      if (!sticky || !main) return;
      const sync = () => { sticky.textContent = main.textContent; };
      const mo = new MutationObserver(sync);
      mo.observe(main, { childList: true, characterData: true, subtree: true });
      sync();
    } catch {}
  })();

  // Hide sticky bar when cart or menu drawer is open
  (function(){
    try {
      const bar = document.getElementById('mobile-add-to-cart');
      if (!bar) return;
      const hide = () => bar.classList.add('hidden');
      const show = () => bar.classList.remove('hidden');
      window.addEventListener('cart:open', hide);
      window.addEventListener('cart:close', show);
      window.addEventListener('menu:open', hide);
      window.addEventListener('menu:close', show);
    } catch {}
  })();
</script>
) : (
  <BaseLayout title={seoTitle} description={seoDesc} canonical={seoCanon} noindex>
    {breadcrumbStructuredData && (
      <Fragment slot="head">
        <script type="application/ld+json" set:html={JSON.stringify(breadcrumbStructuredData)} />
      </Fragment>
    )}
    <section class="mx-auto flex min-h-[60vh] max-w-3xl flex-col items-center justify-center px-4 py-24 text-center text-white">
      <h1 class="text-4xl font-ethno md:text-5xl">Product not found</h1>
      <p class="mt-4 text-sm text-white/80 md:text-base">
        The product you are looking for may have been removed, renamed, or is temporarily unavailable.
      </p>
      <a
        class="mt-8 inline-flex items-center rounded-full border border-white/30 px-5 py-2 text-sm uppercase tracking-wide transition hover:bg-primary hover:text-accent"
        href="/shop"
      >
        Browse all products
      </a>
    </section>
  </BaseLayout>
)}
  <style>
    /* Ensure transparent overlays don’t block clicks on this product page */
    [class~="absolute"][class~="inset-0"][class*="bg-black/10"][class~="z-0"] { pointer-events: none; }

    /* Make sure the right column (options) sits above the sticky image on desktop */
    @media (min-width: 768px) {
      .md\:sticky { z-index: 0; }
    }

    /* Raise interactive panels/forms */
    #product-options, #acc-details { position: relative; z-index: 10; }

    /* Safety: any full-bleed overlay divs should not eat clicks */
    [class~="absolute"][class~="inset-0"] { pointer-events: none; }
  </style>
  <script>
  // @ts-nocheck
  (function () {
    if (window.__fasPriceInit) return; // prevent double-init on HMR/nav
    window.__fasPriceInit = true;

    let __rafPending = false;
    function scheduleUpdate(fn) {
      if (__rafPending) return;
      __rafPending = true;
      requestAnimationFrame(() => {
        __rafPending = false;
        try { fn(); } catch (_) {}
      });
    }

    function safeParseJSON(str, fallback) {
      try { return JSON.parse(String(str || "")); } catch { return fallback; }
    }

    const CART_KEY = 'fas_cart_v1';

    function getCart() {
      try {
        const raw = localStorage.getItem(CART_KEY);
        const parsed = raw ? JSON.parse(raw) : null;
        if (parsed && Array.isArray(parsed.items)) return parsed;
        return { items: [] };
      } catch { return { items: [] }; }
    }

    function setCart(cart) {
      try { localStorage.setItem(CART_KEY, JSON.stringify(cart)); } catch {}
      try { window.cart = cart; } catch {}
    }

    function emitCartChanged(cart) {
      try { window.dispatchEvent(new CustomEvent('cart:changed', { detail: { cart } })); } catch {}
    }

    function prefersDesktopOverlay() {
      try {
        const hover = window.matchMedia && window.matchMedia('(hover: hover)').matches;
        const coarse = window.matchMedia && window.matchMedia('(pointer: coarse)').matches;
        if (hover && !coarse) return true;
        if (hover && coarse === undefined) return true;
        const maxTouch = navigator.maxTouchPoints || 0;
        if (coarse) return false;
        return maxTouch === 0;
      } catch (error) {
        void error;
        return false;
      }
    }

    // Add-to-cart delegation (compute latest config first)
    document.addEventListener("click", (evt) => {
      const target = evt.target;
      const el = target?.closest(".add-to-cart");
      if (!el) return;
      evt.preventDefault();
      evt.stopPropagation();

      // Compute latest configured price & selections
      const calc = updateConfiguredPriceUI();
      const selections = (calc && calc.cfg && Array.isArray(calc.cfg.selections)) ? calc.cfg.selections : [];
      const extra = (calc && calc.cfg && typeof calc.cfg.extra === 'number') ? calc.cfg.extra : 0;

      const ds = el.dataset || {};
      const basePrice = parseFloat(ds.productBasePrice || ds.productPrice || "0") || 0;
      const total = (typeof calc?.total === 'number') ? calc.total : (basePrice + extra);

      const shippingClassRaw = (ds.productShippingClass || '').toString();
      const normalizedShippingClass = shippingClassRaw.toLowerCase().replace(/[^a-z]/g, '');
      const installOnlyFlag =
        String(ds.productInstallOnly || '').toLowerCase() === 'true' ||
        normalizedShippingClass.includes('installonly');

      // Stable config signature for line dedup (same options -> same line)
      const signature = JSON.stringify(selections.slice().sort((a,b)=>{
        const ga=(a.group||'')+':' + (a.value||'');
        const gb=(b.group||'')+':' + (b.value||'');
        return ga.localeCompare(gb);
      }));

      const optionsMap = Object.create(null);
      try {
        selections.forEach((s) => {
          const group = String(s.group || 'option');
          const label = s?.label ?? s?.value;
          const display = String(label ?? '').trim() || 'Selected';
          if (optionsMap[group]) {
            if (!optionsMap[group].includes(display)) {
              optionsMap[group] = `${optionsMap[group]}, ${display}`;
            }
          } else {
            optionsMap[group] = display;
          }
        });
      } catch {}
      const composedId = `${ds.productId || ''}::${signature}`;

      const product = {
        id: composedId,
        name: ds.productName || "Item",
        price: total,                 // line item price reflects configured total
        basePrice: basePrice,         // keep base for reference
        extra: total - basePrice,     // summed deltas
        image: ds.productImage || '',
        options: optionsMap,          // selected upgrades/options as map
        selections,                  // raw selection details for downstream use
        signature,                    // keep signature for debug
        quantity: 1,
        installOnly: installOnlyFlag,
        shippingClass: shippingClassRaw,
        productUrl: ds.productHref || undefined
      };
      const cart = getCart();
      const items = cart.items || [];
      const existing = items.find((p) => p && p.id === product.id);
      if (existing) {
        existing.quantity = (existing.quantity || 1) + 1;
        existing.price = product.price;
        existing.basePrice = product.basePrice;
        existing.extra = product.extra;
        existing.options = product.options;
        existing.installOnly = installOnlyFlag;
        existing.shippingClass = shippingClassRaw;
      } else {
        items.push(product);
      }
      cart.items = items;
      setCart(cart);
      emitCartChanged(cart);

      const eventName = prefersDesktopOverlay() ? 'open-desktop-cart' : 'open-cart';
      try { window.dispatchEvent(new Event(eventName)); } catch (error) { void error; }
    }, true);

    // ---- Price calculator ----
    function normalizeDelta(v) {
      if (v == null) return 0;
      const s = String(v).replace(/[^0-9.+-]/g, '');
      const n = parseFloat(s);
      return isNaN(n) ? 0 : n;
    }

    function readConfiguredOptions() {
      const result = { selections: [], extra: 0 };
      const form = document.getElementById('product-options');
      if (!form) return result;

      const handled = new Set();
      const elements = form.querySelectorAll('[data-group]');

      const addSelection = (group, value, label, delta) => {
        const normalizedGroup = group || 'option';
        const normalizedValue = value != null ? String(value) : '';
        const normalizedLabel = label != null ? String(label) : normalizedValue;
        const numericDelta = Number.isFinite(delta) ? delta : 0;
        result.selections.push({
          group: normalizedGroup,
          value: normalizedValue,
          label: normalizedLabel,
          priceDelta: numericDelta
        });
        result.extra += numericDelta;
      };

      const escapeForSelector = (value) => {
        try {
          return CSS?.escape ? CSS.escape(value) : value.replace(/([\[\]"'\\])/g, '\\$1');
        } catch {
          return value.replace(/([\[\]"'\\])/g, '\\$1');
        }
      };

      elements.forEach((node) => {
        if (handled.has(node)) return;
        const tag = (node.tagName || '').toLowerCase();
        const group = node.getAttribute('data-group') || node.getAttribute('name') || 'option';

        if (tag === 'select') {
          const sel = node;
          const opt = sel.options[sel.selectedIndex];
          if (opt) {
            const value = opt.value || '';
            const label = opt.dataset?.label || opt.text || value;
            const delta = normalizeDelta(opt.dataset?.price ?? opt.getAttribute('data-price'));
            addSelection(group, value, label, delta);
          }
          handled.add(node);
          return;
        }

        if (tag === 'input') {
          const input = node;
          const type = (input.type || 'text').toLowerCase();
          const baseDelta = normalizeDelta(input.dataset?.price ?? input.getAttribute('data-price'));

          if (type === 'radio') {
            const name = input.name || group;
            const selector = `input[type="radio"][name="${escapeForSelector(name)}"]`;
            const radios = form.querySelectorAll(selector);
            radios.forEach((radioEl) => {
              const radio = radioEl;
              handled.add(radio);
              if (radio.checked) {
                const value = radio.value || '';
                const label = radio.dataset?.label || value;
                const delta = normalizeDelta(radio.dataset?.price ?? radio.getAttribute('data-price'));
                addSelection(group, value, label, delta);
              }
            });
            return;
          }

          if (type === 'checkbox') {
            handled.add(input);
            if (input.checked) {
              const value = input.value || 'on';
              const label = input.dataset?.label || value;
              addSelection(group, value, label, baseDelta);
            }
            return;
          }

          const val = (input.value || '').toString().trim();
          if (val.length > 0) {
            const label = input.dataset?.label || val;
            addSelection(group, val, label, baseDelta);
          }
          handled.add(input);
          return;
        }
      });

      return result;
    }

    function updateConfiguredPriceUI() {
      const __dbg = false;
      const btn = document.getElementById('add-to-cart-btn');
      const base = parseFloat(String(btn?.dataset?.productBasePrice || '0')) || 0;
      const cfg = readConfiguredOptions();
      const total = Math.max(0, base + (cfg.extra || 0));

      // Update any configured-price displays (support multiple targets)
      try {
        const nodes = document.querySelectorAll('#price-total, [data-price-target="configured"], .js-configured-price');
        nodes.forEach((n) => { n.textContent = `$ ${total.toFixed(2)}`; });
      } catch {}

      if (btn?.dataset) btn.dataset.productPrice = String(total);
      if (__dbg) {
        try { console.debug('[FAS] base=', base, 'extra=', cfg.extra, 'selections=', cfg.selections); } catch {}
      }
      return { total, cfg };
    }

    // Initialize strictly after full window load to avoid hydration races
    window.addEventListener('load', () => {
      scheduleUpdate(updateConfiguredPriceUI);
      setTimeout(() => scheduleUpdate(updateConfiguredPriceUI), 0);
      setTimeout(() => scheduleUpdate(updateConfiguredPriceUI), 200);
    });

    // Recalc on input/change
    function maybeRecalc(e) {
      const form = document.getElementById('product-options');
      if (form && form.contains(e.target)) scheduleUpdate(updateConfiguredPriceUI);
    }

    function attachListenersOnce() {
      if (!window.__fasPriceListeners) {
        window.__fasPriceListeners = true;
        ['input', 'change'].forEach((evt) => document.addEventListener(evt, maybeRecalc, true));
      }
    }

    if (document.readyState === 'complete') attachListenersOnce();
    else window.addEventListener('load', attachListenersOnce);

    // ✅ Expose for debugging
    window.readConfiguredOptions = readConfiguredOptions;
    window.updateConfiguredPriceUI = updateConfiguredPriceUI;

  })();
</script>
