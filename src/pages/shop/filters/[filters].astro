---
import ProductCard from "@/components/storefront/ProductCardLite.astro";
import { sanityClient as client } from "@/lib/sanityClient";
import BaseLayout from "@/layouts/BaseLayout.astro";

interface Props { params: { filter: string } }
const { params } = Astro as unknown as Props;

// Get the filter document by slug
const filterQuery = /* groq */ `
*[_type == "filter" && slug.current == $slug][0]{
  _id, title, description
}
`;
const filter = await client.fetch(filterQuery, { slug: params.filter });

// Fetch products that reference this filter
const productsQuery = /* groq */ `
*[_type == "product" && references($filterId)] | order(_createdAt desc){
  _id,
  title,
  "slug": slug.current,
  "image": coalesce(images[0].asset->url, mainImage.asset->url),
  price,
  excerpt
}
`;
interface ProductItem {
  _id: string;
  title: string;
  slug: string;
  image?: string;
  price?: number;
  excerpt?: string;
}

const products: ProductItem[] = filter
  ? await client.fetch<ProductItem[]>(productsQuery, { catId: filter._id })
  : [];

// Adapt to ProductCardLite.astro expected props
type LiteAsset = { url: string };
type LiteImage = { asset: LiteAsset };
type LiteSlug = { current: string };
type LiteProduct = {
  _id: string;
  title?: string;
  slug?: LiteSlug | string;
  price?: number;
  images?: LiteImage[];
};

const liteProducts: LiteProduct[] = products.map((p) => ({
  _id: p._id,
  title: p.title,
  slug: { current: p.slug } as LiteSlug,
  price: p.price,
  images: p.image ? [{ asset: { url: p.image } }] : []
}));
---
<BaseLayout>
  <div class="max-w-7xl mx-auto px-4 md:px-6 py-12">
    <nav class="mb-6" aria-label="Breadcrumb">
      <ol class="flex items-center">
      </ol>
{!filter && (
  <section class="py-16 text-center">
    <h1 class="text-3xl font-semibold">Filter not found</h1>
  </section>
)}

{filter && (
  <>
    <header class="mb-8">
      <h1 class="text-3xl md:text-4xl font-semibold">{filter.title}</h1>
      {filter.description && <p class="mt-2 text-sm opacity-80">{filter.description}</p>}
    </header>

    <section class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
      {liteProducts.map((p) => (
        <ProductCard key={p._id} product={p} productImage={p.images?.[0]} />
      ))}
    </section>
  </>
)}
