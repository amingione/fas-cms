---
import BaseLayout from '../../layouts/BaseLayout.astro';

export const prerender = false;
---

<BaseLayout>
  <section class="max-w-7xl mx-auto px-6 py-12 text-white space-y-10">
    <h1 class="text-3xl font-ethno font-bold text-accent">Shop</h1>

    <!-- Category Tabs -->
    <div id="category-tabs" class="flex flex-wrap gap-3 text-sm font-captain">
      <button class="tab active" data-category="">All</button>
      <button class="tab" data-category="Charger">Charger</button>
      <button class="tab" data-category="Challenger">Challenger</button>
      <button class="tab" data-category="Trackhawk">Trackhawk</button>
      <button class="tab" data-category="TRX">TRX</button>
    </div>

    <!-- Sort -->
    <div class="flex items-center gap-4 text-sm font-captain">
      <label for="sort" class="text-primary">Sort:</label>
      <select id="sort" class="bg-black border border-gray-700 px-3 py-1 rounded">
        <option value="price">Price</option>
        <option value="horsepower">Horsepower</option>
      </select>
    </div>

    <!-- Product Grid -->
    <div id="product-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8 pt-6">
      <!-- JS populates this -->
    </div>

    <!-- Pagination -->
    <div id="pagination" class="flex justify-center mt-12">
      <!-- JS populates this -->
    </div>
  </section>

  <script is:inline>
    const grid = document.getElementById('product-grid');
    const pagination = document.getElementById('pagination');
    const tabs = document.querySelectorAll('.tab');
    const sortSelect = document.getElementById('sort');

    const PAGE_SIZE = 9;
    let currentPage = 1;
    let currentCategory = '';
    let currentSort = 'price';

    const fetchProducts = async () => {
      const start = (currentPage - 1) * PAGE_SIZE;
      const end = start + PAGE_SIZE;
      const filters = [];

      if (currentCategory) {
        filters.push(`"${currentCategory}" in categories[]->title`);
      }

      const filterString = filters.length ? `*[${filters.join(' && ')}]` : `*[]`;
      const sortString = `| order(${currentSort} asc)[${start}...${end}]`;
      const query = `${filterString} ${sortString} {
        _id, title, price, horsepower, tune_required, slug { current }, images[]{ asset->{ url } }
      }`;

      const result = await fetch(
        \`https://${import.meta.env.SANITY_PROJECT_ID}.api.sanity.io/v1/data/query/production?query=\${encodeURIComponent(query)}\`,
        {
          headers: {
            Authorization: \`Bearer ${import.meta.env.SANITY_API_TOKEN}\`,
          },
        }
      ).then(res => res.json());

      return result.result || [];
    };

    const fetchCount = async () => {
      const filters = [];
      if (currentCategory) {
        filters.push(`"${currentCategory}" in categories[]->title`);
      }
      const query = \`count(*[${filters.join(' && ') || ''}])\`;
      const result = await fetch(
        \`https://${import.meta.env.SANITY_PROJECT_ID}.api.sanity.io/v1/data/query/production?query=\${encodeURIComponent(query)}\`,
        {
          headers: {
            Authorization: \`Bearer ${import.meta.env.SANITY_API_TOKEN}\`,
          },
        }
      ).then(res => res.json());
      return result.result || 0;
    };

    const renderProducts = async () => {
      const products = await fetchProducts();
      grid.innerHTML = '';
      products.forEach(prod => {
        grid.innerHTML += \`
          <a href="/shop/\${prod.slug.current}" class="block border border-white/10 bg-black/70 rounded-lg overflow-hidden shadow-md hover:shadow-xl transition">
            <img src="\${prod.images?.[0]?.asset?.url || ''}" alt="\${prod.title}" class="w-full h-48 object-cover" />
            <div class="p-4 space-y-2">
              <h2 class="font-bold text-xl font-captain text-accent">\${prod.title}</h2>
              <p class="text-sm">\$ \${prod.price}</p>
              <p class="text-sm">\${prod.horsepower} HP</p>
            </div>
          </a>\`;
      });
    };

    const renderPagination = async () => {
      const total = await fetchCount();
      const pages = Math.ceil(total / PAGE_SIZE);
      pagination.innerHTML = '';

      const wrapper = document.createElement('div');
      wrapper.className = "backdrop-blur-md bg-white/10 text-white px-6 py-3 rounded-full flex items-center space-x-2 shadow-lg border border-white/10";

      if (currentPage > 1) {
        const prev = document.createElement('a');
        prev.textContent = 'Prev';
        prev.href = '#';
        prev.className = 'px-3 py-1 hover:text-accent';
        prev.onclick = (e) => { e.preventDefault(); currentPage--; update(); };
        wrapper.appendChild(prev);
      }

      const maxVisible = 5;
      const half = Math.floor(maxVisible / 2);
      let start = Math.max(1, currentPage - half);
      let end = Math.min(pages, start + maxVisible - 1);

      if (end - start < maxVisible - 1) start = Math.max(1, end - maxVisible + 1);

      if (start > 1) {
        const first = document.createElement('a');
        first.textContent = '1';
        first.href = '#';
        first.className = 'px-3 py-1 hover:text-accent';
        first.onclick = (e) => { e.preventDefault(); currentPage = 1; update(); };
        wrapper.appendChild(first);
        wrapper.innerHTML += '<span class="text-gray-400">...</span>';
      }

      for (let i = start; i <= end; i++) {
        const btn = document.createElement('a');
        btn.textContent = i;
        btn.href = '#';
        btn.className = \`px-3 py-1 rounded-md \${i === currentPage ? 'bg-accent text-black font-bold' : 'hover:text-accent'}\`;
        btn.onclick = (e) => { e.preventDefault(); currentPage = i; update(); };
        wrapper.appendChild(btn);
      }

      if (end < pages) {
        wrapper.innerHTML += '<span class="text-gray-400">...</span>';
        const last = document.createElement('a');
        last.textContent = pages;
        last.href = '#';
        last.className = 'px-3 py-1 hover:text-accent';
        last.onclick = (e) => { e.preventDefault(); currentPage = pages; update(); };
        wrapper.appendChild(last);
      }

      if (currentPage < pages) {
        const next = document.createElement('a');
        next.textContent = 'Next';
        next.href = '#';
        next.className = 'px-3 py-1 hover:text-accent';
        next.onclick = (e) => { e.preventDefault(); currentPage++; update(); };
        wrapper.appendChild(next);
      }

      pagination.appendChild(wrapper);
    };

    const update = async () => {
      history.replaceState(null, '', \`?category=\${currentCategory}&sort=\${currentSort}&page=\${currentPage}\`);
      await renderProducts();
      await renderPagination();
    };

    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        tabs.forEach(t => t.classList.remove('active', 'bg-accent'));
        tab.classList.add('active', 'bg-accent');
        currentCategory = tab.dataset.category;
        currentPage = 1;
        update();
      });
    });

    sortSelect.addEventListener('change', () => {
      currentSort = sortSelect.value;
      currentPage = 1;
      update();
    });

    window.addEventListener('DOMContentLoaded', () => {
      const url = new URLSearchParams(location.search);
      currentCategory = url.get('category') || '';
      currentSort = url.get('sort') || 'price';
      currentPage = parseInt(url.get('page')) || 1;
      update();
    });
  </script>

  <style>
    .tab {
      @apply px-4 py-2 rounded-full bg-black border border-white/10 hover:bg-accent transition-colors;
    }
    .tab.active {
      @apply bg-accent text-black font-bold;
    }
  </style>
</BaseLayout>