---
import BaseLayout from '../../layouts/BaseLayout.astro';

export const prerender = false;

console.log("üîç SANITY_PROJECT_ID (inline script):", import.meta.env.PUBLIC_SANITY_PROJECT_ID);
---

<BaseLayout>
  <section class="max-w-7xl mx-auto text-white">

    <!-- Hero Section -->
    <div class="relative w-full h-[60vh] sm:h-[70vh] lg:h-[80vh] xl:h-[90vh] overflow-hidden">
      <img src="/images/shop background.png" alt="Shop Banner" class="w-full h-full object-cover shadow-lg" />
      
      <!-- Overlay Content -->
      <div class="absolute inset-0 flex flex-col items-center justify-end text-center pb-[16vh] sm:pb-[18vh] md:pb-[20vh] lg:pb-[22vh] xl:pb-[24vh]">
        <h1 class="text-4xl sm:text-5xl lg:text-6xl xl:text-7xl font-borg text-primary leading-none">SHOP</h1>
        <p class="mt-2 text-base sm:text-xl lg:text-2xl font-ethno text-white tracking-wide">
          Precision. Power. Performance.
        </p>
      </div>
    </div>
  </section>

  <section class="max-w-7xl mx-10 px-4">
    <!-- Category Tabs -->
    <div id="category-tabs" class="flex flex-wrap gap-3 text-sm font-captain mt-10">
      <!-- JS will populate tabs here -->
    </div>

    <!-- Sort -->
    <div class="flex items-center gap-4 text-sm font-captain">
      <label for="sort" class="text-primary">Sort:</label>
      <select id="sort" class="bg-black border border-gray-700 px-3 py-1 rounded">
        <option value="price">Price</option>
        <option value="horsepower">Horsepower</option>
      </select>
    </div>

    <!-- Product Grid -->
    <div id="product-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-10 pt-8">
      <!-- JS populates this -->
    </div>

    <!-- Pagination -->
    <div id="pagination" class="flex justify-center mt-12">
      <!-- JS populates this -->
    </div>
  </section>

  <script type="module" is:inline>
    // Now using /api/products server route to fetch data securely
    const grid = document.getElementById('product-grid');
    const pagination = document.getElementById('pagination');
    const categoryTabs = document.getElementById("category-tabs");
    const sortSelect = document.getElementById('sort');
    let currentFilters = {};

    const PAGE_SIZE = 9;
    let currentPage = 1;
    let currentCategory = '';
    let currentSort = 'price';

    const fetchProducts = async () => {
      const start = (currentPage - 1) * PAGE_SIZE;
      const end = start + PAGE_SIZE;
      const params = new URLSearchParams({
        start: start.toString(),
        end: end.toString(),
        category: currentCategory,
        sort: currentSort,
      });

      if (currentFilters.vehicle) params.set("vehicle", currentFilters.vehicle);
      if (currentFilters.tune) params.set("tune", currentFilters.tune);
      if (currentFilters.horsepower) params.set("minHp", currentFilters.horsepower);

      const res = await fetch(`/api/products?${params.toString()}`);
      const data = await res.json();
      return {
        products: data.products || [],
        totalCount: data.totalCount || 0
      };
    };

    const fetchCategories = async () => {
      const query = `*[_type == "category"]{ title, "slug": slug.current }`;
      const result = await fetch(
        `https://${import.meta.env.PUBLIC_SANITY_PROJECT_ID}.api.sanity.io/v1/data/query/production?query=${encodeURIComponent(query)}`,
        {
          headers: {
            Authorization: "Bearer " + import.meta.env.PUBLIC_SANITY_API_TOKEN,
          },
        }
      ).then(res => res.json());
      return result.result || [];
    };

    const renderCategoryTabs = async () => {
      const categories = await fetchCategories();
      console.log("üì¶ Categories fetched:", categories);
      categoryTabs.innerHTML = `<button class="tab active" data-category="">All</button>`;
      categories.forEach(cat => {
        const btn = document.createElement("button");
        btn.className = "tab";
        btn.setAttribute("data-category", cat.slug || cat.title);
        btn.innerText = cat.title;
        categoryTabs.appendChild(btn);
      });
      categoryTabs.querySelectorAll("button").forEach(btn => {
        btn.addEventListener("click", () => {
          currentCategory = btn.getAttribute("data-category") || '';
          currentPage = 1;
          categoryTabs.querySelectorAll("button").forEach(b => b.classList.remove("active"));
          btn.classList.add("active");
          renderProducts();
        });
      });
    };

    const renderProducts = async () => {
      const { products, totalCount } = await fetchProducts();
      grid.innerHTML = products.map(product => {
        const title = product.title ?? 'Untitled';
        const slug = product.slug?.current ?? '#';
        const image = product.images?.[0]?.asset?.url ?? '/images/placeholder-product.png';
        const price = typeof product.price === 'number'
          ? `$${parseFloat(product.price).toFixed(2)}`
          : '‚Äî';

        return `
          <div class="bg-white/5 border border-white/10 rounded-lg overflow-hidden shadow-lg backdrop-blur-md hover:scale-[1.02] transition-all">
            <a href="/shop/${slug}">
              <img src="${image}" alt="${title}" class="w-full h-60 object-cover" />
              <div class="p-4 space-y-2">
                <h3 class="font-semibold text-lg">${title}</h3>
                <p class="text-primary font-bold">${price}</p>
              </div>
            </a>
          </div>
        `;
      }).join('');
      renderPagination(totalCount);
    };

    const renderPagination = (total = 27) => {
      const totalPages = Math.ceil(total / PAGE_SIZE);
      pagination.innerHTML = '';

      const createButton = (text, page, classes = '') => {
        const btn = document.createElement('button');
        btn.innerText = text;
        btn.className = `mx-1 px-3 py-1 rounded bg-black/50 backdrop-blur-md ${classes}`;
        btn.addEventListener('click', () => {
          currentPage = page;
          renderProducts();
        });
        return btn;
      };

      if (currentPage > 1) {
        pagination.appendChild(createButton('¬´', currentPage - 1, 'text-white hover:bg-red-600'));
      }

      const maxVisible = 5;
      let startPage = Math.max(currentPage - 2, 1);
      let endPage = Math.min(startPage + maxVisible - 1, totalPages);

      if (endPage - startPage < maxVisible - 1) {
        startPage = Math.max(endPage - maxVisible + 1, 1);
      }

      if (startPage > 1) {
        pagination.appendChild(createButton('1', 1, 'text-white hover:bg-red-600'));
        if (startPage > 2) {
          const dots = document.createElement('span');
          dots.innerText = '...';
          dots.className = 'mx-1 text-gray-400';
          pagination.appendChild(dots);
        }
      }

      for (let i = startPage; i <= endPage; i++) {
        const isActive = i === currentPage;
        pagination.appendChild(createButton(i, i, isActive
          ? 'bg-primary text-white'
          : 'text-white hover:bg-red-600'));
      }

      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          const dots = document.createElement('span');
          dots.innerText = '...';
          dots.className = 'mx-1 text-gray-400';
          pagination.appendChild(dots);
        }
        pagination.appendChild(createButton(totalPages, totalPages, 'text-white hover:bg-red-600'));
      }

      if (currentPage < totalPages) {
        pagination.appendChild(createButton('¬ª', currentPage + 1, 'text-white hover:bg-red-600'));
      }
    };

    renderCategoryTabs();

    document.addEventListener("filterChange", (e) => {
      currentFilters = e.detail;
      currentPage = 1;
      renderProducts();
    });

    renderProducts();
  </script>
</BaseLayout>