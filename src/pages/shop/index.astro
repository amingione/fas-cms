---
import BaseLayout from '../../layouts/BaseLayout.astro';
import ProductCard from '../../components/ProductCard.astro';
import { fetchProductsFromSanity } from '../../lib/sanity-utils';
import ProductPageFilters from '../../components/ProductPageFilters.astro';

export const prerender = false;

const PAGE_SIZE = 12;
const url = new URL(Astro.request.url);
const currentPage = parseInt(url.searchParams.get("page") || "1");
const currentCategory = url.searchParams.get("category");
const start = (currentPage - 1) * PAGE_SIZE;
const end = start + PAGE_SIZE;

let allProducts = [];

try {
  allProducts = await fetchProductsFromSanity(currentCategory);
} catch (err) {
  console.error("üî• Sanity Fetch Failed:", err);
}

const totalCount = allProducts.length;
const totalPages = Math.ceil(totalCount / PAGE_SIZE);
const products = allProducts.slice(start, end);

const paginationLinks = [];
const maxVisiblePages = 5;
const pageGroup = Math.floor((currentPage - 1) / maxVisiblePages);
const startPage = pageGroup * maxVisiblePages + 1;
const endPage = Math.min(startPage + maxVisiblePages - 1, totalPages);

if (startPage > 1) {
  paginationLinks.push({ label: "‚Üê", page: startPage - 1 });
}

for (let page = startPage; page <= endPage; page++) {
  paginationLinks.push({ label: page.toString(), page });
}

if (endPage < totalPages) {
  paginationLinks.push({ label: "‚Üí", page: endPage + 1 });
}
---

<BaseLayout>
  <section class="max-w-7xl mx-auto text-white">

    <!-- Hero Section -->
    <div class="relative w-full h-[60vh] sm:h-[70vh] lg:h-[80vh] xl:h-[90vh] overflow-hidden">
      <img src="/images/shop background.png" alt="Shop Banner" class="w-full h-full object-cover shadow-lg" />

      <!-- Overlay Content -->
      <div class="absolute inset-0 flex flex-col items-center justify-end text-center pb-[16vh] sm:pb-[18vh] md:pb-[20vh] lg:pb-[22vh] xl:pb-[24vh]">
        <h1 class="text-4xl sm:text-5xl lg:text-6xl xl:text-7xl font-borg text-primary leading-none">SHOP</h1>
        <p class="mt-2 text-base sm:text-xl lg:text-2xl font-ethno text-white tracking-wide">
          Precision. Power. Performance.
        </p>
      </div>
    </div>
  </section>

  <section class="max-w-7xl mx-10 px-4">

    <div class="flex flex-col md:flex-row gap-6 pt-8">
      <aside class="w-full md:w-1/4 border-r border-white/20 pr-4">
        <div id="category-sidebar" class="flex flex-col gap-2">
          <!-- Category buttons will be dynamically injected -->
        </div>
      </aside>

      <div class="w-full md:w-3/4">
        <!-- Product Page Filters -->
        <ProductPageFilters currentCategory={currentCategory} />

        <!-- Product Grid -->
        <div id="product-grid" class="relative isolation-isolate z-0 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-10 pt-4">
          {products.map(product => (
            <ProductCard product={product} productImage={product.images?.[0]} />
          ))}
        </div>
      </div>
    </div>

    <!-- Pagination -->
    <div id="pagination" class="flex justify-center mt-12 gap-2">
      {
        paginationLinks.map(({ label, page }) => {
          const isActive = page === currentPage;
          return (
            <a
              href={`/shop?page=${page}`}
              class={`px-3 py-1 rounded-md transition duration-200 text-sm font-bold ${
                isActive 
                  ? 'bg-primary text-black shadow-md'
                  : 'bg-black/50 text-white hover:bg-red-600 hover:text-white'
              }`}
            >
              {label}
            </a>
          );
        })
      }
    </div>
  </section>

  <script type="module" is:inline>
    document.addEventListener("filterChange", (e) => {
      const filters = e.detail;
      console.log("üõ†Ô∏è filterChange event detail:", filters);
      console.log("üåê Redirecting to:", (function() {
        const url = new URL(window.location.href);
        if (filters.category) {
          url.searchParams.set("categorySlug", filters.category);
        } else {
          url.searchParams.delete("categorySlug");
        }
        if (filters.productFilter) {
          url.searchParams.set("filter", filters.productFilter);
        } else {
          url.searchParams.delete("filter");
        }
        url.searchParams.set("page", "1");
        return url.toString();
      })());
      // filters.category should be the expected slug value sent via URL query
      const url = new URL(window.location.href);

      if (filters.category) {
        url.searchParams.set("categorySlug", filters.category);
      } else {
        url.searchParams.delete("categorySlug");
      }

      if (filters.productFilter) {
        url.searchParams.set("filter", filters.productFilter);
      } else {
        url.searchParams.delete("filter");
      }

      url.searchParams.set("page", "1");
      window.location.href = url.toString();
    });
  </script>

  <style>
    #pagination a:hover {
      color: black !important;
    }
  </style>
</BaseLayout>