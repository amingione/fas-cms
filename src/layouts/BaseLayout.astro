---
import '../styles/global.css';
import Header from '../components/header/header2.astro';
import Footer from '@/components/footer.astro';
import Footer2 from '@/components/footer/footer2';
import CookieBanner from '@/components/notices/cookieBanner';
import Breadcrumbs from '@/components/storefront/Breadcrumbs.astro';
import { Toaster } from 'sonner';


// SEO props (optional per-page)
const {
  title,
  description,
  canonical,
  noindex = false,
  ogImage,
  hideBreadcrumbs = false,
  breadcrumbs
} = Astro.props as {
  title?: string;
  description?: string;
  canonical?: string;
  noindex?: boolean;
  ogImage?: string;
  hideBreadcrumbs?: boolean;
  breadcrumbs?: Array<{ href?: string; label: string }>;
};

const SITE_NAME = 'F.A.S. Motorsports';
const DEFAULT_OG_IMAGE = 'https://fasmotorsports.com/images/social/social-share.webp';

declare global {
  interface Window {
    dataLayer: any[];
    gtag?: (...args: any[]) => void;
  }
}

let canonicalUrl = canonical;
try {
  if (!canonicalUrl) {
    const url = new URL(Astro.request.url);
    url.search = '';
    url.hash = '';
    canonicalUrl = url.toString();
  }
} catch {
  canonicalUrl = canonical ?? undefined;
}

const resolvedOgImage = ogImage ?? DEFAULT_OG_IMAGE;
const pageTitle = title ? `${title} | ${SITE_NAME}` : SITE_NAME;

const sanitizeSegment = (segment: string) => {
  const decoded = decodeURIComponent(segment);
  const spaced = decoded
    .replace(/[-_]+/g, ' ')
    .replace(/([a-z0-9])([A-Z])/g, '$1 $2')
    .toLowerCase()
    .replace(/\b\w/g, (char) => char.toUpperCase());
  return spaced.trim() || decoded;
};

const LABEL_OVERRIDES: Record<string, string> = {
  faq2: 'FAQ',
  privacypolicy: 'Privacy Policy',
  returnrefundpolicy: 'Return & Refund Policy',
  custombuild: 'Custom Build',
  customerdashboard: 'Customer Dashboard',
  shop: 'Shop',
  specs: 'Spec Sheets',
  jtx: 'JTX Forged',
  belak: 'Belak Wheels'
};

const pathSegments = Astro.url?.pathname
  ?.replace(/\/+$/, '')
  .split('/')
  .filter(Boolean) ?? [];

const isHomeRoute = pathSegments.length === 0;
const shouldRenderBreadcrumbs = !hideBreadcrumbs && !isHomeRoute;

const buildAutoBreadcrumbs = () => {
  if (!shouldRenderBreadcrumbs) return [];

  const segments = pathSegments.map((segment, index) => {
    const href = '/' + pathSegments.slice(0, index + 1).join('/');
    const key = segment.toLowerCase();
    const label =
      LABEL_OVERRIDES[key] ?? sanitizeSegment(segment);
    return { href, label };
  });

  if (segments.length && title) {
    segments[segments.length - 1].label = title;
  }

  return [{ href: '/', label: 'Home' }, ...segments];
};

const ensureHomeCrumb = (items: Array<{ href?: string; label: string }>) => {
  if (items.length === 0) return items;
  const first = items[0];
  const labelIsHome =
    typeof first.label === 'string' &&
    first.label.toLowerCase() === 'home';
  if ((first.href === '/' || first.href === '') || labelIsHome) {
    return items;
  }
  return [{ href: '/', label: 'Home' }, ...items];
};

const finalizeBreadcrumbs = (items?: Array<{ href?: string; label: string }>) => {
  if (!items || items.length === 0) return [];
  return items.map((item, index) =>
    index === items.length - 1
      ? { label: item.label }
      : { href: item.href, label: item.label }
  );
};

const breadcrumbItems = shouldRenderBreadcrumbs
  ? finalizeBreadcrumbs(
      ensureHomeCrumb(
        breadcrumbs?.length ? breadcrumbs : buildAutoBreadcrumbs()
      )
    )
  : [];
---

<!DOCTYPE html>
<html lang="en" class="dark">
  <head>
    <!-- Google tag (gtag.js) -->
    <script is:inline>
      if (typeof window !== 'undefined') {
        const gtagScript = document.createElement('script');
        gtagScript.src = 'https://www.googletagmanager.com/gtag/js?id=G-NQ94Z6HWGV';
        gtagScript.async = true;
        gtagScript.onload = () => {
          window.dataLayer = window.dataLayer || [];
          function gtag() { window.dataLayer.push(arguments); }
          window.gtag = gtag;
          gtag('js', new Date());
          gtag('config', 'G-NQ94Z6HWGV', { send_page_view: true });
          gtag('config', 'AW-17641771829');
        };
        document.head.appendChild(gtagScript);
      }
    </script>
    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="FAS Moto" />
    <link rel="manifest" href="/site.webmanifest" crossorigin="use-credentials" />
    <link rel="icon" type="image/png" href="/logo/faslogochroma.png" />
    

    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
    <meta name="theme-color" content="#09090b" />
    <title>{pageTitle}</title>
    {description && <meta name="description" content={description} />}
    {noindex && <meta name="robots" content="noindex,nofollow" />}
    {canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
    <meta property="og:site_name" content={SITE_NAME} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title ? `${title}` : SITE_NAME} />
    {description && <meta property="og:description" content={description} />}
    {canonicalUrl && <meta property="og:url" content={canonicalUrl} />}
    {resolvedOgImage && <meta property="og:image" content={resolvedOgImage} />}
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title ? `${title}` : SITE_NAME} />
    {description && <meta name="twitter:description" content={description} />}
    {resolvedOgImage && <meta name="twitter:image" content={resolvedOgImage} />}
    <script is:inline>
      (function () {
        if (typeof window === 'undefined') return;

        var MERCHANT_ID = 5664091767;
        var pendingOrder = null;
        var renderedFor = null;

        function normalizeProducts(products) {
          if (!Array.isArray(products)) return undefined;
          var mapped = products
            .map(function (product) {
              if (!product) return null;
              if (typeof product === 'string') {
                return product.trim() ? { gtin: product.trim() } : null;
              }
              var gtin = product.gtin || product.GTIN || product.id || '';
              gtin = typeof gtin === 'number' ? String(gtin) : String(gtin || '').trim();
              return gtin ? { gtin: gtin } : null;
            })
            .filter(Boolean);
          return mapped.length ? mapped : undefined;
        }

        function buildPayload(order) {
          if (!order) return null;
          var orderId = String(order.orderId || order.order_id || '').trim();
          var email = String(order.email || order.customerEmail || '').trim();
          var country = String(order.deliveryCountry || order.delivery_country || '').trim();
          var delivery = String(order.estimatedDeliveryDate || order.estimated_delivery_date || '').trim();
          if (!orderId || !email || !country || !delivery) return null;
          var payload = {
            merchant_id: MERCHANT_ID,
            order_id: orderId,
            email: email,
            delivery_country: country,
            estimated_delivery_date: delivery
          };
          var products = normalizeProducts(order.products);
          if (products) payload.products = products;
          return payload;
        }

        function tryRender() {
          if (!pendingOrder) return;
          var gapi = window.gapi;
          if (!gapi || !gapi.surveyoptin || typeof gapi.surveyoptin.render !== 'function') return;
          var payload = buildPayload(pendingOrder);
          if (!payload) return;
          if (renderedFor && renderedFor === payload.order_id) return;
          try {
            gapi.surveyoptin.render(payload);
            renderedFor = payload.order_id;
          } catch (err) {
            console.warn('Google Reviews opt-in render failed:', err);
          }
        }

        window.renderOptIn = function () {
          tryRender();
        };

        window.triggerGoogleReviewOptIn = function (orderDetails) {
          if (!orderDetails) {
            pendingOrder = null;
            renderedFor = null;
            return;
          }
          pendingOrder = orderDetails;
          tryRender();
        };

        window.addEventListener('google-review:optin', function (event) {
          window.triggerGoogleReviewOptIn(event && event.detail);
        });
      })();
    </script>
    <script async defer src="https://apis.google.com/js/platform.js?onload=renderOptIn"></script>
    
    <slot name="head" />
  </head>

  <body class="bg-background pt-3 text-white font-mono min-h-screen flex flex-col">
    <!-- Global SVG filters for Liquid Glass effect -->
    <svg width="0" height="0" class="absolute pointer-events-none select-none" aria-hidden="true" focusable="false">
      <defs>
        <!-- Container-sized liquid glass filter -->
        <filter id="container-glass">
          <feTurbulence type="fractalNoise" baseFrequency="0.01" numOctaves="3" seed="2" result="noise"/>
          <feGaussianBlur in="noise" stdDeviation="2" result="blur"/>
          <feDisplacementMap in="SourceGraphic" in2="blur" scale="20" xChannelSelector="R" yChannelSelector="G"/>
        </filter>
        <!-- Button-sized stronger liquid glass filter -->
        <filter id="btn-glass">
          <feTurbulence type="fractalNoise" baseFrequency="0.02" numOctaves="3" seed="3" result="noise"/>
          <feGaussianBlur in="noise" stdDeviation="1.5" result="blur"/>
          <feDisplacementMap in="SourceGraphic" in2="blur" scale="14" xChannelSelector="R" yChannelSelector="G"/>
        </filter>
      </defs>
    </svg>

    <!-- Header sits outside page stacking contexts to stay on top -->
    <Header />

    <!-- Page content -->
    <div class="relative flex flex-col flex-1">
      <main class="mt-20 sm:mt-24 lg:mt-36 pt-6 flex-1 container max-w-full mx-auto">
        {breadcrumbItems.length > 0 && (
          <Breadcrumbs items={breadcrumbItems} />
        )}
        <slot />
      </main>
      <Footer />
      <Footer2 client:visible />
      <CookieBanner client:idle />
      <Toaster client:idle />
    </div>

    <!-- fas-auth client shim (provides window.fasAuth) -->
    <script src="/fas-auth.js" defer></script>
    <!-- Auth bootstrap removed: serverless login/session handles auth without Auth0 SDK -->


    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const elements = document.querySelectorAll('.fade-in-up');
        const observer = new IntersectionObserver(entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('opacity-100', 'translate-y-0');
            }
          });
        }, { threshold: 0.15 });

        elements.forEach(el => {
          el.classList.add('opacity-0', 'translate-y-6', 'transition-all', 'duration-700');
          observer.observe(el);
        });

      });
    </script>



<style>
  /* Ensure images and banners don't overflow */
  img, video, iframe {
    max-width: 100%;
    height: auto;
    object-fit: cover;
  }

  /* Smooth transitions for interactive elements */
  button, a {
    transition: all 0.3s ease;
  }
  button:hover, a:hover {
    color: var(--color-primary);
  }

  /* Responsive container padding */
  .container {
    @apply px-4 sm:px-6 lg:px-8;
  }
</style>
  </body>
</html>
