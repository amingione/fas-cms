---
import AccountDashboard from './accountdashboard.astro';
---

<header class="bg-black/80 shadow-xl shadow-outline text-white w-full pt-[40px]">
  
    <!-- Top Red Bar -->
<div class="fixed top-0 w-full bg-primary text-white text-base font-captain z-50">
  <div class="max-w-screen-xl mx-auto px-6 py-2 flex items-center justify-between">
    <div class="flex items-center gap-6">
      <a href="/about" class="hover:!text-black hover:underline">About</a>
      <span class="text-white/50">|</span>
      <a href="/contact" class="hover:!text-black hover:underline">Contact</a>
      <span class="text-white/50">|</span>
      <a href="/faq" class="hover:!text-black hover:underline">FAQ</a>
    </div>
    <!-- RIGHT: Auth badge -->
    <div id="account-top-badge" class="text-white/90 text-sm"></div>
  </div>
</div>
  
    <!-- Mobile Header -->
    <div class="fixed top-[35px] mt-3 z-40 left-[5px] w-[calc(100%-10px)] flex md:hidden justify-between items-center bg-black bg-opacity-90 text-white px-4 py-3 rounded-[20px] shadow-md">      <img src="/images/faslogochroma.png" alt="FAS Logo" class="h-10" />
      <button id="mobileMenuToggle" aria-label="Toggle Menu" class="text-white focus:outline-none transition-transform duration-300">
        <svg id="burgerIcon" class="w-6 h-6 transition-all duration-300" xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          <path id="burgerLine1" stroke-linecap="round" stroke-linejoin="round" d="M4 6h16" />
          <path id="burgerLine2" stroke-linecap="round" stroke-linejoin="round" d="M4 12h16" />
          <path id="burgerLine3" stroke-linecap="round" stroke-linejoin="round" d="M4 18h16" />
        </svg>
      </button>
    </div>
  
   <!-- Mobile Dropdown -->
   <div id="mobileMenuDropdown" class="md:hidden hidden fixed top-[85px] right-0 w-[90%] max-w-[320px] bg-black/80 backdrop-blur-md text-white font-ethno text-sm rounded-lg shadow-lg py-4 px-6 border border-white/10 z-40 transition-all duration-300 opacity-0 translate-y-4">
      <div id="mobileMenuLinks" class="space-y-2">
        <a href="/" class="block py-1 transform transition-all duration-300 opacity-0 translate-y-4 delay-[100ms] hover:text-accent">Home</a>
      <a href="/shop" class="block py-1 transform transition-all duration-300 opacity-0 translate-y-4 delay-[300ms] hover:text-accent">Shop</a>
      </div>
      <div id="mobileMenuCategories" class="space-y-2 mt-6">
        <p class="text-accent uppercase text-xs tracking-wide">Categories</p>
        <a href="/igla" class="block py-1 transform transition-all duration-300 opacity-0 translate-y-4 delay-[400ms] hover:text-accent">IGLA Anti-Theft</a>
        <a href="/power-packages" class="block py-1 transform transition-all duration-300 opacity-0 translate-y-4 delay-[450ms] hover:text-accent">Power Packages</a>
        <a href="/porting" class="block py-1 transform transition-all duration-300 opacity-0 translate-y-4 delay-[500ms] hover:text-accent">Porting</a>
        <a href="/services" class="block py-1 transform transition-all duration-300 opacity-0 translate-y-4 delay-[550ms] hover:text-accent">Services</a>
        <a href="/schedule" class="block py-1 transform transition-all duration-300 opacity-0 translate-y-4 delay-[350ms] hover:text-accent">Schedule Install</a>
      </div>
    </div>
  
  <!-- Main Desktop Header -->
  <div class="hidden md:block bg-transparent font-ethno-italic text-white px-6 pt-4 w-full z-40 relative">
      <div class="grid grid-cols-3 items-center h-16 w-full px-10">
      <div class="flex justify-start items-center gap-3 px-4">
        <div class="relative" id="mainHeaderSearch">
          <form action="/search" method="GET" class="inline-block" id="mainHeaderSearchForm">
            <input type="text" name="q" placeholder="Search" class="bg-transparent border-b border-white text-white text-sm placeholder:text-primary/70 focus:outline-none w-32" autocomplete="off" />
          </form>
          <div id="mainSearchSuggest" class="absolute left-0 mt-2 w-72 bg-black/90 backdrop-blur-md border border-white/10 rounded-lg shadow-xl hidden z-[70]"></div>
        </div>
      </div>
        <div class="flex justify-center">
          <img src="/images/faslogochroma.png" alt="FAS Chrome Logo" class="h-16 transform scale-[2]" />
        </div>
        <div class="flex justify-end items-center">
          <!-- Account Dashboard Toggle -->
          <button id="accountDashboardToggle" aria-label="Toggle Account Dashboard" class="text-white ml-4">
            <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
            <div id="accountDashboardPanel" class="hidden fixed top-0 right-0 h-full w-[220px] bg-[#1a1a1a] transform translate-x-full transition-transform duration-300 ease-in-out z-50 shadow-lg border-l border-white/10 slide-in">
              <h2 class="z-[10001] text-white mx-5 pt-12 font-borg rem-1.5">ACCOUNT</h2>
                <button id="closeAccountDashboard" class="group absolute top-10 right-4 z-[10001] bg-transparent text-white p-2 rounded-full shadow hover:text-red-500 transition ai-style-change-1">
                  <svg xmlns="http://www.w3.org/2000/svg"
                       stroke="currentColor"
                       class="w-4 h-4 stroke-white group-hover:stroke-red-500 !important; transition"
                       viewBox="0 0 24 24"
                       fill="none"
                       stroke-width="4">
                    <line x1="18" y1="6" x2="6" y2="18" />
                    <line x1="6" y1="6" x2="18" y2="18" />
                  </svg>
                </button>
              <AccountDashboard />
          </div>
        </div>
      </div>
      <div class="w-[90%] h-px bg-white/40 mx-auto my-4"></div>
      <div class="grid grid-cols-3 items-center px-5 max-w-7xl mx-auto">
        <div class="flex justify-start items-center gap-3 px-4">
          <div class="relative">
            <button id="desktopCategoryToggleMain" aria-label="Toggle Categories" class="text-white hover:shadow-md hover:shadow-primary/40 transition-all duration-300">
              <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
            <div id="desktopCategoryDropdownMain" class="hidden absolute top-[42px] left-0 ml-4 w-[300px] bg-black/80 backdrop-blur-md text-white font-ethno text-sm rounded-xl shadow-2xl py-4 px-6 border border-white/10 z-[60] space-y-2 transition-all duration-300">
              <div class="flex justify-end">
                <button id="closeDesktopMainDropdown" class="text-red-500 hover:text-white text-lg font-bold -mt-4 -mr-2 px-2 py-1 rounded-full transition-all">×</button>
              </div>
              <a href="/igla" class="block py-1 transform transition-all duration-300 opacity-0 translate-y-4 delay-[100ms] hover:text-primary">IGLA</a>
              <a href="/porting" class="block py-1 transform transition-all duration-300 opacity-0 translate-y-4 delay-[150ms] hover:text-primary">Porting</a>
              <a href="/services" class="block py-1 transform transition-all duration-300 opacity-0 translate-y-4 delay-[200ms] hover:text-primary">Services</a>
              <a href="/power-packages" class="block py-1 transform transition-all duration-300 opacity-0 translate-y-4 delay-[200ms] hover:text-primary">Power Packages</a>
              <a href="/schedule" class="block py-1 transform transition-all duration-300 opacity-0 translate-y-4 delay-[250ms] hover:text-primary">Schedule Install</a>
            </div>
          </div>
        </div>
        <div class="flex justify-center gap-2 text-sm font-ethno">
          <a href="/" class="hover:text-accent">Home</a>
          <span class="text-white/50">|</span>
          <a href="/shop" class="hover:text-accent">Shop</a>
        </div>
      </div>
    </div>
  
    <!-- Sticky Desktop Header -->
    <div class="my-sticky-header fixed top-[35px] w-full z-50 hidden md:flex justify-center">
    <div class="w-[90%] max-w-[1200px] mx-auto bg-black/70 backdrop-blur-md border border-white/10 rounded-[20px] px-16 py-5 flex items-center justify-between gap-20">
        <div class="flex items-center justify-between w-full max-w-7xl mx-auto">
          <img src="/logo/chromelogofas.png" alt="FAS Chrome Logo" class="h-14" />
  <div class="grid grid-cols-3 items-center gap-8 px-8 w-full max-w-7xl mx-auto">
  
    <!-- Column 1: Search -->
    <div class="flex font-ethno justify-start px-4">
      <div class="relative" id="stickyHeaderSearch">
        <form action="/search" method="GET" class="inline-block" id="stickyHeaderSearchForm">
          <input type="text" name="q" placeholder="Search..." class="bg-transparent border-b border-white font-ethno-italic placeholder:text-primary/70 text-white px-4 py-1 w-40 text-sm focus:outline-none" autocomplete="off" />
        </form>
        <div id="stickySearchSuggest" class="absolute left-0 mt-2 w-80 bg-black/90 backdrop-blur-md border border-white/10 rounded-lg shadow-xl hidden z-[70]"></div>
      </div>
    </div>
  
    <!-- Column 2: Nav -->
    <div class="flex justify-center gap-3 font-ethno text-white text-sm">
      <a href="/" class="hover:text-accent">Home</a>
      <span class="text-white/50">|</span>
      <a href="/shop" class="hover:text-accent">Shop</a>
    </div>
  
    <!-- Column 3: Hamburger -->
    <div class="flex justify-end relative">
      <button id="desktopCategoryToggleSticky" class="text-white hover:shadow-md hover:shadow-primary/40 transition-all duration-300">
        <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
  
      <div id="desktopCategoryDropdownSticky" class="hidden absolute top-[42px] right-0 w-[300px] bg-black/80 backdrop-blur-md text-white font-ethno text-sm rounded-xl shadow-2xl py-4 px-6 border border-white/10 z-[60] space-y-2 transition-all duration-300">
        <div class="flex justify-end">
          <button id="closeStickyDropdown" class="text-red-500 hover:text-white text-lg font-bold -mt-4 -mr-2 px-2 py-1 rounded-full transition-all">×</button>
        </div>
        <a href="/igla" class="block py-1 ...">IGLA</a>
        <a href="/porting" class="block py-1 ...">Porting</a>
        <a href="/services" class="block py-1 ...">Services</a>
        <a href="/power-packages" class="block py-1 ...">Power Packages</a>
        <a href="/schedule" class="block py-1 ...">Schedule Install</a>
      </div>
    </div>
  </div>
  
  </header>
  
<script type="module">
  import { getAuth0Client } from "/src/lib/auth.ts";
  const badge = document.getElementById("account-top-badge");
  (async () => {
    if (!badge) return;
    try {
      const auth0 = await getAuth0Client();
      const authed = await auth0.isAuthenticated();
      if (!authed) {
        badge.innerHTML = `<a href="/account" class="hover:!text-black hover:underline">Log in / Sign up</a>`;
        return;
      }
      const user = await auth0.getUser();
      const name = user?.given_name || user?.name || user?.email || "there";
      badge.innerHTML = `
        <span class="mr-3">Hello, ${name}</span>
        <a href="/dashboard" class="hover:!text-black hover:underline">My Account</a>
      `;
    } catch (e) {
      // Safe fallback
      badge.innerHTML = `<a href="/account" class="hover:!text-black hover:underline">My Account</a>`;
    }
  })();
</script>

  <script is:inline>
   document.addEventListener("DOMContentLoaded", function () {
     const menu = document.getElementById("mobileMenuDropdown");
     const toggle = document.getElementById("mobileMenuToggle");
     const line1 = document.getElementById("burgerLine1");
     const line2 = document.getElementById("burgerLine2");
     const line3 = document.getElementById("burgerLine3");
     const links = [...document.querySelectorAll("#mobileMenuLinks a"), ...document.querySelectorAll("#mobileMenuCategories a")];
     let isOpen = false;
    // Search forms: trim input and prevent empty submits
    const mainSearchForm = document.getElementById('mainHeaderSearchForm');
    const stickySearchForm = document.getElementById('stickyHeaderSearchForm');
    [mainSearchForm, stickySearchForm].forEach((form) => {
      if (!form) return;
      form.addEventListener('submit', (e) => {
        const input = form.querySelector('input[name="q"]');
        if (!input) return;
        const value = (input.value || '').trim();
        if (!value) {
          e.preventDefault();
          return;
        }
        input.value = value; // submit trimmed value
      });
    });

    // --- Typeahead Suggestions ---
    function debounce(fn, delay = 200) {
      let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), delay); };
    }

    // helpers for thumbnails and prices
    function getThumb(it) {
      // Try common Sanity image fields
      const byPath = it?.image?.asset?.url
        || it?.mainImage?.asset?.url
        || (Array.isArray(it?.images) && it.images[0]?.asset?.url)
        || it?.thumbnail?.asset?.url
        || it?.thumb?.asset?.url
        || it?.imageUrl
        || '';
      return typeof byPath === 'string' ? byPath : '';
    }

    function formatPrice(v) {
      const n = Number(v);
      if (!isFinite(n) || n <= 0) return '';
      try { return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', maximumFractionDigits: 2 }).format(n); } catch { return `$${n.toFixed(2)}`; }
    }

    function renderSuggestions(panel, items, query) {
      if (!panel) return;
      if (!items || !items.length) { panel.classList.add('hidden'); panel.innerHTML = ''; return; }
      const esc = (s) => String(s).replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;').replaceAll('"','&quot;').replaceAll("'", '&#39;');
      const list = items.slice(0, 8).map(it => {
        const title = it.title || it.name || it._type || 'Untitled';
        const href = resolveLink(it) || `/search?q=${encodeURIComponent(query)}`;
        const img = getThumb(it);
        const price = formatPrice(it.price);
        return `
          <a href="${href}" class="block px-3 py-2 hover:bg-white/10">
            <div class="flex items-center gap-3" style="font-family: Arial, sans-serif; font-size: 12px; line-height: 1.2;">
              ${img ? `<img src="${esc(img)}" alt="" class="w-10 h-10 object-cover rounded border border-white/10" />` : ''}
              <div class="min-w-0">
                <div class="truncate font-semibold" style="font-family: Arial, sans-serif; font-size: 12px;">${esc(title)}</div>
                <div class="flex items-center gap-2 text-white/70" style="font-family: Arial, sans-serif; font-size: 11px;">
                  <span class="uppercase">${esc(it._type || '')}</span>
                  ${price ? `<span class="text-accent">${esc(price)}</span>` : ''}
                </div>
              </div>
            </div>
          </a>
        `;
      }).join('');
      const footer = `<a href="/search?q=${encodeURIComponent(query)}" class="block px-3 py-2 text-center text-xs text-white/70 hover:bg-white/10" style="font-family: Arial, sans-serif; font-size: 12px;">See all results for “${esc(query)}”</a>`;
      panel.innerHTML = list + '<div class="border-t border-white/10"></div>' + footer;
      panel.classList.remove('hidden');
    }

    function resolveLink(it) {
      // Prefer API-provided url if present
      if (it && typeof it.url === 'string' && it.url) return it.url;
      const slug = (it && it.slug && (it.slug.current || it.slug)) || '';
      switch (it && it._type) {
        case 'product': return slug ? `/shop/${slug}` : '';
        case 'service': return slug ? `/service/${slug}` : '';
        case 'quote': return `/dashboard/quotes/${it._id || ''}`;
        case 'invoice': return `/dashboard/invoices/${it._id || ''}`;
        case 'appointment': return `/dashboard/appointments/${it._id || ''}`;
        case 'page': return slug ? `/${slug}` : '';
        default: return '';
      }
    }

    function setupTypeahead(rootId, formId, panelId) {
      const root = document.getElementById(rootId);
      const form = document.getElementById(formId);
      const input = form?.querySelector('input[name="q"]');
      const panel = document.getElementById(panelId);
      if (!root || !form || !input || !panel) return;

      let active = -1; // keyboard selection index
      const close = () => { panel.classList.add('hidden'); panel.innerHTML=''; active = -1; };

      const doSearch = debounce(async () => {
        const q = (input.value || '').trim();
        if (q.length < 2) { close(); return; }
        try {
          const res = await fetch(`/api/search?q=${encodeURIComponent(q)}`);
          if (!res.ok) throw new Error('search failed');
          const data = await res.json();
          const items = Array.isArray(data?.results) ? data.results : [];
          renderSuggestions(panel, items, q);
        } catch { close(); }
      }, 200);

      input.addEventListener('input', doSearch);
      input.addEventListener('focus', doSearch);
      input.addEventListener('blur', () => setTimeout(close, 150));

      // keyboard navigation
      input.addEventListener('keydown', (e) => {
        const links = panel.querySelectorAll('a');
        if (panel.classList.contains('hidden') || !links.length) return;
        if (e.key === 'ArrowDown' || e.key === 'Tab') { e.preventDefault(); active = (active + 1) % links.length; links[active].focus(); }
        if (e.key === 'ArrowUp') { e.preventDefault(); active = (active - 1 + links.length) % links.length; links[active].focus(); }
        if (e.key === 'Escape') { close(); }
      });

      // close on outside click
      document.addEventListener('click', (evt) => {
        if (!root.contains(evt.target)) close();
      });
    }

    setupTypeahead('mainHeaderSearch', 'mainHeaderSearchForm', 'mainSearchSuggest');
    setupTypeahead('stickyHeaderSearch', 'stickyHeaderSearchForm', 'stickySearchSuggest');
     const dashboardCloseBtn = document.getElementById("closeAccountDashboard");

      if (dashboardCloseBtn) {
      dashboardCloseBtn.addEventListener("click", () => {
      dashboardPanel.classList.add("translate-x-full");
      setTimeout(() => {
      dashboardPanel.classList.add("hidden");
    }, 300);
  });
}

     const animateOpen = () => {
       menu.classList.remove("hidden");
       menu.classList.add("transition-all", "duration-300");
       menu.classList.remove("opacity-0", "translate-y-4");
       menu.classList.add("opacity-100", "translate-y-0");
       setTimeout(() => {
         links.forEach(link => {
           link.classList.remove("opacity-0", "translate-y-4");
           link.classList.add("opacity-100", "translate-y-0");
         });
       }, 10);
       line1.setAttribute("d", "M6 6l12 12");
       line2.setAttribute("d", "");
       line3.setAttribute("d", "M6 18l12 -12");
     };

     const animateClose = () => {
       links.forEach(link => {
         link.classList.add("opacity-0", "translate-y-4");
         link.classList.remove("opacity-100", "translate-y-0");
       });
       menu.classList.remove("opacity-100", "translate-y-0");
       menu.classList.add("opacity-0", "translate-y-4");
       setTimeout(() => {
         menu.classList.add("hidden");
       }, 600);
       line1.setAttribute("d", "M4 6h16");
       line2.setAttribute("d", "M4 12h16");
       line3.setAttribute("d", "M4 18h16");
     };
  
      const dashboardToggle = document.getElementById("accountDashboardToggle");
      const dashboardPanel = document.getElementById("accountDashboardPanel");
      let isDashboardOpen = false;

      if (dashboardToggle && dashboardPanel) {
        dashboardToggle.addEventListener("click", () => {
          if (!isDashboardOpen) {
            dashboardPanel.classList.remove("hidden");
            setTimeout(() => dashboardPanel.classList.remove("translate-x-full"), 10);
          } else {
            dashboardPanel.classList.add("translate-x-full");
            setTimeout(() => dashboardPanel.classList.add("hidden"), 300);
          }
          isDashboardOpen = !isDashboardOpen;
        });
      }

      const desktopCategoryToggleMain = document.getElementById("desktopCategoryToggleMain");
      const desktopCategoryDropdownMain = document.getElementById("desktopCategoryDropdownMain");
      const desktopMainLinks = [...desktopCategoryDropdownMain?.querySelectorAll("a") || []];
      const closeMainBtn = document.getElementById("closeDesktopMainDropdown");

      let isDesktopOpenMain = false;

      const animateMainOpen = () => {
        desktopCategoryDropdownMain.classList.remove("hidden");
        setTimeout(() => {
          desktopMainLinks.forEach(link => {
            link.classList.remove("opacity-0", "translate-y-4");
            link.classList.add("opacity-100", "translate-y-0");
          });
        }, 10);
      };

      const animateMainClose = () => {
        desktopMainLinks.forEach(link => {
          link.classList.add("opacity-0", "translate-y-4");
          link.classList.remove("opacity-100", "translate-y-0");
        });
        setTimeout(() => {
          desktopCategoryDropdownMain.classList.add("hidden");
        }, 600);
      };

      if (desktopCategoryToggleMain && desktopCategoryDropdownMain) {
        desktopCategoryToggleMain.addEventListener("click", () => {
          isDesktopOpenMain ? animateMainClose() : animateMainOpen();
          isDesktopOpenMain = !isDesktopOpenMain;
        });

        desktopMainLinks.forEach(link => {
          link.addEventListener("click", () => {
            animateMainClose();
            isDesktopOpenMain = false;
          });
        });

        if (closeMainBtn) {
          closeMainBtn.addEventListener("click", () => {
            animateMainClose();
            isDesktopOpenMain = false;
          });
        }
      }

      const stickyToggle = document.getElementById("desktopCategoryToggleSticky");
      const stickyDropdown = document.getElementById("desktopCategoryDropdownSticky");
      const stickyLinks = [...stickyDropdown?.querySelectorAll("a") || []];
      const stickyClose = stickyDropdown?.querySelector("#closeStickyDropdown");
      let isStickyOpen = false;

      const openSticky = () => {
        stickyDropdown.classList.remove("hidden");
        setTimeout(() => {
          stickyLinks.forEach(link => {
            link.classList.remove("opacity-0", "translate-y-4");
            link.classList.add("opacity-100", "translate-y-0");
          });
        }, 10);
      };

      const closeSticky = () => {
        stickyLinks.forEach(link => {
          link.classList.add("opacity-0", "translate-y-4");
          link.classList.remove("opacity-100", "translate-y-0");
        });
        setTimeout(() => {
          stickyDropdown.classList.add("hidden");
        }, 600);
      };

      if (stickyToggle && stickyDropdown) {
        stickyToggle.addEventListener("click", () => {
          isStickyOpen ? closeSticky() : openSticky();
          isStickyOpen = !isStickyOpen;
        });

        stickyLinks.forEach(link => {
          link.addEventListener("click", () => {
            closeSticky();
            isStickyOpen = false;
          });
        });

        if (stickyClose) {
          stickyClose.addEventListener("click", () => {
            closeSticky();
            isStickyOpen = false;
          });
        }
      }
  const closeBtn = document.getElementById("closeAccountDashboard");
  const dashboard = document.getElementById("accountDashboardPanel");

  if (closeBtn && dashboard) {
    closeBtn.addEventListener('click', () => {
      dashboard.classList.add('hidden');
    });
  }

      toggle.addEventListener("click", () => {
        isOpen ? animateClose() : animateOpen();
        isOpen = !isOpen;
      });
  
      const sticky = document.querySelector(".my-sticky-header");
      const threshold = 150;
      window.addEventListener("scroll", () => {
        if (window.scrollY > threshold) {
          sticky.classList.add("show");
        } else {
          sticky.classList.remove("show");
        }
      });
    });
  </script>
  
  <style>
.my-sticky-header {
  opacity: 0;
  pointer-events: none;
  transform: translateY(-100%);
  transition: all 0.3s ease;
}
.my-sticky-header.show {
  opacity: 1;
  pointer-events: auto;
  transform: translateY(0);
}
#mobileMenuDropdown {
  transition: all 0.3s ease;
}
  </style>