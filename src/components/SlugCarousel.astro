---
interface Props {
  images: { url: string; alt?: string }[];
}
const { images } = Astro.props;
---

<div class="relative w-full" data-slug-carousel>
  <!-- Viewport -->
  <div id="slug-carousel" class="relative contain overflow-x-auto snap-x snap-mandatory no-scrollbar aspect-square rounded-lg bg-black/20 min-h-[300px]">
    <div class="contain flex w-full h-full" data-track>
      {images.map((img, i) => (
        <div class="flex-shrink-0 contain relative w-full h-full snap-start flex items-center justify-center" data-slide={i}>
          <img src={img.url} alt={img.alt || ''} class="object-contain w-full h-full p-4" loading="lazy" />
        </div>
      ))}
    </div>
  </div>

  <!-- Arrows -->
  <div class="absolute top-1/2 left-0 right-0 z-50 flex justify-between items-center pointer-events-none">
    <button
      id="prev"
      type="button"
      aria-label="Previous image"
      class="bg-black/60 text-white rounded-full p-2 pointer-events-auto z-50 absolute left-2 -translate-y-1/2"
    >‹</button>
    <button
      id="next"
      type="button"
      aria-label="Next image"
      class="bg-black/60 text-white rounded-full p-2 pointer-events-auto z-50 absolute right-2 -translate-y-1/2"
    >›</button>
  </div>

  <!-- Thumbnails -->
  <div id="thumbnails" class="mt-3 flex gap-2 overflow-x-auto">
    {images.map((img, i) => (
      <img
        src={img.url}
        alt={img.alt || ''}
        data-index={i}
        class="h-20 w-20 object-contain bg-black/30 rounded cursor-pointer opacity-80 hover:opacity-100 border border-white/10"
      />
    ))}
  </div>
</div>

<style>
  #slug-carousel { scroll-behavior: smooth; overscroll-behavior-x: contain; }
  #slug-carousel::-webkit-scrollbar { display: none; }
  #slug-carousel { -ms-overflow-style: none; scrollbar-width: none; }
  #slug-carousel [data-track] > [data-slide] { scroll-snap-align: start; scroll-snap-stop: always; }
</style>

<script>
  // @ts-nocheck
  (function () {
    var root = (document.currentScript && document.currentScript.closest('[data-slug-carousel]')) || document;
    var viewport = root.querySelector('#slug-carousel');
    var track = root.querySelector('[data-track]');
    var prev = root.querySelector('#prev');
    var next = root.querySelector('#next');
    var thumbs = root.querySelectorAll('#thumbnails [data-index]');
    var slides = track ? track.querySelectorAll('[data-slide]') : [];

    function vw(){ return viewport ? Math.round(viewport.getBoundingClientRect().width) : 0; }
    var idx = 0;
    function clamp(n){ n = n|0; return Math.max(0, Math.min(n, (slides.length || 1) - 1)); }

    function size(){
      var w = vw();
      if (!track) return;
      track.style.minWidth = (w * (slides.length || 1)) + 'px';
      Array.prototype.forEach.call(slides, function(s){
        s.style.flex = '0 0 ' + w + 'px';
        s.style.maxWidth = w + 'px';
        s.style.width = w + 'px';
        s.style.boxSizing = 'border-box';
      });
    }

    function go(i){
      idx = clamp(i);
      if (!viewport) return;
      var x = idx * vw();
      try { viewport.scrollTo({ left: x, behavior: 'smooth' }); } catch(e) { viewport.scrollLeft = x; }
    }

    if (prev) prev.addEventListener('click', function(e){ e.preventDefault(); go(idx - 1); });
    if (next) next.addEventListener('click', function(e){ e.preventDefault(); go(idx + 1); });

    Array.prototype.forEach.call(thumbs, function(t){
      t.addEventListener('click', function(e){ e.preventDefault(); var n = parseInt(t.getAttribute('data-index')||'0',10); go(n); });
    });

    if (viewport) viewport.addEventListener('scroll', function(){
      var w = vw() || 1; idx = clamp(Math.round((viewport.scrollLeft||0)/w));
    });

    function ensureSized(retries){
      var w = vw();
      if (w > 0){ size(); return true; }
      if ((retries|0) > 20) return false; // cap retries
      setTimeout(function(){ ensureSized((retries|0)+1); }, 50);
      return false;
    }

    // Recalculate when the viewport resizes (e.g., layout grid settles)
    if (viewport && 'ResizeObserver' in window){
      try{
        var ro = new ResizeObserver(function(){ size(); go(idx); });
        ro.observe(viewport);
      }catch(_){ /* noop */ }
    }

    // init after layout; retry if width is initially 0
    requestAnimationFrame(function(){
      if (!ensureSized(0)) {
        // still sizing via retries; once sized, align to first slide
        setTimeout(function(){ go(0); }, 400);
      } else {
        requestAnimationFrame(function(){ go(0); });
      }
    });
    window.addEventListener('resize', function(){ size(); go(idx); });
  })();
</script>