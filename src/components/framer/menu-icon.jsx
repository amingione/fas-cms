// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 891ff71faa342f0a "Polo (copy)", do not edit manually */
'use client';

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Hamburger' | 'Close' // Variant
 * radius?: number // Radius
}} Props

 */
import { routes } from './chunks/chunk-23HYNGZD.js';

// virtual:menu-icon
import { Fragment as Fragment2 } from 'react';
import { ContextProviders } from 'unframer';
const FramerContextProviders = ContextProviders ?? (({ children }) => <>{children}</>);

// /:https://framerusercontent.com/modules/umrQGERysOeH3mwblY5T/yXIeQt9spEjnXJfqDRUE/rYRqmI1eP.js
import { jsx as _jsx, jsxs as _jsxs } from 'react/jsx-runtime';
import {
  addFonts,
  addPropertyControls,
  ControlType,
  cx,
  useActiveVariantCallback,
  useComponentViewport,
  useLocaleInfo,
  useVariantState,
  withCSS
} from 'unframer';
import { LayoutGroup, motion, MotionConfigContext } from 'unframer';
import * as React from 'react';
import { useRef } from 'react';
var cycleOrder = ['fdpGvkEzL', 'JTJwLfN5y'];
var serializationHash = 'framer-hEL9t';
var variantClassNames = {
  fdpGvkEzL: 'framer-v-u2tgai',
  JTJwLfN5y: 'framer-v-1r3tigq'
};
function addPropertyOverrides(overrides, ...variants) {
  const nextOverrides = {};
  variants?.forEach((variant) => variant && Object.assign(nextOverrides, overrides[variant]));
  return nextOverrides;
}
var transition1 = {
  damping: 20,
  delay: 0,
  mass: 1,
  stiffness: 300,
  type: 'spring'
};
var radiusForCorner = (value, cornerIndex) => {
  if (typeof value === 'number' && Number.isFinite(value)) return Math.max(0, value) + 'px';
  if (typeof value !== 'string' || typeof cornerIndex !== 'number') return void 0;
  const segments = value.split(' ');
  return segments[cornerIndex] || segments[cornerIndex - 2] || segments[0];
};
var Transition = ({ value, children }) => {
  const config = React.useContext(MotionConfigContext);
  const transition = value ?? config.transition;
  const contextValue = React.useMemo(
    () => ({
      ...config,
      transition
    }),
    [JSON.stringify(transition)]
  );
  return (
    <MotionConfigContext.Provider value={contextValue}>{children}</MotionConfigContext.Provider>
  );
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = {
  Close: 'JTJwLfN5y',
  Hamburger: 'fdpGvkEzL'
};
var getProps = ({ height, id, radius, width, ...props }) => {
  return {
    ...props,
    d2WdKj7yR: radius ?? props.d2WdKj7yR,
    variant: humanReadableVariantMap[props.variant] ?? props.variant ?? 'fdpGvkEzL'
  };
};
var createLayoutDependency = (props, variants) => {
  if (props.layoutDependency) return variants.join('-') + props.layoutDependency;
  return variants.join('-');
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
  const fallbackRef = useRef(null);
  const refBinding = ref ?? fallbackRef;
  const defaultLayoutId = React.useId();
  const { activeLocale, setLocale } = useLocaleInfo();
  const componentViewport = useComponentViewport();
  const { style, className, layoutId, variant, d2WdKj7yR, ...restProps } = getProps(props);
  const {
    baseVariant,
    classNames,
    clearLoadingGesture,
    gestureHandlers,
    gestureVariant,
    isLoading,
    setGestureState,
    setVariant,
    variants
  } = useVariantState({
    cycleOrder,
    defaultVariant: 'fdpGvkEzL',
    ref: refBinding,
    variant,
    variantClassNames
  });
  const layoutDependency = createLayoutDependency(props, variants);
  const { activeVariantCallback, delay } = useActiveVariantCallback(baseVariant);
  const onTapb36mnq = activeVariantCallback(async (...args) => {
    setGestureState({
      isPressed: false
    });
    setVariant('JTJwLfN5y');
  });
  const onTapfvfike = activeVariantCallback(async (...args) => {
    setGestureState({
      isPressed: false
    });
    setVariant('fdpGvkEzL');
  });
  const sharedStyleClassNames = [];
  const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
  return (
    <LayoutGroup id={layoutId ?? defaultLayoutId}>
      <Variants animate={variants} initial={false}>
        <Transition value={transition1}>
          <motion.div
            {...restProps}
            {...gestureHandlers}
            className={cx(scopingClassNames, 'framer-u2tgai', className, classNames)}
            data-framer-name={'Hamburger'}
            data-highlight={true}
            layoutDependency={layoutDependency}
            layoutId={'fdpGvkEzL'}
            onTap={onTapb36mnq}
            ref={refBinding}
            style={{
              ...style
            }}
            {...addPropertyOverrides(
              {
                JTJwLfN5y: {
                  'data-framer-name': 'Close',
                  onTap: onTapfvfike
                }
              },
              baseVariant,
              gestureVariant
            )}
          >
            <motion.div
              className={'framer-1w07jwh'}
              layoutDependency={layoutDependency}
              layoutId={'d4eFF6WAR'}
              style={{
                backgroundColor:
                  'var(--token-7a7ce709-7970-4e23-97d8-1ae0355d02f0, rgb(255, 255, 255))',
                borderBottomLeftRadius: radiusForCorner(d2WdKj7yR, 3),
                borderBottomRightRadius: radiusForCorner(d2WdKj7yR, 2),
                borderTopLeftRadius: radiusForCorner(d2WdKj7yR, 0),
                borderTopRightRadius: radiusForCorner(d2WdKj7yR, 1),
                rotate: 0
              }}
              variants={{
                JTJwLfN5y: {
                  backgroundColor: 'rgb(255, 255, 255)',
                  rotate: 45
                }
              }}
            />
            <motion.div
              className={'framer-1ucutao'}
              layoutDependency={layoutDependency}
              layoutId={'t_P44xJsW'}
              style={{
                backgroundColor:
                  'var(--token-7a7ce709-7970-4e23-97d8-1ae0355d02f0, rgb(255, 255, 255))',
                borderBottomLeftRadius: radiusForCorner(d2WdKj7yR, 3),
                borderBottomRightRadius: radiusForCorner(d2WdKj7yR, 2),
                borderTopLeftRadius: radiusForCorner(d2WdKj7yR, 0),
                borderTopRightRadius: radiusForCorner(d2WdKj7yR, 1),
                rotate: 0
              }}
              variants={{
                JTJwLfN5y: {
                  backgroundColor: 'rgb(255, 255, 255)',
                  rotate: -45
                }
              }}
            />
          </motion.div>
        </Transition>
      </Variants>
    </LayoutGroup>
  );
});
var css = [
  '@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }',
  '.framer-hEL9t.framer-mdcvs0, .framer-hEL9t .framer-mdcvs0 { display: block; }',
  '.framer-hEL9t.framer-u2tgai { cursor: pointer; height: 30px; overflow: hidden; position: relative; width: 30px; }',
  '.framer-hEL9t .framer-1w07jwh { flex: none; height: 2px; left: calc(50.00000000000002% - 20px / 2); overflow: visible; position: absolute; top: 10px; width: 20px; }',
  '.framer-hEL9t .framer-1ucutao { bottom: 10px; flex: none; height: 2px; left: calc(50.00000000000002% - 20px / 2); overflow: visible; position: absolute; width: 20px; }',
  '.framer-hEL9t.framer-v-1r3tigq.framer-u2tgai { aspect-ratio: 1 / 1; height: var(--framer-aspect-ratio-supported, 30px); }',
  '.framer-hEL9t.framer-v-1r3tigq .framer-1w07jwh { top: calc(50.00000000000002% - 2px / 2); }',
  '.framer-hEL9t.framer-v-1r3tigq .framer-1ucutao { bottom: unset; top: calc(50.00000000000002% - 2px / 2); }'
];
var FramerrYRqmI1eP = withCSS(Component, css, 'framer-hEL9t');
var stdin_default = FramerrYRqmI1eP;
FramerrYRqmI1eP.displayName = 'Menu Icon';
FramerrYRqmI1eP.defaultProps = {
  height: 30,
  width: 30
};
addPropertyControls(FramerrYRqmI1eP, {
  variant: {
    options: ['fdpGvkEzL', 'JTJwLfN5y'],
    optionTitles: ['Hamburger', 'Close'],
    title: 'Variant',
    type: ControlType.Enum
  },
  d2WdKj7yR: {
    defaultValue: 0,
    displayStepper: true,
    max: 1,
    min: 0,
    title: 'Radius',
    type: ControlType.Number
  }
});
addFonts(
  FramerrYRqmI1eP,
  [
    {
      explicitInter: true,
      fonts: []
    }
  ],
  {
    supportsExplicitInterCodegen: true
  }
);

// virtual:menu-icon
import { WithFramerBreakpoints } from 'unframer';
import { jsx } from 'react/jsx-runtime';
var locales = [];
var defaultResponsiveVariants = {
  base: 'JTJwLfN5y'
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
  return (
    <FramerContextProviders
      routes={routes}
      framerSiteId={'891ff71faa342f0af7ef20f0583083bbec16fee0069f0ca5cfd3ff66fcf3cd1f'}
      locale={locale}
      locales={locales}
    >
      {jsx(stdin_default, {
        ...rest
      })}
    </FramerContextProviders>
  );
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders MenuIconFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = '', ...rest }) => {
  return (
    <FramerContextProviders
      routes={routes}
      framerSiteId={'891ff71faa342f0af7ef20f0583083bbec16fee0069f0ca5cfd3ff66fcf3cd1f'}
      locale={locale}
      locales={locales}
    >
      <WithFramerBreakpoints
        Component={stdin_default}
        variants={defaultResponsiveVariants}
        {...rest}
      />
    </FramerContextProviders>
  );
};
Object.assign(ComponentWithRoot, stdin_default);
var menu_icon_default = ComponentWithRoot;
export { menu_icon_default as default };
