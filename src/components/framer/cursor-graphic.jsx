// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 891ff71faa342f0a "Polo (copy)", do not edit manually */
'use client';

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { Icon } from './chunks/chunk-BTSBQWPZ.js';
import { routes } from './chunks/chunk-23HYNGZD.js';

// virtual:cursor-graphic
import { Fragment as Fragment2 } from 'react';
import { ContextProviders } from 'unframer';
const FramerContextProviders = ContextProviders ?? (({ children }) => <>{children}</>);

// /:https://framerusercontent.com/modules/mIaFjoz8IoYTxQXfdxeS/IvYI4QI9siCdl1cXx0TU/TPUWCpZ7i.js
import { jsx as _jsx } from 'react/jsx-runtime';
import {
  addFonts,
  ComponentViewportProvider,
  cx,
  getFonts,
  SmartComponentScopedContainer,
  useComponentViewport,
  useLocaleInfo,
  useVariantState,
  withCSS
} from 'unframer';
import { LayoutGroup, motion, MotionConfigContext } from 'unframer';
import * as React from 'react';
var PhosphorFonts = getFonts(Icon);
var serializationHash = 'framer-bpCAi';
var variantClassNames = {
  O8UZG9zqy: 'framer-v-45196i'
};
var transition1 = {
  bounce: 0.2,
  delay: 0,
  duration: 0.4,
  type: 'spring'
};
var Transition = ({ value, children }) => {
  const config = React.useContext(MotionConfigContext);
  const transition = value ?? config.transition;
  const contextValue = React.useMemo(
    () => ({
      ...config,
      transition
    }),
    [JSON.stringify(transition)]
  );
  return (
    <MotionConfigContext.Provider value={contextValue}>{children}</MotionConfigContext.Provider>
  );
};
var Variants = motion.create(React.Fragment);
var getProps = ({ height, id, width, ...props }) => {
  return {
    ...props
  };
};
var createLayoutDependency = (props, variants) => {
  if (props.layoutDependency) return variants.join('-') + props.layoutDependency;
  return variants.join('-');
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
  const { activeLocale, setLocale } = useLocaleInfo();
  const { style, className, layoutId, variant, ...restProps } = getProps(props);
  const {
    baseVariant,
    classNames,
    clearLoadingGesture,
    gestureHandlers,
    gestureVariant,
    isLoading,
    setGestureState,
    setVariant,
    variants
  } = useVariantState({
    defaultVariant: 'O8UZG9zqy',
    variant,
    variantClassNames
  });
  const layoutDependency = createLayoutDependency(props, variants);
  const sharedStyleClassNames = [];
  const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
  const ref1 = React.useRef(null);
  const defaultLayoutId = React.useId();
  const componentViewport = useComponentViewport();
  return (
    <LayoutGroup id={layoutId ?? defaultLayoutId}>
      <Variants animate={variants} initial={false}>
        <Transition value={transition1}>
          <motion.div
            {...restProps}
            {...gestureHandlers}
            className={cx(scopingClassNames, 'framer-45196i', className, classNames)}
            data-framer-name={'Primary'}
            layoutDependency={layoutDependency}
            layoutId={'O8UZG9zqy'}
            ref={ref ?? ref1}
            style={{
              ...style
            }}
          >
            <ComponentViewportProvider>
              <SmartComponentScopedContainer
                className={'framer-1fct4kh-container'}
                isAuthoredByUser={true}
                isModuleExternal={true}
                layoutDependency={layoutDependency}
                layoutId={'suStV3ZsF-container'}
                nodeId={'suStV3ZsF'}
                rendersWithMotion={true}
                scopeId={'TPUWCpZ7i'}
              >
                <Icon
                  color={'var(--token-7a7ce709-7970-4e23-97d8-1ae0355d02f0, rgb(255, 255, 255))'}
                  height={'100%'}
                  iconSearch={'House'}
                  iconSelection={'Cursor'}
                  id={'suStV3ZsF'}
                  layoutId={'suStV3ZsF'}
                  mirrored={false}
                  selectByList={true}
                  style={{
                    height: '100%',
                    width: '100%'
                  }}
                  weight={'duotone'}
                  width={'100%'}
                />
              </SmartComponentScopedContainer>
            </ComponentViewportProvider>
          </motion.div>
        </Transition>
      </Variants>
    </LayoutGroup>
  );
});
var css = [
  '@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }',
  '.framer-bpCAi.framer-c8y1s0, .framer-bpCAi .framer-c8y1s0 { display: block; }',
  '.framer-bpCAi.framer-45196i { height: 30px; overflow: hidden; position: relative; width: 30px; }',
  '.framer-bpCAi .framer-1fct4kh-container { bottom: 0px; flex: none; left: 0px; position: absolute; right: 0px; top: 0px; }'
];
var FramerTPUWCpZ7i = withCSS(Component, css, 'framer-bpCAi');
var stdin_default = FramerTPUWCpZ7i;
FramerTPUWCpZ7i.displayName = 'cursor graphic';
FramerTPUWCpZ7i.defaultProps = {
  height: 30,
  width: 30
};
addFonts(
  FramerTPUWCpZ7i,
  [
    {
      explicitInter: true,
      fonts: []
    },
    ...PhosphorFonts
  ],
  {
    supportsExplicitInterCodegen: true
  }
);

// virtual:cursor-graphic
import { WithFramerBreakpoints } from 'unframer';
import { jsx } from 'react/jsx-runtime';
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
  return (
    <FramerContextProviders
      routes={routes}
      framerSiteId={'891ff71faa342f0af7ef20f0583083bbec16fee0069f0ca5cfd3ff66fcf3cd1f'}
      locale={locale}
      locales={locales}
    >
      {jsx(stdin_default, {
        ...rest
      })}
    </FramerContextProviders>
  );
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders CursorGraphicFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = '', ...rest }) => {
  return (
    <FramerContextProviders
      routes={routes}
      framerSiteId={'891ff71faa342f0af7ef20f0583083bbec16fee0069f0ca5cfd3ff66fcf3cd1f'}
      locale={locale}
      locales={locales}
    >
      <WithFramerBreakpoints
        Component={stdin_default}
        variants={defaultResponsiveVariants}
        {...rest}
      />
    </FramerContextProviders>
  );
};
Object.assign(ComponentWithRoot, stdin_default);
var cursor_graphic_default = ComponentWithRoot;
export { cursor_graphic_default as default };
