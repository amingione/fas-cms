<script>
  export {};

  declare global {
    interface Window {
      Clerk: {
        user?: any;
        loaded?: boolean;
        load?: () => Promise<void>;
        signOut?: () => Promise<void>;
        addListener?: (events: any) => void;
      };
    }
  }

  window.addEventListener('DOMContentLoaded', async () => {
    await window.Clerk?.load();

    const closeBtn = document.getElementById('closeAccountDashboard');
    const dashboardNav = document.getElementById('dashboardNav');
    const overlay = document.getElementById('accountDashboardOverlay');
    const sanityToken = import.meta.env.SANITY_API_TOKEN;
    const sanityProjectId = import.meta.env.SANITY_PROJECT_ID;

    if (!dashboardNav) {
      console.warn("‚ö†Ô∏è No dashboardNav element found.");
      return;
    }

    async function fetchCustomerData(email) {
      try {
        const customerQuery = encodeURIComponent(`*[_type == "customer" && email == "${email}"][0]`);
        const customerUrl = `https://${sanityProjectId}.api.sanity.io/v2023-05-30/data/query/production?query=${customerQuery}`;
        const response = await fetch(customerUrl, {
          headers: { Authorization: `Bearer ${sanityToken}` },
        });
        if (!response.ok) throw new Error("Failed to fetch customer data");
        const result = await response.json();
        return result.result;
      } catch (err) {
        console.error("üö® Failed to fetch customer data:", err);
        return null;
      }
    }

    async function fetchOrders() {
      try {
        const response = await fetch('/api/get-user-orders');
        if (!response.ok) throw new Error("Failed to fetch orders");
        return await response.json();
      } catch (err) {
        console.error("üö® Failed to fetch orders:", err);
        return [];
      }
    }

    async function fetchQuotes() {
      try {
        const response = await fetch('/api/get-user-quotes');
        if (!response.ok) throw new Error("Failed to fetch quotes");
        return await response.json();
      } catch (err) {
        console.error("üö® Failed to fetch quotes:", err);
        return [];
      }
    }

    async function loadDashboard() {
      const user = window.Clerk?.user;
      if (!user) {
        dashboardNav.innerHTML = `
          <div class="text-center space-y-4">
            <a href="/sign-in" class="text-primary underline text-xs">Login</a>
          </div>
        `;
        return;
      }

      const email = user.emailAddresses?.[0]?.emailAddress || '';

      try {
        const [customer, orders, quotes] = await Promise.all([
          fetchCustomerData(email),
          fetchOrders(),
          fetchQuotes(),
        ]);

        dashboardNav.innerHTML = `
          <div class="space-y-4 p-4">
            <h3 class="text-xs text-white/50 uppercase">Recent Orders</h3>
            <ul class="text-xs space-y-2">
              ${
                orders.length
                  ? orders.slice(0, 3).map(order => `
                      <li class="text-white/80">${order.title || order._id} - <span class="text-green-400">${order.status}</span></li>
                    `).join('')
                  : `<li class="text-white/50">No orders yet</li>`
              }
            </ul>
            <a href="/account/orders" class="text-primary hover:underline text-xs">View All Orders</a>

            <h3 class="text-xs text-white/50 uppercase mt-6">Saved Quotes</h3>
            <ul class="text-xs space-y-2">
              ${
                quotes.length
                  ? quotes.slice(0, 3).map(quote => `
                      <li class="text-white/80">${quote.title || quote._id} - <span class="text-gray-400">${quote.status}</span></li>
                    `).join('')
                  : `<li class="text-white/50">No quotes yet</li>`
              }
            </ul>
            <a href="/account/quotes" class="text-primary hover:underline text-xs">View All Quotes</a>

            <div class="mt-6">
              <a href="/account/wishlist" class="text-red-500 hover:text-white text-sm block">Wishlist</a>
              <button id="logoutBtn" class="mt-4 text-red-500 hover:text-white text-sm w-full">Logout</button>
            </div>
          </div>
        `;

        const logoutBtn = document.getElementById('logoutBtn');
        logoutBtn?.addEventListener('click', async () => {
          await window.Clerk?.signOut();
          window.location.href = '/';
        });
      } catch (err) {
        console.error("üö® Error loading dashboard:", err);
        dashboardNav.innerHTML = `<p class="text-red-500 text-xs">Failed to load dashboard</p>`;
      }
    }

    if (window.Clerk) {
      if (window.Clerk.loaded) {
        loadDashboard();
      } else {
        window.Clerk.addListener({ loaded: loadDashboard });
      }

      window.Clerk.addListener({ signedIn: loadDashboard });
    } else {
      console.error('üö® Clerk not initialized.');
    }

    closeBtn?.addEventListener('click', () => {
      document.getElementById('accountDashboard')?.classList.add('translate-x-full');
      overlay?.classList.add('hidden');
    });
  });
</script>

<!-- ‚úÖ Sidebar structure clean -->
<div id="accountDashboardOverlay" class="fixed inset-0 z-40 hidden bg-black/70 transition-opacity duration-300 ease-in-out">
  <div id="accountDashboard" class="fixed right-0 top-0 h-full w-80 bg-black shadow-xl transform transition-all duration-500 ease-in-out translate-x-full">
    
    <div id="dashboardNav" class="p-4 space-y-6 text-white">
      <!-- JS will inject dashboard here -->
    </div>

    <button id="closeAccountDashboard" class="absolute top-2 right-2 text-white text-2xl">&times;</button>

  </div>
</div>