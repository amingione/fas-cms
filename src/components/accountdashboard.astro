<script>
  export {};

  declare global {
  interface Window {
    Clerk: {
      user?: any;
      loaded?: boolean;
      load?: () => Promise<void>;
      signOut?: () => Promise<void>;
      addListener?: (event: any, callback?: () => void) => void;
    };
  }
}

  window.addEventListener('DOMContentLoaded', async () => {
    await window.Clerk?.load();

    const closeBtn = document.getElementById('closeAccountDashboard');
    const dashboardNav = document.getElementById('dashboardNav');
    const emailElem = document.getElementById('userEmail');
    const sanityToken = import.meta.env.SANITY_API_TOKEN;
    const sanityProjectId = import.meta.env.SANITY_PROJECT_ID;

    if (!dashboardNav) {
      console.warn("‚ö†Ô∏è No dashboardNav element found.");
      return;
    }

    async function fetchCustomerData(email) {
      try {
        const customerQuery = encodeURIComponent(`*[_type == "customer" && email == "${email}"][0]`);
        const customerUrl = `https://${sanityProjectId}.api.sanity.io/v2023-05-30/data/query/production?query=${customerQuery}`;
        const response = await fetch(customerUrl, {
          headers: { Authorization: `Bearer ${sanityToken}` },
        });
        if (!response.ok) throw new Error("Failed to fetch customer data");
        const result = await response.json();
        return result.result;
      } catch (err) {
        console.error("üö® Failed to fetch customer data:", err);
        return null;
      }
    }

    async function fetchOrders() {
      try {
        const response = await fetch('/api/get-user-orders');
        if (!response.ok) throw new Error("Failed to fetch orders");
        return await response.json();
      } catch (err) {
        console.error("üö® Failed to fetch orders:", err);
        return [];
      }
    }

    async function fetchQuotes() {
      try {
        const response = await fetch('/api/get-user-quotes');
        if (!response.ok) throw new Error("Failed to fetch quotes");
        return await response.json();
      } catch (err) {
        console.error("üö® Failed to fetch quotes:", err);
        return [];
      }
    }

    async function loadDashboard() {
      const user = window.Clerk?.user;
      if (!user) {
        console.warn("‚ö†Ô∏è No Clerk user found.");
        dashboardNav.innerHTML = `
          <div class="text-center space-y-4">
            <a href="/sign-in" class="text-xs text-primary underline hover:text-red-500">LOGIN</a>
            <a href="/sign-up" class="text-xs text-primary underline hover:text-red-500">SIGNUP</a>
          </div>
        `;
        if (emailElem) emailElem.textContent = '';
        return;
      }

      const email = user.emailAddresses?.[0]?.emailAddress || '';
      if (emailElem) emailElem.textContent = email;

      try {
        const [customer, orders, quotes] = await Promise.all([
          fetchCustomerData(email),
          fetchOrders(),
          fetchQuotes(),
        ]);

        dashboardNav.innerHTML = `
          <div class="space-y-4">
            <h3 class="text-xs text-white/50 uppercase tracking-wide">Recent Orders</h3>
            <ul class="text-xs space-y-2">
              ${
                orders.length
                  ? orders.slice(0, 3).map(order => `
                      <li class="text-white/80">${order.title || order._id} - <span class="text-green-400">${order.status}</span></li>
                    `).join('')
                  : `<li class="text-white/50">No orders yet</li>`
              }
            </ul>
            <a href="/account/orders" class="block text-primary hover:underline text-xs mt-2">View All Orders</a>
          </div>

          <div class="border-t border-white/10 my-4 pt-4 space-y-4">
            <h3 class="text-xs text-white/50 uppercase tracking-wide">Saved Quotes</h3>
            <ul class="text-xs space-y-2">
              ${
                quotes.length
                  ? quotes.slice(0, 3).map(quote => `
                      <li class="text-white/80">${quote.title || quote._id} - <span class="text-gray-400">${quote.status}</span></li>
                    `).join('')
                  : `<li class="text-white/50">No quotes yet</li>`
              }
            </ul>
            <a href="/account/quotes" class="block text-primary hover:underline text-xs mt-2">View All Quotes</a>
          </div>

          ${
            customer?.addresses?.length
              ? `
                <div class="border-t border-white/10 my-4 pt-4 space-y-4">
                  <h3 class="text-xs text-white/50 uppercase tracking-wide">Saved Addresses</h3>
                  <ul class="text-xs space-y-4">
                    ${customer.addresses.map(addr => `
                      <li class="text-white/80 border border-white/10 p-2 rounded-md">
                        <p>${addr.label || addr.street}</p>
                        <p class="text-xs">${addr.city}, ${addr.state} ${addr.zip}</p>
                      </li>
                    `).join('')}
                  </ul>
                  <a href="/account/addresses" class="block text-primary hover:underline text-xs mt-2">Manage Addresses</a>
                </div>
              `
              : ''
          }

          <a href="/account/wishlist" class="hover:text-red-500 text-sm">WISHLIST</a>

          <button id="logoutBtn" class="mt-8 text-red-500 hover:text-white text-sm w-full">LOGOUT</button>
        `;

        const logoutBtn = document.getElementById('logoutBtn');
        logoutBtn?.addEventListener('click', async () => {
          await window.Clerk?.signOut();
          window.location.href = '/';
        });
      } catch (err) {
        console.error("üö® Failed to load dashboard:", err);
        dashboardNav.innerHTML = `<p class="text-red-500 text-xs">Failed to load dashboard</p>`;
      }
    }

    if (window.Clerk) {
      const tryLoadDashboard = () => {
        const user = window.Clerk?.user;
        if (user) {
          loadDashboard();
        }
      };

      if (window.Clerk.loaded) {
        tryLoadDashboard();
      } else {
        window.Clerk.addListener('loaded', tryLoadDashboard);
      }

      window.Clerk.addListener({ signedIn: tryLoadDashboard });
    } else {
      console.error('üö® Clerk not initialized.');
    }

    closeBtn?.addEventListener('click', () => {
      const dashboardPanel = document.getElementById('accountDashboard');
      const overlay = document.getElementById('accountDashboardOverlay');
      dashboardPanel?.classList.add('translate-x-full');
      setTimeout(() => {
        overlay?.classList.add('hidden');
        dashboardPanel?.classList.remove('translate-x-full');
      }, 300);
    });
  });
</script>