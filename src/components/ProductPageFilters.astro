--- // src/components/ProductPageFilters.astro
import { fetchTunes, fetchVehicles } from '@lib/sanity-utils';
import type { Tune, Vehicle } from '@lib/sanity-utils';

const currentCategory = Astro.props.currentCategory as string | undefined;
const url = new URL(Astro.request.url);
const currentTuneSlug = url.searchParams.get('tuneSlug') || '';
const currentVehicleSlug = url.searchParams.get('vehicleSlug') || '';
const currentMinHp = url.searchParams.get('minHp') || '';

let tunes: Tune[] = [];
let vehicles: Vehicle[] = [];
try {
  tunes = await fetchTunes();
  vehicles = await fetchVehicles();
} catch (err) {
  console.error('Error fetching tunes or vehicles:', err);
}
---

<form id="product-filters" class="flex flex-col gap-4">
  <div>
    <label for="tuneSlug" class="text-white">Tune</label>
    <select id="tuneSlug" name="tuneSlug" class="bg-black/50 text-white p-2 rounded">
      <option value="">All Tunes</option>
      {tunes.map(tune => (
        <option value={tune.slug.current} selected={tune.slug.current === currentTuneSlug}>
          {tune.title}
        </option>
      ))}
    </select>
  </div>
  <div>
    <label for="vehicleSlug" class="text-white">Vehicle</label>
    <select id="vehicleSlug" name="vehicleSlug" class="bg-black/50 text-white p-2 rounded">
      <option value="">All Vehicles</option>
      {vehicles.map(vehicle => (
        <option
          value={vehicle.slug?.current || ''}
          selected={vehicle.slug?.current === currentVehicleSlug}
        >
          {vehicle.title}
        </option>
      ))}
    </select>
  </div>
  <div>
    <label for="minHp" class="text-white">Minimum Horsepower</label>
    <input
      id="minHp"
      name="minHp"
      type="number"
      value={currentMinHp}
      class="bg-black/50 text-white p-2 rounded"
      placeholder="Enter min HP"
    />
  </div>
</form>

<script>
  function handleFilterChange(form: HTMLFormElement) {
    const formData = new FormData(form);
    const minHpValue = formData.get('minHp');
    return {
      categorySlug: new URLSearchParams(window.location.search).get('categorySlug'),
      tuneSlug: formData.get('tuneSlug'),
      vehicleSlug: formData.get('vehicleSlug'),
      minHp: minHpValue ? parseInt(minHpValue.toString()) : undefined,
    };
  }

  const form = document.getElementById('product-filters') as HTMLFormElement;
  if (form) {
    form.addEventListener('change', () => {
      const filters = handleFilterChange(form);
      console.log('Dispatching filterChange:', filters);
      const event = new CustomEvent('filterChange', { detail: filters });
      document.dispatchEvent(event);
    });
  }
</script>

<style>
  @media (max-width: 768px) {
    #product-filters select,
    #product-filters input {
      width: 100%;
    }
  }
</style>