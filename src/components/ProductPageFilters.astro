<div id="product-filters" class="w-full flex flex-wrap justify-center items-center gap-4 sm:gap-10 py-4 px-2 border-b border-white/10 backdrop-blur-md">
  <div class="flex flex-wrap justify-center items-center gap-4 sm:gap-10 w-full">
    <div>
      <label for="vehicle-select" class="block mb-1 text-white">Select Vehicle</label>
      <select id="vehicle-select" class="bg-black text-white px-4 py-2 border border-white/20 rounded">
        <option value="">-- Select Vehicle --</option>
      </select>
    </div>

    <div>
      <label for="tune-select" class="block mb-1 text-white">Select Tune</label>
      <select id="tune-select" class="bg-black text-white px-4 py-2 border border-white/20 rounded">
      <option value="">-- Select Tune --</option>
      </select>
    </div>

    <div>
      <label for="hp-slider" class="block mb-1 text-white text-sm">Horsepower</label>
      <div class="flex items-center gap-2">
        <input type="range" min="600" max="1500" step="50" value="600" id="hp-slider" />
        <div class="text-xs text-gray-400" id="hp-output">600 WHP</div>
      </div>
    </div>
  </div>
</div>

<script>
  fetch('/api/vehicles')
    .then(res => res.json())
    .then(data => {
      const models = data.result || [];
      const select = document.getElementById('vehicle-select');
      models.forEach(vehicle => {
        const option = document.createElement('option');
        option.value = vehicle.slug;
        option.textContent = `${vehicle.make} ${vehicle.model}`;
        select.appendChild(option);
      });
    })
    .catch(err => {
      console.error("❌ Failed to fetch vehicle models:", err);
    });
  
  fetch('/api/tunes')
    .then(res => res.json())
    .then(data => {
      const tunes = data.result || [];
      const select = document.getElementById('tune-select');
      tunes.forEach(tune => {
        const option = document.createElement('option');
        option.value = tune.slug;
        option.textContent = tune.title;
        select.appendChild(option);
      });
    })
    .catch(err => {
      console.error("❌ Failed to fetch tunes:", err);
    });

  // Dispatch system to communicate filter changes to the main Astro page
  const filterState = {
    vehicle: null,
    tune: null,
    horsepower: 600,
  };

  document.getElementById('vehicle-select').addEventListener('change', (e) => {
    const target = e.target as HTMLSelectElement;
    filterState.vehicle = target.value;
    dispatchFilterChange();
  });

  document.getElementById('tune-select').addEventListener('change', (e) => {
    const target = e.target as HTMLSelectElement;
    filterState.tune = target.value;
    dispatchFilterChange();
  });

  const slider = document.getElementById('hp-slider');
  const output = document.getElementById('hp-output');
  slider.addEventListener('input', (e) => {
    const target = e.target as HTMLInputElement;
    filterState.horsepower = parseInt(target.value, 10);
    output.textContent = `Selected WHP: ${filterState.horsepower}`;
    dispatchFilterChange(); // Emit filter change event for Astro page to listen
  });

  function dispatchFilterChange() {
    const event = new CustomEvent('filterChange', { detail: filterState });
    document.dispatchEvent(event); // Dispatch the event with current filter state
  }
</script>
