---
/**
 * ProductInfoPanel.astro â€” FAS theme (Sanity-friendly)
 *
 * Renders the right-side product info stack for the PDP:
 *  - Title, badges, price (with sale compare)
 *  - VariantSelector (chips)
 *  - Add to Cart button posting to your /api/checkout
 *  - Optional specs/attributes sections (can be toggled on later)
 *
 * Props (expected from Sanity):
 *  product: {
 *    _id: string;
 *    title?: string;
 *    slug?: { current?: string } | string;
 *    price?: number | string;
 *    salePrice?: number | string;
 *    onSale?: boolean;
 *    sku?: string;
 *    featured?: boolean;
 *    options?: Array<{ name: string; values: string[] }>; // optional option groups
 *    variants?: Array<{ _id: string; inStock?: boolean; selectedOptions?: { name: string; value: string }[] }>; // optional
 *    specs?: Array<{ key: string; value: string }>; // optional tech specs
 *    attributes?: Array<{ key: string; value: string }>; // optional attributes
 *    badges?: string[]; // e.g., ['New','Best Seller']
 *  }
 */

import Price from '@/components/storefront/Price.tsx';
import VariantSelector from '@/components/storefront/VariantSelector.tsx';

interface Slug { current?: string }
interface Spec { key: string; value: string }
interface KV { key: string; value: string }

const { product } = Astro.props as {
  product: {
    _id: string;
    title?: string;
    slug?: Slug | string;
    price?: number | string;
    salePrice?: number | string;
    onSale?: boolean;
    sku?: string;
    featured?: boolean;
    options?: Array<{ name: string; values: string[] }>;
    variants?: Array<{ _id: string; inStock?: boolean; selectedOptions?: { name: string; value: string }[] }>;
    specs?: Spec[];
    attributes?: KV[];
    badges?: string[];
  }
};

const title = product?.title || 'Untitled Product';
const slug = typeof product?.slug === 'string' ? product.slug : (product?.slug?.current || '');
const price = product?.salePrice ?? product?.price;
const compareAt = product?.onSale ? product?.price : undefined;
const sku = product?.sku || '';
const isFeatured = Boolean(product?.featured);
const badges: string[] = Array.isArray(product?.badges) ? product.badges : [];

// Build Variant data for selector (optional)
const optionGroups = Array.isArray(product?.options) ? product.options : [];
const variants = Array.isArray(product?.variants) ? product.variants.map(v => ({
  id: v._id,
  availableForSale: v.inStock ?? true,
  selectedOptions: Array.isArray(v.selectedOptions) ? v.selectedOptions : []
})) : undefined;

// Read current selected options from URL (?opt_color=Red&opt_size=L)
const url = new URL(Astro.request.url);
const selectedFromURL: Record<string, string> = {};
for (const [k, v] of url.searchParams.entries()) {
  if (k.startsWith('opt_')) selectedFromURL[k.replace('opt_','')] = v;
}

function hiddenInput(name: string, value: string) {
  return `<input type="hidden" name="${name}" value="${value}">`;
}
---
<div class="space-y-4 text-white">
  <!-- Title & badges -->
  <div>
    <h1 class="font-ethno text-2xl md:text-3xl">{title}</h1>
    <div class="mt-2 flex flex-wrap gap-2">
      {sku && (<span class="rounded-full border border-white/15 px-2 py-0.5 text-xs text-white/70">SKU: {sku}</span>)}
      {isFeatured && (<span class="rounded-full bg-primary px-2 py-0.5 text-xs text-white">Featured</span>)}
      {badges.map((b) => (<span class="rounded-full border border-white/15 px-2 py-0.5 text-xs text-white/70">{b}</span>))}
    </div>
  </div>

  <!-- Price -->
  <div class="mt-2">
    <Price amount={price} originalAmount={compareAt} onSale={product?.onSale} />
  </div>

  <!-- Variant Selector (chips) -->
  {optionGroups.length > 0 && (
    <div class="mt-4">
      <VariantSelector client:load options={optionGroups} variants={variants} selected={selectedFromURL} />
    </div>
  )}

  <!-- Add to Cart form -->
  <form method="POST" action="/api/checkout" class="mt-4 space-y-3">
    <input type="hidden" name="productId" value={product?._id} />
    <input type="hidden" name="productSlug" value={slug} />
    {Object.entries(selectedFromURL).map(([k,v]) => (
      <Fragment set:html={hiddenInput(`opt_${k}`, v)} />
    ))}

    <div class="flex items-center gap-2">
      <button type="submit" class="inline-flex items-center justify-center rounded-fx-md bg-primary px-5 py-2 font-semibold text-white hover:bg-primary/90 hover:text-white">
        Add to Cart
      </button>
      <a href="/contact" class="inline-flex items-center justify-center rounded-fx-md border border-white/30 px-4 py-2 hover:bg-white/80">
        Ask a question
      </a>
    </div>
  </form>

  <!-- Specs (optional; only render if provided) -->
  {Array.isArray(product?.specs) && product.specs.length > 0 && (
    <div class="mt-6">
      <div class="mb-2 text-sm uppercase tracking-wide fas-label text-muted-foreground">Specifications</div>
      <div class="overflow-hidden rounded-lg border border-white/20">
        <table class="w-full text-sm">
          <tbody>
            {product.specs.map((row: any) => (
              <tr class="odd:bg-white/5 even:bg-transparent">
                <td class="px-3 py-2 text-white/70 w-1/2">{row.key}</td>
                <td class="px-3 py-2 text-white">{row.value}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )}

  <!-- Attributes (optional) -->
  {Array.isArray(product?.attributes) && product.attributes.length > 0 && (
    <div class="mt-6">
      <div class="mb-2 text-sm uppercase tracking-wide fas-label text-muted-foreground">Attributes</div>
      <ul class="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm">
        {product.attributes.map((a: any) => (
          <li class="rounded-md border border-white/20 px-3 py-2 text-white/80"><span class="text-white/70">{a.key}:</span> {a.value}</li>
        ))}
      </ul>
    </div>
  )}
</div>
