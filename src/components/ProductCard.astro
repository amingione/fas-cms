---
const { productImage, product } = Astro.props;
const productPrice =
  typeof product.price === "number"
    ? `$${parseFloat(product.price).toFixed(2)}`
    : "â€”";

const imageUrl = productImage?.asset?.url || '/placeholder.png';
---

<div class="relative z-0 text-white bg-black/10 rounded-[10px] shadow-[inset_0_0_10px_rgba(0,0,0,0.5)] hover:shadow-[0_8px_20px_rgba(0,0,0,0.5)] overflow-hidden transform transition-all duration-500 group font-sans block">
  <a
    href={`/shop/${encodeURIComponent(typeof product.slug === 'string' ? product.slug : product.slug.current || '')}`}
    class="block"
  >
    <div class="p-4 h-52 sm:h-64 flex justify-center items-center overflow-hidden">
      <img
        src={imageUrl}
        alt={product.title}
        class="w-full h-full object-contain transition-transform duration-300 ease-in-out group-hover:scale-105 group-hover:-rotate-1"
      />
    </div>
    <div class="p-4 space-y-2 text-center">
      <div class="mt-4 px-4 text-left">
        <h2 class="text-sm sm:text-sm font-ethno font-semibold text-white">{product.title}</h2>
      </div>
    </div>
  </a>
  <div class="px-4 pb-4 text-left">
    <div class="flex justify-between items-center mt-2">
      <p class="text-3xl font-captain text-accent">{productPrice}</p>
      {product._id && (
        <button
          class="add-to-cart p-2 text-primary hover:text-white hover:bg-primary transition rounded-full"
          data-product-id={product._id}
          data-product-name={product.title}
          data-product-price={product.price}
          data-product-categories={JSON.stringify((product.categories || []).filter(Boolean).map((c: { _ref?: string; _id?: string }) => c._ref || c._id || ''))}
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-5 h-5">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.293 1.293a1 1 0 00-.293.707V17a1 1 0 001 1h12a1 1 0 001-1v-2a1 1 0 00-1-1H7z" />
          </svg>
        </button>
      )}
    </div>
  </div>
</div>

<script is:inline>
  (function () {
    // Prevent double-binding when multiple cards are on the page
    if (window.__fasCartBound) return;
    window.__fasCartBound = true;

    function getCart() {
      try {
        const raw = localStorage.getItem('cart');
        return raw ? JSON.parse(raw) : [];
      } catch { return []; }
    }

    function saveCart(cart) {
      try { localStorage.setItem('cart', JSON.stringify(cart)); } catch {}
      // Let other widgets (mini cart, header badge) react if they listen
      try { window.dispatchEvent(new CustomEvent('cart:updated', { detail: { cart } })); } catch {}
    }

    function showProductToast(message, success = true) {
      let toast = document.getElementById('product-toast');
      if (!toast) {
        toast = document.createElement('div');
        toast.id = 'product-toast';
        toast.className = 'fixed top-20 right-6 z-50 px-4 py-3 backdrop-blur font-bold shadow-lg transition-all duration-300 rounded hidden';
        document.body.appendChild(toast);
      }
      toast.textContent = message;
      toast.classList.remove('hidden');
      toast.classList.remove('bg-red-500/10', 'text-red-400');
      toast.classList.remove('bg-green-500/10', 'text-green-300');
      toast.classList.add(success ? 'bg-green-500/10' : 'bg-red-500/10');
      toast.classList.add(success ? 'text-green-300' : 'text-red-400');
      clearTimeout(window.__toastTimer);
      window.__toastTimer = setTimeout(() => { toast.classList.add('hidden'); }, 1800);
    }

    function addToCart(item) {
      const cart = getCart();
      const idx = cart.findIndex((c) => c.id === item.id);
      if (idx >= 0) {
        cart[idx].quantity += item.quantity || 1;
      } else {
        cart.push({ id: item.id, name: item.name, price: item.price, quantity: item.quantity || 1, categories: item.categories || [] });
      }
      saveCart(cart);
    }

    // Event delegation for all .add-to-cart buttons
    document.addEventListener('click', (e) => {
      const btn = e.target.closest('.add-to-cart');
      if (!btn) return;
      e.preventDefault();
      try {
        const id = btn.getAttribute('data-product-id');
        const name = btn.getAttribute('data-product-name') || 'Item';
        const priceRaw = btn.getAttribute('data-product-price');
        const catsRaw = btn.getAttribute('data-product-categories') || '[]';
        const price = Number.parseFloat(String(priceRaw ?? '0')) || 0;
        let categories = [];
        try { categories = JSON.parse(catsRaw) || []; } catch { categories = []; }
        if (!id) { showProductToast('Unable to add item (missing id)', false); return; }

        addToCart({ id, name, price, quantity: 1, categories });
        showProductToast(`Added to cart: ${name}`);
      } catch (err) {
        console.error('add-to-cart failed', err);
        showProductToast('Something went wrong adding to cart', false);
      }
    });
  })();
</script>