---
import { resolveSanityImageUrl } from '@/lib/sanity-utils';

const { productImage, product, layout = 'grid' } = Astro.props as any;
const productPrice =
  typeof product.price === "number"
    ? `$${parseFloat(product.price).toFixed(2)}`
    : "â€”";

const fallbackImage = '/logo/faslogochroma.webp';
const imageUrl = resolveSanityImageUrl([productImage, product?.images]) ?? fallbackImage;
---

<div class={`relative z-0 text-white backdrop-blur-md bg-black/80 rounded-[10px] border border-white/30 shadow-[inset_0_0_10px_rgba(0,0,0,0.5)] hover:shadow-[0_8px_20px_rgba(0,0,0,0.5)] overflow-hidden transform transition-all duration-500 group font-sans ${layout === 'list' ? 'md:flex md:items-stretch' : 'block'}`}>
  <a
    href={`/shop/${encodeURIComponent(typeof product.slug === 'string' ? product.slug : product.slug.current || '')}`}
    class={`${layout === 'list' ? 'md:flex md:flex-row md:items-stretch w-full' : 'block'}`}
  >
    <div class={`flex justify-center items-center overflow-hidden ${layout === 'list' ? 'md:w-56 md:min-w-56 md:max-w-56 p-3' : 'p-4 h-52 sm:h-64'}`}>
      <img
        src={imageUrl}
        alt={product.title}
        class="w-full h-full object-contain transition-transform duration-300 ease-in-out group-hover:scale-105 group-hover:-rotate-1"
      />
    </div>
    <div class={`${layout === 'list' ? 'flex-1 p-4 text-left' : 'p-4 space-y-2 text-center'}`}>
      <div class={`${layout === 'list' ? '' : 'mt-4 px-4'} text-left`}>
        <h2 class="text-sm sm:text-base font-ethno font-semibold text-white">{product.title}</h2>
      </div>
      {layout === 'list' && (
        <p class="mt-2 text-xs sm:text-sm text-white/70 line-clamp-2">
        </p>
      )}
    </div>
  </a>
  <div class={`${layout === 'list' ? 'md:px-4 md:py-3 md:border-t-0 md:border-l md:border-white/20 md:flex md:items-center md:justify-between' : 'px-4 pb-4'} text-left`}>
    <div class="flex justify-between items-center mt-2">
      <p class={`${layout === 'list' ? 'text-2xl md:text-xl' : 'text-3xl'} font-mono text-accent`}>{productPrice}</p>
      {product._id && (
        <button
          class="add-to-cart p-2 text-primary hover:text-white hover:bg-primary transition rounded-full"
          data-product-id={product._id}
          data-product-name={product.title}
          data-product-price={product.price}
          data-product-image={imageUrl}
          data-product-categories={JSON.stringify((product.categories || []).filter(Boolean).map((c: { _ref?: string; _id?: string }) => c._ref || c._id || ''))}
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-5 h-5">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.293 1.293a1 1 0 00-.293.707V17a1 1 0 001 1h12a1 1 0 001-1v-2a1 1 0 00-1-1H7z" />
          </svg>
        </button>
      )}
    </div>
  </div>
</div>

<script is:inline>
  (function () {
    // Prevent double-binding when multiple cards are on the page
    if (window.__fasCartBound) return;
    window.__fasCartBound = true;

    const CART_KEY = 'fas_cart_v1';

    function getCart() {
      try {
        const raw = localStorage.getItem(CART_KEY);
        const parsed = raw ? JSON.parse(raw) : null;
        if (parsed && Array.isArray(parsed.items)) return parsed;
        return { items: [] };
      } catch { return { items: [] }; }
    }

    function saveCart(cart) {
      try { localStorage.setItem(CART_KEY, JSON.stringify(cart)); } catch {}
      // Notify global cart context
      try { window.dispatchEvent(new CustomEvent('cart:changed', { detail: { cart } })); } catch {}
    }

    function showProductToast(message, success = true) {
      let toast = document.getElementById('product-toast');
      if (!toast) {
        toast = document.createElement('div');
        toast.id = 'product-toast';
        toast.className = 'fixed top-20 right-6 z-50 px-4 py-3 backdrop-blur font-bold shadow-lg transition-all duration-300 rounded hidden';
        document.body.appendChild(toast);
      }
      toast.textContent = message;
      toast.classList.remove('hidden');
      toast.classList.remove('bg-red-500/10', 'text-red-400');
      toast.classList.remove('bg-green-500/10', 'text-green-300');
      toast.classList.add(success ? 'bg-green-500/10' : 'bg-red-500/10');
      toast.classList.add(success ? 'text-green-300' : 'text-red-400');
      clearTimeout(window.__toastTimer);
      window.__toastTimer = setTimeout(() => { toast.classList.add('hidden'); }, 1800);
    }

    function addToCart(item) {
      const cart = getCart();
      const items = cart.items || [];
      const idx = items.findIndex((c) => c.id === item.id);
      if (idx >= 0) {
        items[idx].quantity = (items[idx].quantity || 1) + (item.quantity || 1);
        // Keep display fields updated
        items[idx].name = item.name || items[idx].name;
        items[idx].price = item.price ?? items[idx].price;
        items[idx].image = item.image ?? items[idx].image;
        items[idx].options = item.options || items[idx].options;
      } else {
        items.push({ id: item.id, name: item.name, price: item.price, image: item.image, quantity: item.quantity || 1, options: item.options || undefined });
      }
      cart.items = items;
      saveCart(cart);
    }

    // Event delegation for all .add-to-cart buttons
    document.addEventListener('click', (e) => {
      const btn = e.target.closest('.add-to-cart');
      if (!btn) return;
      e.preventDefault();
      try {
        const baseId = btn.getAttribute('data-product-id');
        const name = btn.getAttribute('data-product-name') || 'Item';
        const priceRaw = btn.getAttribute('data-product-price');
        const image = btn.getAttribute('data-product-image') || "";
        const price = Number.parseFloat(String(priceRaw ?? '0')) || 0;
        if (!baseId) { showProductToast('Unable to add item (missing id)', false); return; }

        // Simple line id (no configuration on cards)
        const id = baseId;
        addToCart({ id, name, price, image: image || '${imageUrl}', quantity: 1 });
        showProductToast(`Added to cart: ${name}`);
      } catch (err) {
        console.error('add-to-cart failed', err);
        showProductToast('Something went wrong adding to cart', false);
      }
    });
  })();
</script>
