---
import AccountDashboard from '@/components/accountdashboard.astro';
import MobileMenu from '@/components/navbar/mobile-menu';
import CartEntry from '@/components/cart/CartEntry.tsx';
import CartButton from '@/components/cart/cart-button.tsx';
import { SearchBar } from '@/components/SearchBar.tsx';
import HeaderAuthLoader from '@/components/HeaderAuthLoader';
import DesktopCart from '@/components/cart/DesktopCart';
---

<header class="text-white w-full fixed top-0 z-[99999]">
  <HeaderAuthLoader client:load />
  <CartEntry client:only="react" />

  <!-- Mobile Header -->
  <div id="mheader" class="md:hidden relative w-full bg-black/80 backdrop-blur-md shadow-xl flex items-center justify-between px-4 h-14">
    <!-- Mobile menu toggle -->
    <button id="mnavToggle"
            aria-label="Open menu"
            aria-expanded="false"
            aria-controls="mnavDrawer"
            class="p-2 rounded-lg hover:bg-white/10 focus:outline-none focus-visible:ring-2 focus-visible:ring-white/10">
      <svg id="mnavIcon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-7 h-7" fill="none" stroke="currentColor" stroke-width="2">
        <path id="mline1" stroke-linecap="round" stroke-linejoin="round" d="M4 7h16"/>
        <path id="mline2" stroke-linecap="round" stroke-linejoin="round" d="M4 12h16"/>
        <path id="mline3" stroke-linecap="round" stroke-linejoin="round" d="M4 17h16"/>
      </svg>
    </button>

    <!-- Center Logo -->
    <a href="/" class="block">
      <img src="/logo/faslogochroma.png" alt="FAS Chrome Logo" class="h-8" />
    </a>

    <!-- Right: Cart button -->
    <div>
      <CartButton client:only="react" forceMobileModal />
    </div>

  </div>

  <!-- Top Bar (Desktop/Tablet) -->
  <div id="topBar" class="hidden md:block pt-5 transform transition-transform duration-300 will-change-transform">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex items-center justify-between h-8">
      <div class="flex items-center gap-4">

      </div>
      <div class="flex items-center gap-4">
        <div
          id="account-top-badge"
          class="flex items-center gap-2 text-xs font-ethno tracking-wide"
        >
          <a href="/account" class="hover:!text-primary transition-colors duration-200">Sign in</a>
        </div>
      </div>
    </div>
  </div>

  

  <!-- Desktop Header -->
  <div id="dheader" class="hidden rounded-full border border-white/5 border-shadow shadow-inner drop-shadow-md backdrop-blur-sm bg-black/40 shadow-white/10 md:block px-10 mx-10 ">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid grid-cols-1 md:grid-cols-3 items-center h-16">
      <div class="flex items-center gap-4">
        <button
          id="desktopCategoryToggle"
          aria-label="Toggle Categories"
          class="p-2 rounded-lg hover:text-primary"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
      <div class="flex justify-center">
        <a href="/">
          <img src="/logo/faslogo150.png" alt="FAS Logo" class="h-12 w-auto object-contain transition-all duration-300" width="96" height="96" />
        </a>
      </div>
      <div class="flex justify-end items-center gap-4">
        <button
          id="desktopSearchToggle"
          type="button"
          aria-expanded="false"
          aria-controls="searchOverlay"
          aria-label="Open search"
          class="hidden sm:inline-flex items-center justify-center p-2 rounded-lg hover:text-primary"
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="1.5">
            <path stroke-linecap="round" stroke-linejoin="round" d="m20.25 20.25-3.5-3.5" />
            <circle cx="10.5" cy="10.5" r="6.5" />
          </svg>
        </button>
        <nav class="hidden md:flex items-center gap-3 text-sm font-ethno">
          <a href="/" class="hover:text-accent transition-colors duration-300">Home</a>
          <span class="text-gray-500">|</span>
          <a href="/shop/storefront" class="hover:text-accent transition-colors duration-300">Shop ➤</a>
        </nav>
           <DesktopCart client:only="react" />
        <button id="accountDashboardToggleTop" aria-label="Open account panel" class="sm:hidden lg:hidden inline-flex items-center justify-center p-1.5 rounded hover:text-primary">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="4" width="18" height="16" rx="2" ry="2"/>
            <line x1="16" y1="4" x2="16" y2="20"/>
            <rect x="5" y="6" width="9" height="12" rx="1"/>
          </svg>
        </button>
      </div>
    </div>

  </div>

</header>

<!-- Root-level overlays (mirrors Header.astro structure to avoid header stacking) -->
<!-- Mobile Drawer + Scrim -->
<div id="mnavScrim" aria-hidden="true" class="md:hidden fixed inset-0 bg-black/60 backdrop-blur-sm z-[99998] hidden opacity-0 transition-opacity duration-300 pointer-events-none"></div>
<aside
  id="mnavDrawer"
  class="md:hidden fixed top-0 left-0 h-full w-4/5 max-w-[360px] bg-black/95 border-r border-gray-700 z-[100000] overflow-y-auto -translate-x-full transition-transform duration-300 ease-out"
>
  <div class="pt-12 pb-8 px-4">
    <MobileMenu mode="inline" client:only="react" />
    <button id="closeMobileDrawer" class="text-accent hover:text-white text-xl font-bold absolute top-4 right-4">×</button>
  </div>
</aside>

<!-- Desktop Drawer + Scrim -->
<div id="desktopScrim" aria-hidden="true" class="hidden fixed inset-0 bg-black/60 backdrop-blur-sm z-[99999] opacity-0 transition-opacity duration-300 pointer-events-none"></div>
<aside
  id="desktopDrawerLeft"
  aria-hidden="true"
  class="hidden md:block invisible fixed top-0 left-0 h-full w-[330px] border-r bg-black/90 border-gray-700 z-[100000] overflow-y-auto -translate-x-full transition-transform duration-300 ease-out"
>
  <div class="pt-16 pb-8 px-6">
    <button id="closeDesktopDrawerLeft" class="text-accent hover:text-white text-xl font-bold absolute top-4 right-4">×</button>
    <MobileMenu mode="inline" client:only="react" />
  </div>
</aside>

<!-- Account Dashboard Drawer (right side) -->
<aside
  id="accountDashboardPanel"
  class="hidden fixed top-0 right-0 h-full w-[360px] bg-black/85 backdrop-blur-md border-l border-white/10 z-[100000] overflow-y-auto translate-x-full transition-transform duration-300 ease-out"
>
  <div class="pt-12 pb-8 px-6">
    <h2 class="text-xl font-bold text-white">Account</h2>
    <button id="closeAccountDashboard" class="absolute top-4 right-4 text-accent hover:text-white text-xl font-bold">×</button>
    <AccountDashboard />
  </div>
</aside>

<!-- Global Search Overlay -->
<div
  id="searchOverlayScrim"
  aria-hidden="true"
  class="hidden fixed inset-0 bg-black/70 backdrop-blur-sm z-[110000] transition-opacity duration-200 pointer-events-none"
  style="opacity: 0;"
></div>
<div
  id="searchOverlay"
  class="hidden fixed top-16 left-0 right-0 z-[110001] transition-all duration-200 pointer-events-none"
  style="transform: translateY(-1rem); opacity: 0;"
>
  <div class="mx-auto w-full max-w-xl px-4">
    <div class="rounded-2xl border border-white/15 bg-black/95 shadow-2xl p-4 flex items-start gap-3">
      <div class="flex-1">
        <SearchBar
          client:only="react"
          size="compact"
          enableSuggestions={true}
          variant="storefront"
          portal={false}
        />
      </div>
      <button
        id="closeSearchOverlay"
        type="button"
        class="mt-1 text-white/70 hover:text-white focus:outline-none"
        aria-label="Close search"
      >
        ×
      </button>
    </div>
  </div>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    // Mobile Nav Drawer
    const mnavToggle = document.getElementById("mnavToggle");
    const mnavDrawer = document.getElementById("mnavDrawer");
    const mnavScrim = document.getElementById("mnavScrim");
    const mline1 = document.getElementById("mline1");
    const mline2 = document.getElementById("mline2");
    const mline3 = document.getElementById("mline3");
    const closeMobileDrawer = document.getElementById("closeMobileDrawer");
    let mnavOpen = false;

    function openMnav() {
      mnavDrawer.classList.remove("-translate-x-full");
      mnavScrim.classList.remove("hidden", "pointer-events-none", "opacity-0");
      mnavScrim.setAttribute("aria-hidden", "false");
      mline1.setAttribute("d", "M6 6l12 12");
      mline2.setAttribute("d", "");
      mline3.setAttribute("d", "M6 18l12 -12");
      mnavToggle.setAttribute("aria-expanded", "true");
      document.body.style.overflow = "hidden";
      mnavOpen = true;
      try { window.dispatchEvent(new Event('menu:open')); } catch {}
    }

    function closeMnav() {
      mnavDrawer.classList.add("-translate-x-full");
      mnavScrim.classList.add("opacity-0", "pointer-events-none");
      mnavScrim.setAttribute("aria-hidden", "true");
      setTimeout(() => mnavScrim.classList.add("hidden"), 300);
      mline1.setAttribute("d", "M4 7h16");
      mline2.setAttribute("d", "M4 12h16");
      mline3.setAttribute("d", "M4 17h16");
      mnavToggle.setAttribute("aria-expanded", "false");
      document.body.style.overflow = "";
      mnavOpen = false;
      try { window.dispatchEvent(new Event('menu:close')); } catch {}
    }

    mnavToggle?.addEventListener("click", () => (mnavOpen ? closeMnav() : openMnav()));
    mnavScrim?.addEventListener("click", closeMnav);
    closeMobileDrawer?.addEventListener("click", closeMnav);
    document.addEventListener("keydown", (e) => e.key === "Escape" && mnavOpen && closeMnav());

    // Desktop Nav Drawer
    const desktopCategoryToggle = document.getElementById("desktopCategoryToggle");
    const desktopDrawerLeft = document.getElementById("desktopDrawerLeft");
    const closeDesktopDrawerLeft = document.getElementById("closeDesktopDrawerLeft");
    const desktopScrim = document.getElementById("desktopScrim");
    let isDesktopLeftOpen = false;

    function openDesktopLeft() {
      desktopDrawerLeft.classList.remove("hidden", "-translate-x-full", "invisible");
      desktopDrawerLeft.setAttribute('aria-hidden', 'false');
      desktopScrim.classList.remove("hidden", "pointer-events-none", "opacity-0");
      document.body.style.overflow = "hidden";
      isDesktopLeftOpen = true;
    }

    function closeDesktopLeft() {
      desktopDrawerLeft.classList.add("-translate-x-full");
      desktopScrim.classList.add("opacity-0", "pointer-events-none");
      setTimeout(() => {
        desktopScrim.classList.add("hidden");
        desktopDrawerLeft.classList.add("invisible");
        desktopDrawerLeft.setAttribute('aria-hidden', 'true');
      }, 300);
      document.body.style.overflow = "";
      isDesktopLeftOpen = false;
    }

    desktopCategoryToggle?.addEventListener("click", () => (isDesktopLeftOpen ? closeDesktopLeft() : openDesktopLeft()));
    closeDesktopDrawerLeft?.addEventListener("click", closeDesktopLeft);
    desktopScrim?.addEventListener("click", closeDesktopLeft);

    // Account Dashboard
    const accountDashboardToggle = document.getElementById("accountDashboardToggle");
    const accountDashboardToggleTop = document.getElementById("accountDashboardToggleTop");
    const accountDashboardPanel = document.getElementById("accountDashboardPanel");
    const closeAccountDashboard = document.getElementById("closeAccountDashboard");
    let isDashboardOpen = false;

    function openDashboard() {
      // make visible, then slide in
      accountDashboardPanel.classList.remove('hidden');
      requestAnimationFrame(() => {
        accountDashboardPanel.classList.remove('translate-x-full');
      });
      desktopScrim.classList.remove('hidden', 'pointer-events-none', 'opacity-0');
      // Hide scrollbars
      document.documentElement.style.overflow = 'hidden';
      document.body.style.overflow = 'hidden';
      isDashboardOpen = true;
    }

    function closeDashboard() {
      // slide out, then hide
      accountDashboardPanel.classList.add('translate-x-full');
      desktopScrim.classList.add('opacity-0', 'pointer-events-none');
      setTimeout(() => {
        desktopScrim.classList.add('hidden');
        accountDashboardPanel.classList.add('hidden');
      }, 300);
      document.documentElement.style.overflow = '';
      document.body.style.overflow = '';
      isDashboardOpen = false;
    }

    accountDashboardToggle?.addEventListener("click", () => {
      if (isDashboardOpen) return closeDashboard();
      openDashboard();
    });
    accountDashboardToggleTop?.addEventListener("click", () => {
      if (isDashboardOpen) return closeDashboard();
      openDashboard();
    });
    closeAccountDashboard?.addEventListener("click", closeDashboard);
    desktopScrim?.addEventListener("click", closeDashboard);

    // Global search overlay
    const mobileSearchToggle = document.getElementById('mobileSearchToggle');
    const desktopSearchToggle = document.getElementById('desktopSearchToggle');
    const searchOverlay = document.getElementById('searchOverlay');
    const searchOverlayScrim = document.getElementById('searchOverlayScrim');
    const closeSearchOverlay = document.getElementById('closeSearchOverlay');
    let isSearchOpen = false;

    function focusSearchInput() {
      if (!searchOverlay) return;
      const input = searchOverlay.querySelector('input');
      if (input && typeof input.focus === 'function') {
        setTimeout(() => {
          try {
            input.focus();
          } catch {}
        }, 20);
      }
    }

    function openSearch() {
      if (!searchOverlay || !searchOverlayScrim) return;
      searchOverlay.classList.remove('hidden', 'pointer-events-none');
      searchOverlayScrim.classList.remove('hidden', 'pointer-events-none');
      requestAnimationFrame(() => {
        if (searchOverlay) {
          searchOverlay.style.transform = 'translateY(0)';
          searchOverlay.style.opacity = '1';
        }
        if (searchOverlayScrim) {
          searchOverlayScrim.style.opacity = '1';
        }
      });
      mobileSearchToggle?.setAttribute('aria-expanded', 'true');
      desktopSearchToggle?.setAttribute('aria-expanded', 'true');
      isSearchOpen = true;
      focusSearchInput();
    }

    function closeSearch() {
      if (!searchOverlay || !searchOverlayScrim) return;
      searchOverlay.style.transform = 'translateY(-1rem)';
      searchOverlay.style.opacity = '0';
      searchOverlay.classList.add('pointer-events-none');
      searchOverlayScrim.style.opacity = '0';
      searchOverlayScrim.classList.add('pointer-events-none');
      mobileSearchToggle?.setAttribute('aria-expanded', 'false');
      desktopSearchToggle?.setAttribute('aria-expanded', 'false');
      setTimeout(() => {
        searchOverlay.classList.add('hidden');
        searchOverlayScrim.classList.add('hidden');
      }, 200);
      isSearchOpen = false;
    }

    function toggleSearch() {
      if (isSearchOpen) {
        closeSearch();
        return;
      }
      closeMnav();
      closeDesktopLeft();
      closeDashboard();
      openSearch();
    }

    mobileSearchToggle?.addEventListener('click', toggleSearch);
    desktopSearchToggle?.addEventListener('click', toggleSearch);
    searchOverlayScrim?.addEventListener('click', closeSearch);
    closeSearchOverlay?.addEventListener('click', closeSearch);

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeMnav();
        closeDesktopLeft();
        closeDashboard();
        closeSearch();
      }
    });

    // Sticky Header Scroll Effect
    const mheader = document.getElementById("mheader");
    const dheader = document.getElementById("dheader");
    const shrinkThreshold = 120;
    const topBar = document.getElementById('topBar');
    let lastY = window.scrollY;

    // Ensure desktop header never shrinks
    if (dheader) dheader.classList.remove('d-shrink');

    function handleScroll() {
      const scrollY = window.scrollY;
      // Shrink logos
      if (mheader) {
        mheader.classList.toggle("m-shrink", scrollY > shrinkThreshold);
      }
      // Desktop header: keep full size on scroll
      if (dheader) dheader.classList.remove('d-shrink');
      // Auto-hide top bar on scroll down, reveal on scroll up
      if (topBar) {
        if (scrollY > 10 && scrollY > lastY + 2) {
          topBar.classList.add('-translate-y-full');
        } else if (scrollY < lastY - 2 || scrollY < 10) {
          topBar.classList.remove('-translate-y-full');
        }
      }
      lastY = scrollY;
    }

    window.addEventListener("scroll", handleScroll, { passive: true });
  });
</script>

<style>
  .m-shrink {
    @apply h-12;
  }
  .m-shrink img {
    @apply h-6;
  }
  .d-shrink {
    @apply h-12;
  }
  .d-shrink img {
    @apply h-8;
  }
  .header-fade-in {
    opacity: 0;
    transform: translateY(-12px);
    animation: header-enter 600ms ease-out forwards;
  }
  @keyframes header-enter {
    to { opacity: 1; transform: translateY(0); }
  }
  img {
    @apply max-w-full object-contain;
  }
  button, a {
    @apply transition-colors duration-300;
  }
</style>
