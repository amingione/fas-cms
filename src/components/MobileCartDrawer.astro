---
import { createClient } from '@sanity/client';

const client = createClient({
  projectId: import.meta.env.PUBLIC_SANITY_PROJECT_ID,
  dataset: import.meta.env.PUBLIC_SANITY_DATASET,
  apiVersion: '2023-01-01',
  useCdn: true,
});

const cartRaw = JSON.parse(globalThis.localStorage?.getItem('cart') || '[]');

// Extract Sanity product IDs
const ids = cartRaw.map(item => item.id);
let products = [];

if (ids.length > 0) {
  products = await client.fetch(`*[_type == "product" && _id in $ids]{ _id, title, price }`, { ids });
}

const cartItems = cartRaw.map(item => {
  const match = products.find(p => p._id === item.id);
  return match ? { ...match, quantity: item.quantity } : null;
}).filter(Boolean);

const subtotal = cartItems.reduce((acc, item) => acc + item.quantity * item.price, 0);
const itemCount = cartItems.reduce((acc, item) => acc + item.quantity, 0);
---

<!-- Cart Icon with Badge -->
<button onclick="openMobileCart()" class="relative text-2xl">
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13l-1.5 6h11.1M7 13L5.4 5M16 16a2 2 0 100 4 2 2 0 000-4zm-8 0a2 2 0 100 4 2 2 0 000-4z" />
  </svg>
  {itemCount > 0 && (
    <span class="absolute -top-2 -right-2 bg-red-600 text-white text-xs px-1.5 rounded-full font-bold">
      {itemCount}
    </span>
  )}
</button>

<!-- Slide-Up Cart Drawer -->
<div
  id="mobileCartDrawer"
  class="fixed bottom-0 left-0 w-full h-[65vh] bg-[#111111] text-white z-50 transition-transform duration-300 transform rounded-t-2xl shadow-xl translate-y-full"
>
  <div class="p-4 flex justify-between items-center border-b border-white/10">
    <h2 class="text-xl font-bold font-captain">Your Cart</h2>
    <button onclick="closeMobileCart()" class="text-white text-2xl">×</button>
  </div>

  <div class="p-4 overflow-y-auto h-[calc(100%-12rem)]">
    {cartItems.length === 0 ? (
      <div class="text-center text-gray-400">
        <p class="mb-4">Your cart is empty.</p>
        <a
          href="/shop"
          class="inline-block bg-white text-black px-4 py-2 rounded font-bold hover:bg-primary hover:text-white"
        >
          Shop Now
        </a>
      </div>
    ) : (
      cartItems.map(item => (
        <div class="flex justify-between items-center border-b border-white/10 py-3">
          <div>
            <p class="text-sm font-semibold">{item.name}</p>
            <p class="text-xs text-gray-400">{item.quantity}x • ${item.price.toFixed(2)}</p>
          </div>
          <div class="text-sm font-bold">${(item.quantity * item.price).toFixed(2)}</div>
        </div>
      ))
    )}
  </div>

  <div class="p-4 border-t border-white/10">
    <div class="flex justify-between mb-4">
      <span class="font-semibold text-lg">Subtotal</span>
      <span class="font-bold text-primary text-lg">${subtotal.toFixed(2)}</span>
    </div>
    <button
      onclick="checkout()"
      class="block w-full bg-primary text-black py-3 rounded hover:opacity-90 transition-all font-bold tracking-wide"
    >
      Proceed to Checkout
    </button>
  </div>
</div>

<script>
  function openMobileCart() {
    document.getElementById('mobileCartDrawer')?.classList.remove('translate-y-full');
  }

  function closeMobileCart() {
    document.getElementById('mobileCartDrawer')?.classList.add('translate-y-full');
  }

  async function checkout() {
    const res = await fetch('/api/checkout', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        sessionId: window.localStorage.getItem('fas_session') || 'guest-session',
      }),
    });

    const data = await res.json();
    if (data.url) {
      window.location.href = data.url;
    } else {
      alert('Unable to start checkout. Please try again.');
    }
  }
</script>