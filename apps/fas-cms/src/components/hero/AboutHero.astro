---
interface Props {
  titleTop?: string;
  titleBottom?: string;
  description?: string;
  ctaText?: string;
  ctaHref?: string;
  imageSrc?: string;
  backgroundTextureSrc?: string;
}
const {
  titleTop = 'Since 2002',
  titleBottom = 'Supercharger Innovation',
  description = 'We are a full production machine and performance shop that specializes in Hellcats, LS, and LT4 based cars.',
  ctaText = 'Read More',
  ctaHref = '#about',
  imageSrc = '/images/FAS-Team-Testing-Day.png',
  backgroundTextureSrc = '/images/backgrounds/bg-spiral-overlay.png'
} = Astro.props as Props;
---

<section class="relative min-h-[640px] gap-[-2] lg:min-h-[80vh] overflow-hidden bg-[#121212] px-[5px]">

  <!-- Background overlay inset by 5px -->
  <div class="pointer-events-none absolute inset-[5px]">
    <img src={backgroundTextureSrc} alt="" class="w-full h-full object-cover opacity-60" />
  </div>

  <!-- Main Content Container -->
  <div class="relative z-10 max-w-7xl mx-auto px-6 lg:px-20 py-12 lg:py-24">
    <!-- Decorative right-side texture lines -->

    <!-- Two-column layout that preserves adjacency and order -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-12 items-center">
      <!-- Image Column -->
      <div class="order-1 md:order-1 z-10" data-tilt-root>
        <div class="relative rounded-2xl lg:rounded-3xl">
          <div data-tilt class="relative will-change-transform transform-gpu" style="transform-style: preserve-3d;">
            <svg width="570" height="525" viewBox="0 0 570 525" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-full h-[260px] md:h-[420px]">
              <defs>
                <pattern id="pattern0_hero_image" patternContentUnits="objectBoundingBox" width="1" height="1">
                  <image href={imageSrc} x="0" y="0" width="1" height="1" preserveAspectRatio="xMidYMid slice" />
                </pattern>
              </defs>
              <path d="M570 88.8026C570 73.5498 558.555 60.7249 543.401 58.996L33.4006 0.810643C15.6005 -1.22016 0 12.7016 0 30.6173V494.632C0 512.097 14.8604 525.87 32.2752 524.545L542.275 485.755C557.916 484.565 570 471.527 570 455.841V88.8026Z" fill="url(#pattern0_hero_image)" style="transform: translateZ(30px);"/>
            </svg>
          </div>
        </div>
      </div>

      <!-- Content Column: header → subheader → button as a single group -->
      <div class="order-2 md:order-2 ml-[-3] relative text-center md:text-left z-0" data-tilt-root>

        <div data-tilt class="relative max-w-lg md:max-w-[720px] space-y-6 bg-gradient-to-br from-red-900/20 via-black/30 to-black/50 rounded-2xl lg:rounded-3xl p-6 md:p-8 backdrop-blur-sm border border-white/20 md:-mr-12 md:shadow-2xl">
          <h1 class="text-4xl md:text-5xl font-ethno text-white leading-tight">{titleTop}</h1>
          <p class="text-white/80 text-lg md:text-xl font-mono font-bold leading-relaxed">{description}</p>
          <div>
            <a href={ctaHref} class="inline-flex items-center justify-center px-6 py-3 rounded-[10px] bg-[#636363] text-white text-base md:text-lg font-medium hover:bg-[#737373] transition">{ctaText}</a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Tilt Effect Script -->
  <script is:inline>
    (function(){
      const section = document.currentScript?.closest('section');
      if (!section) return;

      const prefersNoHover = window.matchMedia('(hover: none)').matches;
      if (prefersNoHover) return;

      const max = 6; // degrees
      const damp = 0.15; // smoothing

      function attach(root){
        const card = root.querySelector('[data-tilt]');
        if (!card) return;
        let rx = 0, ry = 0, tx = 0, ty = 0, raf = null;

        function onMove(e){
          const rect = root.getBoundingClientRect();
          const px = (e.clientX - rect.left) / rect.width; // 0..1
          const py = (e.clientY - rect.top) / rect.height; // 0..1
          ry = (px - 0.5) * max * 2; // rotateY
          rx = -(py - 0.5) * max * 2; // rotateX
          if (!raf) raf = requestAnimationFrame(loop);
        }
        function loop(){
          tx += (rx - tx) * damp;
          ty += (ry - ty) * damp;
          card.style.transform = `perspective(1000px) rotateX(${tx.toFixed(2)}deg) rotateY(${ty.toFixed(2)}deg)`;
          raf = requestAnimationFrame(loop);
        }
        function reset(){
          rx = ry = 0;
          cancelAnimationFrame(raf); raf = null;
          card.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg)';
        }
        root.addEventListener('mousemove', onMove);
        root.addEventListener('mouseleave', reset);
      }

      section.querySelectorAll('[data-tilt-root]').forEach(attach);
    })();
  </script>

  <style>
    /* Responsive adjustments */
    @media (max-width: 1023px) {
      .lg\:transform.lg\:rotate-\[1deg\] {
        transform: none;
      }
    }
    
    /* Ensure proper stacking and positioning */
    .absolute {
      pointer-events: auto;
    }
    
    /* Mobile-specific styling */
    @media (max-width: 1023px) {
      section {
        text-align: center;
        padding-top: 2rem;
        padding-bottom: 2rem;
      }
    }
  </style>
</section>
