---
interface Props { current?: string }
const { current = 'overview' } = Astro.props as Props;
const items = [
  { key: 'overview', href: '/jtx/wheels', label: 'JTX Overview' },
  { key: 'monoforged', href: '/jtx/monoforged', label: 'Monoforged Series' },
  { key: 'single', href: '/jtx/single', label: 'Single Series' },
  { key: 'dually', href: '/jtx/dually', label: 'Dually Series' },
  { key: 'utv', href: '/jtx/utv', label: 'UTV Series' },
  { key: 'two-piece', href: '/jtx/two-piece', label: '2-Piece Series' },
  { key: 'beadlock', href: '/jtx/beadlock', label: 'Beadlock Series' },
  { key: 'phantom', href: '/jtx/phantom', label: 'Phantom Series' },
  { key: 'concave', href: '/jtx/concave', label: 'Concave Series' },
  { key: 'rock-ring', href: '/jtx/rock-ring', label: 'Rock Ring Series' },
  { key: 'retro', href: '/jtx/retro', label: 'Retro Series' },
];
---
<!-- Mobile drawer trigger -->
<div class="md:hidden">
  <button id="jtx-menu-open" class="btn-glass btn-outline px-4 py-2 rounded-full">Wheels Menu</button>
  </div>

<!-- Desktop sidebar -->
<aside class="hidden md:block sticky top-24 self-start">
  <div class="rounded-xl border border-white/20 bg-black/50 backdrop-blur p-4 w-[240px]">
    <div class="text-sm font-bold mb-2 text-white/80">JTX Forged</div>
    <ul class="space-y-1 text-sm">
      {items.map((it) => (
        <li><a href={it.href} class={`block rounded px-3 py-1.5 hover:bg-white/5 ${current===it.key ? 'bg-white/10 text-white' : 'text-white/80'}`}>{it.label}</a></li>
      ))}
    </ul>
  </div>
</aside>

<!-- Mobile drawer markup -->
<div id="jtx-scrim" class="md:hidden fixed inset-0 bg-black/60 backdrop-blur-sm z-[90] hidden opacity-0 transition-opacity"></div>
<div id="jtx-drawer" class="md:hidden fixed bottom-0 left-0 right-0 translate-y-full z-[95] transition-transform">
  <div class="rounded-t-2xl border-t border-white/20 bg-[#0b0b0c]/95 p-4">
    <div class="flex items-center justify-between mb-2">
      <div class="text-sm font-bold text-white/90">JTX Forged</div>
      <button id="jtx-menu-close" class="text-white/80 hover:text-white">âœ•</button>
    </div>
    <ul class="space-y-1 text-base">
      {items.map((it) => (
        <li>
          <a href={it.href} class={`block rounded px-3 py-2 hover:bg-white/10 ${current === it.key ? 'bg-white/10 text-white' : 'text-white/90'}`}>{it.label}</a>
        </li>
      ))}
    </ul>
  </div>
</div>

<script>
  const openBtn = document.getElementById('jtx-menu-open');
  const closeBtn = document.getElementById('jtx-menu-close');
  const scrim = document.getElementById('jtx-scrim');
  const drawer = document.getElementById('jtx-drawer');
  function open(){ if(!drawer||!scrim) return; drawer.style.transform='translateY(0)'; scrim.classList.remove('hidden'); requestAnimationFrame(()=>scrim.classList.remove('opacity-0')); }
  function close(){ if(!drawer||!scrim) return; drawer.style.transform='translateY(100%)'; scrim.classList.add('opacity-0'); setTimeout(()=>scrim.classList.add('hidden'), 300); }
  openBtn?.addEventListener('click', open);
  closeBtn?.addEventListener('click', close);
  scrim?.addEventListener('click', close);
</script>
